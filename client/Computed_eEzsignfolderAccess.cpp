/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "Computed_eEzsignfolderAccess.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "Helpers.h"

namespace Ezmaxapi {

Computed_eEzsignfolderAccess::Computed_eEzsignfolderAccess(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

Computed_eEzsignfolderAccess::Computed_eEzsignfolderAccess() {
    this->initializeModel();
}

Computed_eEzsignfolderAccess::~Computed_eEzsignfolderAccess() {}

void Computed_eEzsignfolderAccess::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eComputed_eEzsignfolderAccess::INVALID_VALUE_OPENAPI_GENERATED;
}

void Computed_eEzsignfolderAccess::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Signer", Qt::CaseInsensitive) == 0) {
        m_value = eComputed_eEzsignfolderAccess::SIGNER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Read", Qt::CaseInsensitive) == 0) {
        m_value = eComputed_eEzsignfolderAccess::READ;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Modify", Qt::CaseInsensitive) == 0) {
        m_value = eComputed_eEzsignfolderAccess::MODIFY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Full", Qt::CaseInsensitive) == 0) {
        m_value = eComputed_eEzsignfolderAccess::FULL;
        m_value_isSet = m_value_isValid = true;
    }
}

void Computed_eEzsignfolderAccess::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString Computed_eEzsignfolderAccess::asJson() const {
    
    QString val;
    switch (m_value){
        case eComputed_eEzsignfolderAccess::SIGNER:
            val = "Signer";
            break;
        case eComputed_eEzsignfolderAccess::READ:
            val = "Read";
            break;
        case eComputed_eEzsignfolderAccess::MODIFY:
            val = "Modify";
            break;
        case eComputed_eEzsignfolderAccess::FULL:
            val = "Full";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue Computed_eEzsignfolderAccess::asJsonValue() const {
    
    return QJsonValue(asJson());
}


Computed_eEzsignfolderAccess::eComputed_eEzsignfolderAccess Computed_eEzsignfolderAccess::getValue() const {
    return m_value;
}

void Computed_eEzsignfolderAccess::setValue(const Computed_eEzsignfolderAccess::eComputed_eEzsignfolderAccess& value){
    m_value = value;
    m_value_isSet = true;
}
bool Computed_eEzsignfolderAccess::isSet() const {
    
    return m_value_isSet;
}

bool Computed_eEzsignfolderAccess::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace Ezmaxapi
