/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Discussion_ResponseCompound.h
 *
 * A Discussion Object
 */

#ifndef Discussion_ResponseCompound_H
#define Discussion_ResponseCompound_H

#include <QJsonObject>

#include "Custom_Discussionconfiguration_Response.h"
#include "Discussionmembership_ResponseCompound.h"
#include "Discussionmessage_ResponseCompound.h"
#include <QList>
#include <QString>

#include "Enum.h"
#include "Object.h"

namespace Ezmaxapi {
class Custom_Discussionconfiguration_Response;
class Discussionmembership_ResponseCompound;
class Discussionmessage_ResponseCompound;

class Discussion_ResponseCompound : public Object {
public:
    Discussion_ResponseCompound();
    Discussion_ResponseCompound(QString json);
    ~Discussion_ResponseCompound() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getPkiDiscussionId() const;
    void setPkiDiscussionId(const qint32 &pki_discussion_id);
    bool is_pki_discussion_id_Set() const;
    bool is_pki_discussion_id_Valid() const;

    QString getSDiscussionDescription() const;
    void setSDiscussionDescription(const QString &s_discussion_description);
    bool is_s_discussion_description_Set() const;
    bool is_s_discussion_description_Valid() const;

    bool isBDiscussionClosed() const;
    void setBDiscussionClosed(const bool &b_discussion_closed);
    bool is_b_discussion_closed_Set() const;
    bool is_b_discussion_closed_Valid() const;

    QString getDtDiscussionLastread() const;
    void setDtDiscussionLastread(const QString &dt_discussion_lastread);
    bool is_dt_discussion_lastread_Set() const;
    bool is_dt_discussion_lastread_Valid() const;

    qint32 getIDiscussionmessageCount() const;
    void setIDiscussionmessageCount(const qint32 &i_discussionmessage_count);
    bool is_i_discussionmessage_count_Set() const;
    bool is_i_discussionmessage_count_Valid() const;

    qint32 getIDiscussionmessageCountunread() const;
    void setIDiscussionmessageCountunread(const qint32 &i_discussionmessage_countunread);
    bool is_i_discussionmessage_countunread_Set() const;
    bool is_i_discussionmessage_countunread_Valid() const;

    Custom_Discussionconfiguration_Response getObjDiscussionconfiguration() const;
    void setObjDiscussionconfiguration(const Custom_Discussionconfiguration_Response &obj_discussionconfiguration);
    bool is_obj_discussionconfiguration_Set() const;
    bool is_obj_discussionconfiguration_Valid() const;

    QList<Discussionmembership_ResponseCompound> getAObjDiscussionmembership() const;
    void setAObjDiscussionmembership(const QList<Discussionmembership_ResponseCompound> &a_obj_discussionmembership);
    bool is_a_obj_discussionmembership_Set() const;
    bool is_a_obj_discussionmembership_Valid() const;

    QList<Discussionmessage_ResponseCompound> getAObjDiscussionmessage() const;
    void setAObjDiscussionmessage(const QList<Discussionmessage_ResponseCompound> &a_obj_discussionmessage);
    bool is_a_obj_discussionmessage_Set() const;
    bool is_a_obj_discussionmessage_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_pki_discussion_id;
    bool m_pki_discussion_id_isSet;
    bool m_pki_discussion_id_isValid;

    QString m_s_discussion_description;
    bool m_s_discussion_description_isSet;
    bool m_s_discussion_description_isValid;

    bool m_b_discussion_closed;
    bool m_b_discussion_closed_isSet;
    bool m_b_discussion_closed_isValid;

    QString m_dt_discussion_lastread;
    bool m_dt_discussion_lastread_isSet;
    bool m_dt_discussion_lastread_isValid;

    qint32 m_i_discussionmessage_count;
    bool m_i_discussionmessage_count_isSet;
    bool m_i_discussionmessage_count_isValid;

    qint32 m_i_discussionmessage_countunread;
    bool m_i_discussionmessage_countunread_isSet;
    bool m_i_discussionmessage_countunread_isValid;

    Custom_Discussionconfiguration_Response m_obj_discussionconfiguration;
    bool m_obj_discussionconfiguration_isSet;
    bool m_obj_discussionconfiguration_isValid;

    QList<Discussionmembership_ResponseCompound> m_a_obj_discussionmembership;
    bool m_a_obj_discussionmembership_isSet;
    bool m_a_obj_discussionmembership_isValid;

    QList<Discussionmessage_ResponseCompound> m_a_obj_discussionmessage;
    bool m_a_obj_discussionmessage_isSet;
    bool m_a_obj_discussionmessage_isValid;
};

} // namespace Ezmaxapi

Q_DECLARE_METATYPE(Ezmaxapi::Discussion_ResponseCompound)

#endif // Discussion_ResponseCompound_H
