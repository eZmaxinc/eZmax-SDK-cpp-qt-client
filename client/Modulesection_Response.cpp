/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "Modulesection_Response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "Helpers.h"

namespace Ezmaxapi {

Modulesection_Response::Modulesection_Response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

Modulesection_Response::Modulesection_Response() {
    this->initializeModel();
}

Modulesection_Response::~Modulesection_Response() {}

void Modulesection_Response::initializeModel() {

    m_pki_modulesection_id_isSet = false;
    m_pki_modulesection_id_isValid = false;

    m_fki_module_id_isSet = false;
    m_fki_module_id_isValid = false;

    m_s_modulesection_internalname_isSet = false;
    m_s_modulesection_internalname_isValid = false;

    m_s_modulesection_name_x_isSet = false;
    m_s_modulesection_name_x_isValid = false;
}

void Modulesection_Response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void Modulesection_Response::fromJsonObject(QJsonObject json) {

    m_pki_modulesection_id_isValid = ::Ezmaxapi::fromJsonValue(m_pki_modulesection_id, json[QString("pkiModulesectionID")]);
    m_pki_modulesection_id_isSet = !json[QString("pkiModulesectionID")].isNull() && m_pki_modulesection_id_isValid;

    m_fki_module_id_isValid = ::Ezmaxapi::fromJsonValue(m_fki_module_id, json[QString("fkiModuleID")]);
    m_fki_module_id_isSet = !json[QString("fkiModuleID")].isNull() && m_fki_module_id_isValid;

    m_s_modulesection_internalname_isValid = ::Ezmaxapi::fromJsonValue(m_s_modulesection_internalname, json[QString("sModulesectionInternalname")]);
    m_s_modulesection_internalname_isSet = !json[QString("sModulesectionInternalname")].isNull() && m_s_modulesection_internalname_isValid;

    m_s_modulesection_name_x_isValid = ::Ezmaxapi::fromJsonValue(m_s_modulesection_name_x, json[QString("sModulesectionNameX")]);
    m_s_modulesection_name_x_isSet = !json[QString("sModulesectionNameX")].isNull() && m_s_modulesection_name_x_isValid;
}

QString Modulesection_Response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject Modulesection_Response::asJsonObject() const {
    QJsonObject obj;
    if (m_pki_modulesection_id_isSet) {
        obj.insert(QString("pkiModulesectionID"), ::Ezmaxapi::toJsonValue(m_pki_modulesection_id));
    }
    if (m_fki_module_id_isSet) {
        obj.insert(QString("fkiModuleID"), ::Ezmaxapi::toJsonValue(m_fki_module_id));
    }
    if (m_s_modulesection_internalname_isSet) {
        obj.insert(QString("sModulesectionInternalname"), ::Ezmaxapi::toJsonValue(m_s_modulesection_internalname));
    }
    if (m_s_modulesection_name_x_isSet) {
        obj.insert(QString("sModulesectionNameX"), ::Ezmaxapi::toJsonValue(m_s_modulesection_name_x));
    }
    return obj;
}

qint32 Modulesection_Response::getPkiModulesectionId() const {
    return m_pki_modulesection_id;
}
void Modulesection_Response::setPkiModulesectionId(const qint32 &pki_modulesection_id) {
    m_pki_modulesection_id = pki_modulesection_id;
    m_pki_modulesection_id_isSet = true;
}

bool Modulesection_Response::is_pki_modulesection_id_Set() const{
    return m_pki_modulesection_id_isSet;
}

bool Modulesection_Response::is_pki_modulesection_id_Valid() const{
    return m_pki_modulesection_id_isValid;
}

qint32 Modulesection_Response::getFkiModuleId() const {
    return m_fki_module_id;
}
void Modulesection_Response::setFkiModuleId(const qint32 &fki_module_id) {
    m_fki_module_id = fki_module_id;
    m_fki_module_id_isSet = true;
}

bool Modulesection_Response::is_fki_module_id_Set() const{
    return m_fki_module_id_isSet;
}

bool Modulesection_Response::is_fki_module_id_Valid() const{
    return m_fki_module_id_isValid;
}

QString Modulesection_Response::getSModulesectionInternalname() const {
    return m_s_modulesection_internalname;
}
void Modulesection_Response::setSModulesectionInternalname(const QString &s_modulesection_internalname) {
    m_s_modulesection_internalname = s_modulesection_internalname;
    m_s_modulesection_internalname_isSet = true;
}

bool Modulesection_Response::is_s_modulesection_internalname_Set() const{
    return m_s_modulesection_internalname_isSet;
}

bool Modulesection_Response::is_s_modulesection_internalname_Valid() const{
    return m_s_modulesection_internalname_isValid;
}

QString Modulesection_Response::getSModulesectionNameX() const {
    return m_s_modulesection_name_x;
}
void Modulesection_Response::setSModulesectionNameX(const QString &s_modulesection_name_x) {
    m_s_modulesection_name_x = s_modulesection_name_x;
    m_s_modulesection_name_x_isSet = true;
}

bool Modulesection_Response::is_s_modulesection_name_x_Set() const{
    return m_s_modulesection_name_x_isSet;
}

bool Modulesection_Response::is_s_modulesection_name_x_Valid() const{
    return m_s_modulesection_name_x_isValid;
}

bool Modulesection_Response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_pki_modulesection_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fki_module_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s_modulesection_internalname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s_modulesection_name_x_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool Modulesection_Response::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_pki_modulesection_id_isValid && m_fki_module_id_isValid && m_s_modulesection_internalname_isValid && m_s_modulesection_name_x_isValid && true;
}

} // namespace Ezmaxapi
