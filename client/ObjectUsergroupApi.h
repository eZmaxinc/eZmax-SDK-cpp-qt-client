/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef _ObjectUsergroupApi_H
#define _ObjectUsergroupApi_H

#include "Helpers.h"
#include "HttpRequest.h"
#include "ServerConfiguration.h"
#include "Oauth.h"

#include "Common_Response_Error.h"
#include "Header_Accept_Language.h"
#include "HttpFileElement.h"
#include "Usergroup_createObject_v1_Request.h"
#include "Usergroup_createObject_v1_Response.h"
#include "Usergroup_editObject_v1_Request.h"
#include "Usergroup_editObject_v1_Response.h"
#include "Usergroup_editPermissions_v1_Request.h"
#include "Usergroup_editPermissions_v1_Response.h"
#include "Usergroup_editUsergroupdelegations_v1_Request.h"
#include "Usergroup_editUsergroupdelegations_v1_Response.h"
#include "Usergroup_editUsergroupmemberships_v1_Request.h"
#include "Usergroup_editUsergroupmemberships_v1_Response.h"
#include "Usergroup_getAutocomplete_v2_Response.h"
#include "Usergroup_getList_v1_Response.h"
#include "Usergroup_getObject_v2_Response.h"
#include "Usergroup_getPermissions_v1_Response.h"
#include "Usergroup_getUsergroupdelegations_v1_Response.h"
#include "Usergroup_getUsergroupmemberships_v1_Response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace Ezmaxapi {

class ObjectUsergroupApi : public QObject {
    Q_OBJECT

public:
    ObjectUsergroupApi(const int timeOut = 0);
    ~ObjectUsergroupApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, ServerVariable> &variables = QMap<QString, ServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, ServerVariable> &variables =  QMap<QString, ServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, ServerVariable> &variables =  QMap<QString, ServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  usergroup_create_object_v1_request Usergroup_createObject_v1_Request [required]
    */
    void usergroupCreateObjectV1(const Usergroup_createObject_v1_Request &usergroup_create_object_v1_request);

    /**
    * @param[in]  pki_usergroup_id qint32 [required]
    * @param[in]  usergroup_edit_object_v1_request Usergroup_editObject_v1_Request [required]
    */
    void usergroupEditObjectV1(const qint32 &pki_usergroup_id, const Usergroup_editObject_v1_Request &usergroup_edit_object_v1_request);

    /**
    * @param[in]  pki_usergroup_id qint32 [required]
    * @param[in]  usergroup_edit_permissions_v1_request Usergroup_editPermissions_v1_Request [required]
    */
    void usergroupEditPermissionsV1(const qint32 &pki_usergroup_id, const Usergroup_editPermissions_v1_Request &usergroup_edit_permissions_v1_request);

    /**
    * @param[in]  pki_usergroup_id qint32 [required]
    * @param[in]  usergroup_edit_usergroupdelegations_v1_request Usergroup_editUsergroupdelegations_v1_Request [required]
    */
    void usergroupEditUsergroupdelegationsV1(const qint32 &pki_usergroup_id, const Usergroup_editUsergroupdelegations_v1_Request &usergroup_edit_usergroupdelegations_v1_request);

    /**
    * @param[in]  pki_usergroup_id qint32 [required]
    * @param[in]  usergroup_edit_usergroupmemberships_v1_request Usergroup_editUsergroupmemberships_v1_Request [required]
    */
    void usergroupEditUsergroupmembershipsV1(const qint32 &pki_usergroup_id, const Usergroup_editUsergroupmemberships_v1_Request &usergroup_edit_usergroupmemberships_v1_request);

    /**
    * @param[in]  s_selector QString [required]
    * @param[in]  e_filter_active QString [optional]
    * @param[in]  s_query QString [optional]
    * @param[in]  accept_language Header_Accept_Language [optional]
    */
    void usergroupGetAutocompleteV2(const QString &s_selector, const ::Ezmaxapi::OptionalParam<QString> &e_filter_active = ::Ezmaxapi::OptionalParam<QString>(), const ::Ezmaxapi::OptionalParam<QString> &s_query = ::Ezmaxapi::OptionalParam<QString>(), const ::Ezmaxapi::OptionalParam<Header_Accept_Language> &accept_language = ::Ezmaxapi::OptionalParam<Header_Accept_Language>());

    /**
    * @param[in]  e_order_by QString [optional]
    * @param[in]  i_row_max qint32 [optional]
    * @param[in]  i_row_offset qint32 [optional]
    * @param[in]  accept_language Header_Accept_Language [optional]
    * @param[in]  s_filter QString [optional]
    */
    void usergroupGetListV1(const ::Ezmaxapi::OptionalParam<QString> &e_order_by = ::Ezmaxapi::OptionalParam<QString>(), const ::Ezmaxapi::OptionalParam<qint32> &i_row_max = ::Ezmaxapi::OptionalParam<qint32>(), const ::Ezmaxapi::OptionalParam<qint32> &i_row_offset = ::Ezmaxapi::OptionalParam<qint32>(), const ::Ezmaxapi::OptionalParam<Header_Accept_Language> &accept_language = ::Ezmaxapi::OptionalParam<Header_Accept_Language>(), const ::Ezmaxapi::OptionalParam<QString> &s_filter = ::Ezmaxapi::OptionalParam<QString>());

    /**
    * @param[in]  pki_usergroup_id qint32 [required]
    */
    void usergroupGetObjectV2(const qint32 &pki_usergroup_id);

    /**
    * @param[in]  pki_usergroup_id qint32 [required]
    */
    void usergroupGetPermissionsV1(const qint32 &pki_usergroup_id);

    /**
    * @param[in]  pki_usergroup_id qint32 [required]
    */
    void usergroupGetUsergroupdelegationsV1(const qint32 &pki_usergroup_id);

    /**
    * @param[in]  pki_usergroup_id qint32 [required]
    */
    void usergroupGetUsergroupmembershipsV1(const qint32 &pki_usergroup_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<ServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    HttpRequestInput _latestInput;
    HttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void usergroupCreateObjectV1Callback(HttpRequestWorker *worker);
    void usergroupEditObjectV1Callback(HttpRequestWorker *worker);
    void usergroupEditPermissionsV1Callback(HttpRequestWorker *worker);
    void usergroupEditUsergroupdelegationsV1Callback(HttpRequestWorker *worker);
    void usergroupEditUsergroupmembershipsV1Callback(HttpRequestWorker *worker);
    void usergroupGetAutocompleteV2Callback(HttpRequestWorker *worker);
    void usergroupGetListV1Callback(HttpRequestWorker *worker);
    void usergroupGetObjectV2Callback(HttpRequestWorker *worker);
    void usergroupGetPermissionsV1Callback(HttpRequestWorker *worker);
    void usergroupGetUsergroupdelegationsV1Callback(HttpRequestWorker *worker);
    void usergroupGetUsergroupmembershipsV1Callback(HttpRequestWorker *worker);

signals:

    void usergroupCreateObjectV1Signal(Usergroup_createObject_v1_Response summary);
    void usergroupEditObjectV1Signal(Usergroup_editObject_v1_Response summary);
    void usergroupEditPermissionsV1Signal(Usergroup_editPermissions_v1_Response summary);
    void usergroupEditUsergroupdelegationsV1Signal(Usergroup_editUsergroupdelegations_v1_Response summary);
    void usergroupEditUsergroupmembershipsV1Signal(Usergroup_editUsergroupmemberships_v1_Response summary);
    void usergroupGetAutocompleteV2Signal(Usergroup_getAutocomplete_v2_Response summary);
    void usergroupGetListV1Signal(Usergroup_getList_v1_Response summary);
    void usergroupGetObjectV2Signal(Usergroup_getObject_v2_Response summary);
    void usergroupGetPermissionsV1Signal(Usergroup_getPermissions_v1_Response summary);
    void usergroupGetUsergroupdelegationsV1Signal(Usergroup_getUsergroupdelegations_v1_Response summary);
    void usergroupGetUsergroupmembershipsV1Signal(Usergroup_getUsergroupmemberships_v1_Response summary);

    void usergroupCreateObjectV1SignalFull(HttpRequestWorker *worker, Usergroup_createObject_v1_Response summary);
    void usergroupEditObjectV1SignalFull(HttpRequestWorker *worker, Usergroup_editObject_v1_Response summary);
    void usergroupEditPermissionsV1SignalFull(HttpRequestWorker *worker, Usergroup_editPermissions_v1_Response summary);
    void usergroupEditUsergroupdelegationsV1SignalFull(HttpRequestWorker *worker, Usergroup_editUsergroupdelegations_v1_Response summary);
    void usergroupEditUsergroupmembershipsV1SignalFull(HttpRequestWorker *worker, Usergroup_editUsergroupmemberships_v1_Response summary);
    void usergroupGetAutocompleteV2SignalFull(HttpRequestWorker *worker, Usergroup_getAutocomplete_v2_Response summary);
    void usergroupGetListV1SignalFull(HttpRequestWorker *worker, Usergroup_getList_v1_Response summary);
    void usergroupGetObjectV2SignalFull(HttpRequestWorker *worker, Usergroup_getObject_v2_Response summary);
    void usergroupGetPermissionsV1SignalFull(HttpRequestWorker *worker, Usergroup_getPermissions_v1_Response summary);
    void usergroupGetUsergroupdelegationsV1SignalFull(HttpRequestWorker *worker, Usergroup_getUsergroupdelegations_v1_Response summary);
    void usergroupGetUsergroupmembershipsV1SignalFull(HttpRequestWorker *worker, Usergroup_getUsergroupmemberships_v1_Response summary);

    Q_DECL_DEPRECATED_X("Use usergroupCreateObjectV1SignalError() instead")
    void usergroupCreateObjectV1SignalE(Usergroup_createObject_v1_Response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usergroupCreateObjectV1SignalError(Usergroup_createObject_v1_Response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usergroupEditObjectV1SignalError() instead")
    void usergroupEditObjectV1SignalE(Usergroup_editObject_v1_Response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usergroupEditObjectV1SignalError(Usergroup_editObject_v1_Response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usergroupEditPermissionsV1SignalError() instead")
    void usergroupEditPermissionsV1SignalE(Usergroup_editPermissions_v1_Response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usergroupEditPermissionsV1SignalError(Usergroup_editPermissions_v1_Response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usergroupEditUsergroupdelegationsV1SignalError() instead")
    void usergroupEditUsergroupdelegationsV1SignalE(Usergroup_editUsergroupdelegations_v1_Response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usergroupEditUsergroupdelegationsV1SignalError(Usergroup_editUsergroupdelegations_v1_Response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usergroupEditUsergroupmembershipsV1SignalError() instead")
    void usergroupEditUsergroupmembershipsV1SignalE(Usergroup_editUsergroupmemberships_v1_Response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usergroupEditUsergroupmembershipsV1SignalError(Usergroup_editUsergroupmemberships_v1_Response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usergroupGetAutocompleteV2SignalError() instead")
    void usergroupGetAutocompleteV2SignalE(Usergroup_getAutocomplete_v2_Response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usergroupGetAutocompleteV2SignalError(Usergroup_getAutocomplete_v2_Response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usergroupGetListV1SignalError() instead")
    void usergroupGetListV1SignalE(Usergroup_getList_v1_Response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usergroupGetListV1SignalError(Usergroup_getList_v1_Response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usergroupGetObjectV2SignalError() instead")
    void usergroupGetObjectV2SignalE(Usergroup_getObject_v2_Response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usergroupGetObjectV2SignalError(Usergroup_getObject_v2_Response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usergroupGetPermissionsV1SignalError() instead")
    void usergroupGetPermissionsV1SignalE(Usergroup_getPermissions_v1_Response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usergroupGetPermissionsV1SignalError(Usergroup_getPermissions_v1_Response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usergroupGetUsergroupdelegationsV1SignalError() instead")
    void usergroupGetUsergroupdelegationsV1SignalE(Usergroup_getUsergroupdelegations_v1_Response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usergroupGetUsergroupdelegationsV1SignalError(Usergroup_getUsergroupdelegations_v1_Response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usergroupGetUsergroupmembershipsV1SignalError() instead")
    void usergroupGetUsergroupmembershipsV1SignalE(Usergroup_getUsergroupmemberships_v1_Response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usergroupGetUsergroupmembershipsV1SignalError(Usergroup_getUsergroupmemberships_v1_Response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use usergroupCreateObjectV1SignalErrorFull() instead")
    void usergroupCreateObjectV1SignalEFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usergroupCreateObjectV1SignalErrorFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usergroupEditObjectV1SignalErrorFull() instead")
    void usergroupEditObjectV1SignalEFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usergroupEditObjectV1SignalErrorFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usergroupEditPermissionsV1SignalErrorFull() instead")
    void usergroupEditPermissionsV1SignalEFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usergroupEditPermissionsV1SignalErrorFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usergroupEditUsergroupdelegationsV1SignalErrorFull() instead")
    void usergroupEditUsergroupdelegationsV1SignalEFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usergroupEditUsergroupdelegationsV1SignalErrorFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usergroupEditUsergroupmembershipsV1SignalErrorFull() instead")
    void usergroupEditUsergroupmembershipsV1SignalEFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usergroupEditUsergroupmembershipsV1SignalErrorFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usergroupGetAutocompleteV2SignalErrorFull() instead")
    void usergroupGetAutocompleteV2SignalEFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usergroupGetAutocompleteV2SignalErrorFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usergroupGetListV1SignalErrorFull() instead")
    void usergroupGetListV1SignalEFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usergroupGetListV1SignalErrorFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usergroupGetObjectV2SignalErrorFull() instead")
    void usergroupGetObjectV2SignalEFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usergroupGetObjectV2SignalErrorFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usergroupGetPermissionsV1SignalErrorFull() instead")
    void usergroupGetPermissionsV1SignalEFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usergroupGetPermissionsV1SignalErrorFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usergroupGetUsergroupdelegationsV1SignalErrorFull() instead")
    void usergroupGetUsergroupdelegationsV1SignalEFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usergroupGetUsergroupdelegationsV1SignalErrorFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usergroupGetUsergroupmembershipsV1SignalErrorFull() instead")
    void usergroupGetUsergroupmembershipsV1SignalEFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usergroupGetUsergroupmembershipsV1SignalErrorFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public slots:
    void tokenAvailable();
};

} // namespace Ezmaxapi
#endif
