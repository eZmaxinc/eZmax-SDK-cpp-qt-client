/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "Websocket_Response_Information_V1.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "Helpers.h"

namespace Ezmaxapi {

Websocket_Response_Information_V1::Websocket_Response_Information_V1(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

Websocket_Response_Information_V1::Websocket_Response_Information_V1() {
    this->initializeModel();
}

Websocket_Response_Information_V1::~Websocket_Response_Information_V1() {}

void Websocket_Response_Information_V1::initializeModel() {

    m_e_websocket_messagetype_isSet = false;
    m_e_websocket_messagetype_isValid = false;

    m_s_websocket_channel_isSet = false;
    m_s_websocket_channel_isValid = false;

    m_m_payload_isSet = false;
    m_m_payload_isValid = false;
}

void Websocket_Response_Information_V1::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void Websocket_Response_Information_V1::fromJsonObject(QJsonObject json) {

    m_e_websocket_messagetype_isValid = ::Ezmaxapi::fromJsonValue(m_e_websocket_messagetype, json[QString("eWebsocketMessagetype")]);
    m_e_websocket_messagetype_isSet = !json[QString("eWebsocketMessagetype")].isNull() && m_e_websocket_messagetype_isValid;

    m_s_websocket_channel_isValid = ::Ezmaxapi::fromJsonValue(m_s_websocket_channel, json[QString("sWebsocketChannel")]);
    m_s_websocket_channel_isSet = !json[QString("sWebsocketChannel")].isNull() && m_s_websocket_channel_isValid;

    m_m_payload_isValid = ::Ezmaxapi::fromJsonValue(m_m_payload, json[QString("mPayload")]);
    m_m_payload_isSet = !json[QString("mPayload")].isNull() && m_m_payload_isValid;
}

QString Websocket_Response_Information_V1::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject Websocket_Response_Information_V1::asJsonObject() const {
    QJsonObject obj;
    if (m_e_websocket_messagetype_isSet) {
        obj.insert(QString("eWebsocketMessagetype"), ::Ezmaxapi::toJsonValue(m_e_websocket_messagetype));
    }
    if (m_s_websocket_channel_isSet) {
        obj.insert(QString("sWebsocketChannel"), ::Ezmaxapi::toJsonValue(m_s_websocket_channel));
    }
    if (m_m_payload.isSet()) {
        obj.insert(QString("mPayload"), ::Ezmaxapi::toJsonValue(m_m_payload));
    }
    return obj;
}

QString Websocket_Response_Information_V1::getEWebsocketMessagetype() const {
    return m_e_websocket_messagetype;
}
void Websocket_Response_Information_V1::setEWebsocketMessagetype(const QString &e_websocket_messagetype) {
    m_e_websocket_messagetype = e_websocket_messagetype;
    m_e_websocket_messagetype_isSet = true;
}

bool Websocket_Response_Information_V1::is_e_websocket_messagetype_Set() const{
    return m_e_websocket_messagetype_isSet;
}

bool Websocket_Response_Information_V1::is_e_websocket_messagetype_Valid() const{
    return m_e_websocket_messagetype_isValid;
}

QString Websocket_Response_Information_V1::getSWebsocketChannel() const {
    return m_s_websocket_channel;
}
void Websocket_Response_Information_V1::setSWebsocketChannel(const QString &s_websocket_channel) {
    m_s_websocket_channel = s_websocket_channel;
    m_s_websocket_channel_isSet = true;
}

bool Websocket_Response_Information_V1::is_s_websocket_channel_Set() const{
    return m_s_websocket_channel_isSet;
}

bool Websocket_Response_Information_V1::is_s_websocket_channel_Valid() const{
    return m_s_websocket_channel_isValid;
}

Websocket_Response_Information_V1_mPayload Websocket_Response_Information_V1::getMPayload() const {
    return m_m_payload;
}
void Websocket_Response_Information_V1::setMPayload(const Websocket_Response_Information_V1_mPayload &m_payload) {
    m_m_payload = m_payload;
    m_m_payload_isSet = true;
}

bool Websocket_Response_Information_V1::is_m_payload_Set() const{
    return m_m_payload_isSet;
}

bool Websocket_Response_Information_V1::is_m_payload_Valid() const{
    return m_m_payload_isValid;
}

bool Websocket_Response_Information_V1::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_e_websocket_messagetype_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s_websocket_channel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_m_payload.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool Websocket_Response_Information_V1::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_e_websocket_messagetype_isValid && m_s_websocket_channel_isValid && m_m_payload_isValid && true;
}

} // namespace Ezmaxapi
