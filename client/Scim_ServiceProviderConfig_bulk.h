/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Scim_ServiceProviderConfig_bulk.h
 *
 * A complex type that specifies bulk configuration options.
 */

#ifndef Scim_ServiceProviderConfig_bulk_H
#define Scim_ServiceProviderConfig_bulk_H

#include <QJsonObject>


#include "Enum.h"
#include "Object.h"

namespace Ezmaxapi {

class Scim_ServiceProviderConfig_bulk : public Object {
public:
    Scim_ServiceProviderConfig_bulk();
    Scim_ServiceProviderConfig_bulk(QString json);
    ~Scim_ServiceProviderConfig_bulk() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isSupported() const;
    void setSupported(const bool &supported);
    bool is_supported_Set() const;
    bool is_supported_Valid() const;

    qint32 getMaxOperations() const;
    void setMaxOperations(const qint32 &max_operations);
    bool is_max_operations_Set() const;
    bool is_max_operations_Valid() const;

    qint32 getMaxPayloadSize() const;
    void setMaxPayloadSize(const qint32 &max_payload_size);
    bool is_max_payload_size_Set() const;
    bool is_max_payload_size_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_supported;
    bool m_supported_isSet;
    bool m_supported_isValid;

    qint32 m_max_operations;
    bool m_max_operations_isSet;
    bool m_max_operations_isValid;

    qint32 m_max_payload_size;
    bool m_max_payload_size_isSet;
    bool m_max_payload_size_isValid;
};

} // namespace Ezmaxapi

Q_DECLARE_METATYPE(Ezmaxapi::Scim_ServiceProviderConfig_bulk)

#endif // Scim_ServiceProviderConfig_bulk_H
