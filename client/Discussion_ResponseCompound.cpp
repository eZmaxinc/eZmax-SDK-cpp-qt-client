/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "Discussion_ResponseCompound.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "Helpers.h"

namespace Ezmaxapi {

Discussion_ResponseCompound::Discussion_ResponseCompound(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

Discussion_ResponseCompound::Discussion_ResponseCompound() {
    this->initializeModel();
}

Discussion_ResponseCompound::~Discussion_ResponseCompound() {}

void Discussion_ResponseCompound::initializeModel() {

    m_pki_discussion_id_isSet = false;
    m_pki_discussion_id_isValid = false;

    m_s_discussion_description_isSet = false;
    m_s_discussion_description_isValid = false;

    m_b_discussion_closed_isSet = false;
    m_b_discussion_closed_isValid = false;

    m_dt_discussion_lastread_isSet = false;
    m_dt_discussion_lastread_isValid = false;

    m_i_discussionmessage_count_isSet = false;
    m_i_discussionmessage_count_isValid = false;

    m_i_discussionmessage_countunread_isSet = false;
    m_i_discussionmessage_countunread_isValid = false;

    m_obj_discussionconfiguration_isSet = false;
    m_obj_discussionconfiguration_isValid = false;

    m_a_obj_discussionmembership_isSet = false;
    m_a_obj_discussionmembership_isValid = false;

    m_a_obj_discussionmessage_isSet = false;
    m_a_obj_discussionmessage_isValid = false;
}

void Discussion_ResponseCompound::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void Discussion_ResponseCompound::fromJsonObject(QJsonObject json) {

    m_pki_discussion_id_isValid = ::Ezmaxapi::fromJsonValue(m_pki_discussion_id, json[QString("pkiDiscussionID")]);
    m_pki_discussion_id_isSet = !json[QString("pkiDiscussionID")].isNull() && m_pki_discussion_id_isValid;

    m_s_discussion_description_isValid = ::Ezmaxapi::fromJsonValue(m_s_discussion_description, json[QString("sDiscussionDescription")]);
    m_s_discussion_description_isSet = !json[QString("sDiscussionDescription")].isNull() && m_s_discussion_description_isValid;

    m_b_discussion_closed_isValid = ::Ezmaxapi::fromJsonValue(m_b_discussion_closed, json[QString("bDiscussionClosed")]);
    m_b_discussion_closed_isSet = !json[QString("bDiscussionClosed")].isNull() && m_b_discussion_closed_isValid;

    m_dt_discussion_lastread_isValid = ::Ezmaxapi::fromJsonValue(m_dt_discussion_lastread, json[QString("dtDiscussionLastread")]);
    m_dt_discussion_lastread_isSet = !json[QString("dtDiscussionLastread")].isNull() && m_dt_discussion_lastread_isValid;

    m_i_discussionmessage_count_isValid = ::Ezmaxapi::fromJsonValue(m_i_discussionmessage_count, json[QString("iDiscussionmessageCount")]);
    m_i_discussionmessage_count_isSet = !json[QString("iDiscussionmessageCount")].isNull() && m_i_discussionmessage_count_isValid;

    m_i_discussionmessage_countunread_isValid = ::Ezmaxapi::fromJsonValue(m_i_discussionmessage_countunread, json[QString("iDiscussionmessageCountunread")]);
    m_i_discussionmessage_countunread_isSet = !json[QString("iDiscussionmessageCountunread")].isNull() && m_i_discussionmessage_countunread_isValid;

    m_obj_discussionconfiguration_isValid = ::Ezmaxapi::fromJsonValue(m_obj_discussionconfiguration, json[QString("objDiscussionconfiguration")]);
    m_obj_discussionconfiguration_isSet = !json[QString("objDiscussionconfiguration")].isNull() && m_obj_discussionconfiguration_isValid;

    m_a_obj_discussionmembership_isValid = ::Ezmaxapi::fromJsonValue(m_a_obj_discussionmembership, json[QString("a_objDiscussionmembership")]);
    m_a_obj_discussionmembership_isSet = !json[QString("a_objDiscussionmembership")].isNull() && m_a_obj_discussionmembership_isValid;

    m_a_obj_discussionmessage_isValid = ::Ezmaxapi::fromJsonValue(m_a_obj_discussionmessage, json[QString("a_objDiscussionmessage")]);
    m_a_obj_discussionmessage_isSet = !json[QString("a_objDiscussionmessage")].isNull() && m_a_obj_discussionmessage_isValid;
}

QString Discussion_ResponseCompound::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject Discussion_ResponseCompound::asJsonObject() const {
    QJsonObject obj;
    if (m_pki_discussion_id_isSet) {
        obj.insert(QString("pkiDiscussionID"), ::Ezmaxapi::toJsonValue(m_pki_discussion_id));
    }
    if (m_s_discussion_description_isSet) {
        obj.insert(QString("sDiscussionDescription"), ::Ezmaxapi::toJsonValue(m_s_discussion_description));
    }
    if (m_b_discussion_closed_isSet) {
        obj.insert(QString("bDiscussionClosed"), ::Ezmaxapi::toJsonValue(m_b_discussion_closed));
    }
    if (m_dt_discussion_lastread_isSet) {
        obj.insert(QString("dtDiscussionLastread"), ::Ezmaxapi::toJsonValue(m_dt_discussion_lastread));
    }
    if (m_i_discussionmessage_count_isSet) {
        obj.insert(QString("iDiscussionmessageCount"), ::Ezmaxapi::toJsonValue(m_i_discussionmessage_count));
    }
    if (m_i_discussionmessage_countunread_isSet) {
        obj.insert(QString("iDiscussionmessageCountunread"), ::Ezmaxapi::toJsonValue(m_i_discussionmessage_countunread));
    }
    if (m_obj_discussionconfiguration.isSet()) {
        obj.insert(QString("objDiscussionconfiguration"), ::Ezmaxapi::toJsonValue(m_obj_discussionconfiguration));
    }
    if (m_a_obj_discussionmembership.size() > 0) {
        obj.insert(QString("a_objDiscussionmembership"), ::Ezmaxapi::toJsonValue(m_a_obj_discussionmembership));
    }
    if (m_a_obj_discussionmessage.size() > 0) {
        obj.insert(QString("a_objDiscussionmessage"), ::Ezmaxapi::toJsonValue(m_a_obj_discussionmessage));
    }
    return obj;
}

qint32 Discussion_ResponseCompound::getPkiDiscussionId() const {
    return m_pki_discussion_id;
}
void Discussion_ResponseCompound::setPkiDiscussionId(const qint32 &pki_discussion_id) {
    m_pki_discussion_id = pki_discussion_id;
    m_pki_discussion_id_isSet = true;
}

bool Discussion_ResponseCompound::is_pki_discussion_id_Set() const{
    return m_pki_discussion_id_isSet;
}

bool Discussion_ResponseCompound::is_pki_discussion_id_Valid() const{
    return m_pki_discussion_id_isValid;
}

QString Discussion_ResponseCompound::getSDiscussionDescription() const {
    return m_s_discussion_description;
}
void Discussion_ResponseCompound::setSDiscussionDescription(const QString &s_discussion_description) {
    m_s_discussion_description = s_discussion_description;
    m_s_discussion_description_isSet = true;
}

bool Discussion_ResponseCompound::is_s_discussion_description_Set() const{
    return m_s_discussion_description_isSet;
}

bool Discussion_ResponseCompound::is_s_discussion_description_Valid() const{
    return m_s_discussion_description_isValid;
}

bool Discussion_ResponseCompound::isBDiscussionClosed() const {
    return m_b_discussion_closed;
}
void Discussion_ResponseCompound::setBDiscussionClosed(const bool &b_discussion_closed) {
    m_b_discussion_closed = b_discussion_closed;
    m_b_discussion_closed_isSet = true;
}

bool Discussion_ResponseCompound::is_b_discussion_closed_Set() const{
    return m_b_discussion_closed_isSet;
}

bool Discussion_ResponseCompound::is_b_discussion_closed_Valid() const{
    return m_b_discussion_closed_isValid;
}

QString Discussion_ResponseCompound::getDtDiscussionLastread() const {
    return m_dt_discussion_lastread;
}
void Discussion_ResponseCompound::setDtDiscussionLastread(const QString &dt_discussion_lastread) {
    m_dt_discussion_lastread = dt_discussion_lastread;
    m_dt_discussion_lastread_isSet = true;
}

bool Discussion_ResponseCompound::is_dt_discussion_lastread_Set() const{
    return m_dt_discussion_lastread_isSet;
}

bool Discussion_ResponseCompound::is_dt_discussion_lastread_Valid() const{
    return m_dt_discussion_lastread_isValid;
}

qint32 Discussion_ResponseCompound::getIDiscussionmessageCount() const {
    return m_i_discussionmessage_count;
}
void Discussion_ResponseCompound::setIDiscussionmessageCount(const qint32 &i_discussionmessage_count) {
    m_i_discussionmessage_count = i_discussionmessage_count;
    m_i_discussionmessage_count_isSet = true;
}

bool Discussion_ResponseCompound::is_i_discussionmessage_count_Set() const{
    return m_i_discussionmessage_count_isSet;
}

bool Discussion_ResponseCompound::is_i_discussionmessage_count_Valid() const{
    return m_i_discussionmessage_count_isValid;
}

qint32 Discussion_ResponseCompound::getIDiscussionmessageCountunread() const {
    return m_i_discussionmessage_countunread;
}
void Discussion_ResponseCompound::setIDiscussionmessageCountunread(const qint32 &i_discussionmessage_countunread) {
    m_i_discussionmessage_countunread = i_discussionmessage_countunread;
    m_i_discussionmessage_countunread_isSet = true;
}

bool Discussion_ResponseCompound::is_i_discussionmessage_countunread_Set() const{
    return m_i_discussionmessage_countunread_isSet;
}

bool Discussion_ResponseCompound::is_i_discussionmessage_countunread_Valid() const{
    return m_i_discussionmessage_countunread_isValid;
}

Custom_Discussionconfiguration_Response Discussion_ResponseCompound::getObjDiscussionconfiguration() const {
    return m_obj_discussionconfiguration;
}
void Discussion_ResponseCompound::setObjDiscussionconfiguration(const Custom_Discussionconfiguration_Response &obj_discussionconfiguration) {
    m_obj_discussionconfiguration = obj_discussionconfiguration;
    m_obj_discussionconfiguration_isSet = true;
}

bool Discussion_ResponseCompound::is_obj_discussionconfiguration_Set() const{
    return m_obj_discussionconfiguration_isSet;
}

bool Discussion_ResponseCompound::is_obj_discussionconfiguration_Valid() const{
    return m_obj_discussionconfiguration_isValid;
}

QList<Discussionmembership_ResponseCompound> Discussion_ResponseCompound::getAObjDiscussionmembership() const {
    return m_a_obj_discussionmembership;
}
void Discussion_ResponseCompound::setAObjDiscussionmembership(const QList<Discussionmembership_ResponseCompound> &a_obj_discussionmembership) {
    m_a_obj_discussionmembership = a_obj_discussionmembership;
    m_a_obj_discussionmembership_isSet = true;
}

bool Discussion_ResponseCompound::is_a_obj_discussionmembership_Set() const{
    return m_a_obj_discussionmembership_isSet;
}

bool Discussion_ResponseCompound::is_a_obj_discussionmembership_Valid() const{
    return m_a_obj_discussionmembership_isValid;
}

QList<Discussionmessage_ResponseCompound> Discussion_ResponseCompound::getAObjDiscussionmessage() const {
    return m_a_obj_discussionmessage;
}
void Discussion_ResponseCompound::setAObjDiscussionmessage(const QList<Discussionmessage_ResponseCompound> &a_obj_discussionmessage) {
    m_a_obj_discussionmessage = a_obj_discussionmessage;
    m_a_obj_discussionmessage_isSet = true;
}

bool Discussion_ResponseCompound::is_a_obj_discussionmessage_Set() const{
    return m_a_obj_discussionmessage_isSet;
}

bool Discussion_ResponseCompound::is_a_obj_discussionmessage_Valid() const{
    return m_a_obj_discussionmessage_isValid;
}

bool Discussion_ResponseCompound::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_pki_discussion_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s_discussion_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_b_discussion_closed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dt_discussion_lastread_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_i_discussionmessage_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_i_discussionmessage_countunread_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_obj_discussionconfiguration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_a_obj_discussionmembership.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_a_obj_discussionmessage.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool Discussion_ResponseCompound::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_pki_discussion_id_isValid && m_s_discussion_description_isValid && m_b_discussion_closed_isValid && m_i_discussionmessage_count_isValid && m_i_discussionmessage_countunread_isValid && m_a_obj_discussionmembership_isValid && m_a_obj_discussionmessage_isValid && true;
}

} // namespace Ezmaxapi
