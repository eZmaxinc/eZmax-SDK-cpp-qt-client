/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIScimGroupsApi_H
#define OAI_OAIScimGroupsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIScim_Group.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace Ezmaxapi {

class OAIScimGroupsApi : public QObject {
    Q_OBJECT

public:
    OAIScimGroupsApi(const int timeOut = 0);
    ~OAIScimGroupsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_scim_group OAIScim_Group [required]
    */
    void groupsCreateObjectScimV2(const OAIScim_Group &oai_scim_group);

    /**
    * @param[in]  group_id QString [required]
    */
    void groupsDeleteObjectScimV2(const QString &group_id);

    /**
    * @param[in]  group_id QString [required]
    * @param[in]  oai_scim_group OAIScim_Group [required]
    */
    void groupsEditObjectScimV2(const QString &group_id, const OAIScim_Group &oai_scim_group);

    /**
    * @param[in]  filter QString [optional]
    */
    void groupsGetListScimV2(const ::Ezmaxapi::OptionalParam<QString> &filter = ::Ezmaxapi::OptionalParam<QString>());

    /**
    * @param[in]  group_id QString [required]
    */
    void groupsGetObjectScimV2(const QString &group_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void groupsCreateObjectScimV2Callback(OAIHttpRequestWorker *worker);
    void groupsDeleteObjectScimV2Callback(OAIHttpRequestWorker *worker);
    void groupsEditObjectScimV2Callback(OAIHttpRequestWorker *worker);
    void groupsGetListScimV2Callback(OAIHttpRequestWorker *worker);
    void groupsGetObjectScimV2Callback(OAIHttpRequestWorker *worker);

signals:

    void groupsCreateObjectScimV2Signal(OAIScim_Group summary);
    void groupsDeleteObjectScimV2Signal();
    void groupsEditObjectScimV2Signal(OAIScim_Group summary);
    void groupsGetListScimV2Signal(OAIScim_Group summary);
    void groupsGetObjectScimV2Signal(OAIScim_Group summary);

    void groupsCreateObjectScimV2SignalFull(OAIHttpRequestWorker *worker, OAIScim_Group summary);
    void groupsDeleteObjectScimV2SignalFull(OAIHttpRequestWorker *worker);
    void groupsEditObjectScimV2SignalFull(OAIHttpRequestWorker *worker, OAIScim_Group summary);
    void groupsGetListScimV2SignalFull(OAIHttpRequestWorker *worker, OAIScim_Group summary);
    void groupsGetObjectScimV2SignalFull(OAIHttpRequestWorker *worker, OAIScim_Group summary);

    void groupsCreateObjectScimV2SignalE(OAIScim_Group summary, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsDeleteObjectScimV2SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void groupsEditObjectScimV2SignalE(OAIScim_Group summary, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsGetListScimV2SignalE(OAIScim_Group summary, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsGetObjectScimV2SignalE(OAIScim_Group summary, QNetworkReply::NetworkError error_type, QString error_str);

    void groupsCreateObjectScimV2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsDeleteObjectScimV2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsEditObjectScimV2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsGetListScimV2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsGetObjectScimV2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public slots:
    void tokenAvailable();
    
};

} // namespace Ezmaxapi
#endif
