/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "Notificationtest_getElements_v1_Response_mPayload.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "Helpers.h"

namespace Ezmaxapi {

Notificationtest_getElements_v1_Response_mPayload::Notificationtest_getElements_v1_Response_mPayload(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

Notificationtest_getElements_v1_Response_mPayload::Notificationtest_getElements_v1_Response_mPayload() {
    this->initializeModel();
}

Notificationtest_getElements_v1_Response_mPayload::~Notificationtest_getElements_v1_Response_mPayload() {}

void Notificationtest_getElements_v1_Response_mPayload::initializeModel() {

    m_pki_notificationtest_id_isSet = false;
    m_pki_notificationtest_id_isValid = false;

    m_s_notificationtest_function_isSet = false;
    m_s_notificationtest_function_isValid = false;

    m_a_s_variableobject_property_isSet = false;
    m_a_s_variableobject_property_isValid = false;

    m_a_obj_variableobject_isSet = false;
    m_a_obj_variableobject_isValid = false;
}

void Notificationtest_getElements_v1_Response_mPayload::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void Notificationtest_getElements_v1_Response_mPayload::fromJsonObject(QJsonObject json) {

    m_pki_notificationtest_id_isValid = ::Ezmaxapi::fromJsonValue(m_pki_notificationtest_id, json[QString("pkiNotificationtestID")]);
    m_pki_notificationtest_id_isSet = !json[QString("pkiNotificationtestID")].isNull() && m_pki_notificationtest_id_isValid;

    m_s_notificationtest_function_isValid = ::Ezmaxapi::fromJsonValue(m_s_notificationtest_function, json[QString("sNotificationtestFunction")]);
    m_s_notificationtest_function_isSet = !json[QString("sNotificationtestFunction")].isNull() && m_s_notificationtest_function_isValid;

    m_a_s_variableobject_property_isValid = ::Ezmaxapi::fromJsonValue(m_a_s_variableobject_property, json[QString("a_sVariableobjectProperty")]);
    m_a_s_variableobject_property_isSet = !json[QString("a_sVariableobjectProperty")].isNull() && m_a_s_variableobject_property_isValid;

    if(json["a_objVariableobject"].isArray()){
        auto arr = json["a_objVariableobject"].toArray();
        m_a_obj_variableobject_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QMap<QString, QJsonValue> item;
                m_a_obj_variableobject_isValid &= ::Ezmaxapi::fromJsonValue(item, jval);
                m_a_obj_variableobject_isSet = !jval.isNull() && m_a_obj_variableobject_isValid;
                m_a_obj_variableobject.push_back(item);
            }
        }
    }
}

QString Notificationtest_getElements_v1_Response_mPayload::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject Notificationtest_getElements_v1_Response_mPayload::asJsonObject() const {
    QJsonObject obj;
    if (m_pki_notificationtest_id_isSet) {
        obj.insert(QString("pkiNotificationtestID"), ::Ezmaxapi::toJsonValue(m_pki_notificationtest_id));
    }
    if (m_s_notificationtest_function_isSet) {
        obj.insert(QString("sNotificationtestFunction"), ::Ezmaxapi::toJsonValue(m_s_notificationtest_function));
    }
    if (m_a_s_variableobject_property.size() > 0) {
        obj.insert(QString("a_sVariableobjectProperty"), ::Ezmaxapi::toJsonValue(m_a_s_variableobject_property));
    }
    if (m_a_obj_variableobject.size() > 0) {
        
        obj.insert(QString("a_objVariableobject"), toJsonValue(m_a_obj_variableobject));
    }
    return obj;
}

qint32 Notificationtest_getElements_v1_Response_mPayload::getPkiNotificationtestId() const {
    return m_pki_notificationtest_id;
}
void Notificationtest_getElements_v1_Response_mPayload::setPkiNotificationtestId(const qint32 &pki_notificationtest_id) {
    m_pki_notificationtest_id = pki_notificationtest_id;
    m_pki_notificationtest_id_isSet = true;
}

bool Notificationtest_getElements_v1_Response_mPayload::is_pki_notificationtest_id_Set() const{
    return m_pki_notificationtest_id_isSet;
}

bool Notificationtest_getElements_v1_Response_mPayload::is_pki_notificationtest_id_Valid() const{
    return m_pki_notificationtest_id_isValid;
}

QString Notificationtest_getElements_v1_Response_mPayload::getSNotificationtestFunction() const {
    return m_s_notificationtest_function;
}
void Notificationtest_getElements_v1_Response_mPayload::setSNotificationtestFunction(const QString &s_notificationtest_function) {
    m_s_notificationtest_function = s_notificationtest_function;
    m_s_notificationtest_function_isSet = true;
}

bool Notificationtest_getElements_v1_Response_mPayload::is_s_notificationtest_function_Set() const{
    return m_s_notificationtest_function_isSet;
}

bool Notificationtest_getElements_v1_Response_mPayload::is_s_notificationtest_function_Valid() const{
    return m_s_notificationtest_function_isValid;
}

QList<QString> Notificationtest_getElements_v1_Response_mPayload::getASVariableobjectProperty() const {
    return m_a_s_variableobject_property;
}
void Notificationtest_getElements_v1_Response_mPayload::setASVariableobjectProperty(const QList<QString> &a_s_variableobject_property) {
    m_a_s_variableobject_property = a_s_variableobject_property;
    m_a_s_variableobject_property_isSet = true;
}

bool Notificationtest_getElements_v1_Response_mPayload::is_a_s_variableobject_property_Set() const{
    return m_a_s_variableobject_property_isSet;
}

bool Notificationtest_getElements_v1_Response_mPayload::is_a_s_variableobject_property_Valid() const{
    return m_a_s_variableobject_property_isValid;
}

QList<QMap> Notificationtest_getElements_v1_Response_mPayload::getAObjVariableobject() const {
    return m_a_obj_variableobject;
}
void Notificationtest_getElements_v1_Response_mPayload::setAObjVariableobject(const QList<QMap> &a_obj_variableobject) {
    m_a_obj_variableobject = a_obj_variableobject;
    m_a_obj_variableobject_isSet = true;
}

bool Notificationtest_getElements_v1_Response_mPayload::is_a_obj_variableobject_Set() const{
    return m_a_obj_variableobject_isSet;
}

bool Notificationtest_getElements_v1_Response_mPayload::is_a_obj_variableobject_Valid() const{
    return m_a_obj_variableobject_isValid;
}

bool Notificationtest_getElements_v1_Response_mPayload::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_pki_notificationtest_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s_notificationtest_function_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_a_s_variableobject_property.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_a_obj_variableobject.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool Notificationtest_getElements_v1_Response_mPayload::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_pki_notificationtest_id_isValid && m_s_notificationtest_function_isValid && m_a_s_variableobject_property_isValid && m_a_obj_variableobject_isValid && true;
}

} // namespace Ezmaxapi
