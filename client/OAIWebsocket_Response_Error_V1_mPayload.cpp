/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.18
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWebsocket_Response_Error_V1_mPayload.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWebsocket_Response_Error_V1_mPayload::OAIWebsocket_Response_Error_V1_mPayload(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWebsocket_Response_Error_V1_mPayload::OAIWebsocket_Response_Error_V1_mPayload() {
    this->initializeModel();
}

OAIWebsocket_Response_Error_V1_mPayload::~OAIWebsocket_Response_Error_V1_mPayload() {}

void OAIWebsocket_Response_Error_V1_mPayload::initializeModel() {

    m_s_error_message_isSet = false;
    m_s_error_message_isValid = false;

    m_e_error_code_isSet = false;
    m_e_error_code_isValid = false;
}

void OAIWebsocket_Response_Error_V1_mPayload::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWebsocket_Response_Error_V1_mPayload::fromJsonObject(QJsonObject json) {

    m_s_error_message_isValid = ::OpenAPI::fromJsonValue(s_error_message, json[QString("sErrorMessage")]);
    m_s_error_message_isSet = !json[QString("sErrorMessage")].isNull() && m_s_error_message_isValid;

    m_e_error_code_isValid = ::OpenAPI::fromJsonValue(e_error_code, json[QString("eErrorCode")]);
    m_e_error_code_isSet = !json[QString("eErrorCode")].isNull() && m_e_error_code_isValid;
}

QString OAIWebsocket_Response_Error_V1_mPayload::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWebsocket_Response_Error_V1_mPayload::asJsonObject() const {
    QJsonObject obj;
    if (m_s_error_message_isSet) {
        obj.insert(QString("sErrorMessage"), ::OpenAPI::toJsonValue(s_error_message));
    }
    if (e_error_code.isSet()) {
        obj.insert(QString("eErrorCode"), ::OpenAPI::toJsonValue(e_error_code));
    }
    return obj;
}

QString OAIWebsocket_Response_Error_V1_mPayload::getSErrorMessage() const {
    return s_error_message;
}
void OAIWebsocket_Response_Error_V1_mPayload::setSErrorMessage(const QString &s_error_message) {
    this->s_error_message = s_error_message;
    this->m_s_error_message_isSet = true;
}

bool OAIWebsocket_Response_Error_V1_mPayload::is_s_error_message_Set() const{
    return m_s_error_message_isSet;
}

bool OAIWebsocket_Response_Error_V1_mPayload::is_s_error_message_Valid() const{
    return m_s_error_message_isValid;
}

OAIField_eErrorCode OAIWebsocket_Response_Error_V1_mPayload::getEErrorCode() const {
    return e_error_code;
}
void OAIWebsocket_Response_Error_V1_mPayload::setEErrorCode(const OAIField_eErrorCode &e_error_code) {
    this->e_error_code = e_error_code;
    this->m_e_error_code_isSet = true;
}

bool OAIWebsocket_Response_Error_V1_mPayload::is_e_error_code_Set() const{
    return m_e_error_code_isSet;
}

bool OAIWebsocket_Response_Error_V1_mPayload::is_e_error_code_Valid() const{
    return m_e_error_code_isValid;
}

bool OAIWebsocket_Response_Error_V1_mPayload::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_s_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (e_error_code.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWebsocket_Response_Error_V1_mPayload::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_s_error_message_isValid && m_e_error_code_isValid && true;
}

} // namespace OpenAPI
