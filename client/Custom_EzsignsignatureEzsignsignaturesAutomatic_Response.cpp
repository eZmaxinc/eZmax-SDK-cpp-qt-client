/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "Custom_EzsignsignatureEzsignsignaturesAutomatic_Response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "Helpers.h"

namespace Ezmaxapi {

Custom_EzsignsignatureEzsignsignaturesAutomatic_Response::Custom_EzsignsignatureEzsignsignaturesAutomatic_Response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

Custom_EzsignsignatureEzsignsignaturesAutomatic_Response::Custom_EzsignsignatureEzsignsignaturesAutomatic_Response() {
    this->initializeModel();
}

Custom_EzsignsignatureEzsignsignaturesAutomatic_Response::~Custom_EzsignsignatureEzsignsignaturesAutomatic_Response() {}

void Custom_EzsignsignatureEzsignsignaturesAutomatic_Response::initializeModel() {

    m_pki_ezsignsignature_id_isSet = false;
    m_pki_ezsignsignature_id_isValid = false;

    m_e_ezsignsignature_type_isSet = false;
    m_e_ezsignsignature_type_isValid = false;

    m_i_ezsignpage_pagenumber_isSet = false;
    m_i_ezsignpage_pagenumber_isValid = false;
}

void Custom_EzsignsignatureEzsignsignaturesAutomatic_Response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void Custom_EzsignsignatureEzsignsignaturesAutomatic_Response::fromJsonObject(QJsonObject json) {

    m_pki_ezsignsignature_id_isValid = ::Ezmaxapi::fromJsonValue(m_pki_ezsignsignature_id, json[QString("pkiEzsignsignatureID")]);
    m_pki_ezsignsignature_id_isSet = !json[QString("pkiEzsignsignatureID")].isNull() && m_pki_ezsignsignature_id_isValid;

    m_e_ezsignsignature_type_isValid = ::Ezmaxapi::fromJsonValue(m_e_ezsignsignature_type, json[QString("eEzsignsignatureType")]);
    m_e_ezsignsignature_type_isSet = !json[QString("eEzsignsignatureType")].isNull() && m_e_ezsignsignature_type_isValid;

    m_i_ezsignpage_pagenumber_isValid = ::Ezmaxapi::fromJsonValue(m_i_ezsignpage_pagenumber, json[QString("iEzsignpagePagenumber")]);
    m_i_ezsignpage_pagenumber_isSet = !json[QString("iEzsignpagePagenumber")].isNull() && m_i_ezsignpage_pagenumber_isValid;
}

QString Custom_EzsignsignatureEzsignsignaturesAutomatic_Response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject Custom_EzsignsignatureEzsignsignaturesAutomatic_Response::asJsonObject() const {
    QJsonObject obj;
    if (m_pki_ezsignsignature_id_isSet) {
        obj.insert(QString("pkiEzsignsignatureID"), ::Ezmaxapi::toJsonValue(m_pki_ezsignsignature_id));
    }
    if (m_e_ezsignsignature_type.isSet()) {
        obj.insert(QString("eEzsignsignatureType"), ::Ezmaxapi::toJsonValue(m_e_ezsignsignature_type));
    }
    if (m_i_ezsignpage_pagenumber_isSet) {
        obj.insert(QString("iEzsignpagePagenumber"), ::Ezmaxapi::toJsonValue(m_i_ezsignpage_pagenumber));
    }
    return obj;
}

qint32 Custom_EzsignsignatureEzsignsignaturesAutomatic_Response::getPkiEzsignsignatureId() const {
    return m_pki_ezsignsignature_id;
}
void Custom_EzsignsignatureEzsignsignaturesAutomatic_Response::setPkiEzsignsignatureId(const qint32 &pki_ezsignsignature_id) {
    m_pki_ezsignsignature_id = pki_ezsignsignature_id;
    m_pki_ezsignsignature_id_isSet = true;
}

bool Custom_EzsignsignatureEzsignsignaturesAutomatic_Response::is_pki_ezsignsignature_id_Set() const{
    return m_pki_ezsignsignature_id_isSet;
}

bool Custom_EzsignsignatureEzsignsignaturesAutomatic_Response::is_pki_ezsignsignature_id_Valid() const{
    return m_pki_ezsignsignature_id_isValid;
}

Field_eEzsignsignatureType Custom_EzsignsignatureEzsignsignaturesAutomatic_Response::getEEzsignsignatureType() const {
    return m_e_ezsignsignature_type;
}
void Custom_EzsignsignatureEzsignsignaturesAutomatic_Response::setEEzsignsignatureType(const Field_eEzsignsignatureType &e_ezsignsignature_type) {
    m_e_ezsignsignature_type = e_ezsignsignature_type;
    m_e_ezsignsignature_type_isSet = true;
}

bool Custom_EzsignsignatureEzsignsignaturesAutomatic_Response::is_e_ezsignsignature_type_Set() const{
    return m_e_ezsignsignature_type_isSet;
}

bool Custom_EzsignsignatureEzsignsignaturesAutomatic_Response::is_e_ezsignsignature_type_Valid() const{
    return m_e_ezsignsignature_type_isValid;
}

qint32 Custom_EzsignsignatureEzsignsignaturesAutomatic_Response::getIEzsignpagePagenumber() const {
    return m_i_ezsignpage_pagenumber;
}
void Custom_EzsignsignatureEzsignsignaturesAutomatic_Response::setIEzsignpagePagenumber(const qint32 &i_ezsignpage_pagenumber) {
    m_i_ezsignpage_pagenumber = i_ezsignpage_pagenumber;
    m_i_ezsignpage_pagenumber_isSet = true;
}

bool Custom_EzsignsignatureEzsignsignaturesAutomatic_Response::is_i_ezsignpage_pagenumber_Set() const{
    return m_i_ezsignpage_pagenumber_isSet;
}

bool Custom_EzsignsignatureEzsignsignaturesAutomatic_Response::is_i_ezsignpage_pagenumber_Valid() const{
    return m_i_ezsignpage_pagenumber_isValid;
}

bool Custom_EzsignsignatureEzsignsignaturesAutomatic_Response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_pki_ezsignsignature_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_e_ezsignsignature_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_i_ezsignpage_pagenumber_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool Custom_EzsignsignatureEzsignsignaturesAutomatic_Response::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_pki_ezsignsignature_id_isValid && m_e_ezsignsignature_type_isValid && m_i_ezsignpage_pagenumber_isValid && true;
}

} // namespace Ezmaxapi
