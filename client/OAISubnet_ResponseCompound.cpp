/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubnet_ResponseCompound.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace Ezmaxapi {

OAISubnet_ResponseCompound::OAISubnet_ResponseCompound(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubnet_ResponseCompound::OAISubnet_ResponseCompound() {
    this->initializeModel();
}

OAISubnet_ResponseCompound::~OAISubnet_ResponseCompound() {}

void OAISubnet_ResponseCompound::initializeModel() {

    m_pki_subnet_id_isSet = false;
    m_pki_subnet_id_isValid = false;

    m_fki_user_id_isSet = false;
    m_fki_user_id_isValid = false;

    m_fki_apikey_id_isSet = false;
    m_fki_apikey_id_isValid = false;

    m_obj_subnet_description_isSet = false;
    m_obj_subnet_description_isValid = false;

    m_i_subnet_network_isSet = false;
    m_i_subnet_network_isValid = false;

    m_i_subnet_mask_isSet = false;
    m_i_subnet_mask_isValid = false;
}

void OAISubnet_ResponseCompound::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubnet_ResponseCompound::fromJsonObject(QJsonObject json) {

    m_pki_subnet_id_isValid = ::Ezmaxapi::fromJsonValue(m_pki_subnet_id, json[QString("pkiSubnetID")]);
    m_pki_subnet_id_isSet = !json[QString("pkiSubnetID")].isNull() && m_pki_subnet_id_isValid;

    m_fki_user_id_isValid = ::Ezmaxapi::fromJsonValue(m_fki_user_id, json[QString("fkiUserID")]);
    m_fki_user_id_isSet = !json[QString("fkiUserID")].isNull() && m_fki_user_id_isValid;

    m_fki_apikey_id_isValid = ::Ezmaxapi::fromJsonValue(m_fki_apikey_id, json[QString("fkiApikeyID")]);
    m_fki_apikey_id_isSet = !json[QString("fkiApikeyID")].isNull() && m_fki_apikey_id_isValid;

    m_obj_subnet_description_isValid = ::Ezmaxapi::fromJsonValue(m_obj_subnet_description, json[QString("objSubnetDescription")]);
    m_obj_subnet_description_isSet = !json[QString("objSubnetDescription")].isNull() && m_obj_subnet_description_isValid;

    m_i_subnet_network_isValid = ::Ezmaxapi::fromJsonValue(m_i_subnet_network, json[QString("iSubnetNetwork")]);
    m_i_subnet_network_isSet = !json[QString("iSubnetNetwork")].isNull() && m_i_subnet_network_isValid;

    m_i_subnet_mask_isValid = ::Ezmaxapi::fromJsonValue(m_i_subnet_mask, json[QString("iSubnetMask")]);
    m_i_subnet_mask_isSet = !json[QString("iSubnetMask")].isNull() && m_i_subnet_mask_isValid;
}

QString OAISubnet_ResponseCompound::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubnet_ResponseCompound::asJsonObject() const {
    QJsonObject obj;
    if (m_pki_subnet_id_isSet) {
        obj.insert(QString("pkiSubnetID"), ::Ezmaxapi::toJsonValue(m_pki_subnet_id));
    }
    if (m_fki_user_id_isSet) {
        obj.insert(QString("fkiUserID"), ::Ezmaxapi::toJsonValue(m_fki_user_id));
    }
    if (m_fki_apikey_id_isSet) {
        obj.insert(QString("fkiApikeyID"), ::Ezmaxapi::toJsonValue(m_fki_apikey_id));
    }
    if (m_obj_subnet_description.isSet()) {
        obj.insert(QString("objSubnetDescription"), ::Ezmaxapi::toJsonValue(m_obj_subnet_description));
    }
    if (m_i_subnet_network_isSet) {
        obj.insert(QString("iSubnetNetwork"), ::Ezmaxapi::toJsonValue(m_i_subnet_network));
    }
    if (m_i_subnet_mask_isSet) {
        obj.insert(QString("iSubnetMask"), ::Ezmaxapi::toJsonValue(m_i_subnet_mask));
    }
    return obj;
}

qint32 OAISubnet_ResponseCompound::getPkiSubnetId() const {
    return m_pki_subnet_id;
}
void OAISubnet_ResponseCompound::setPkiSubnetId(const qint32 &pki_subnet_id) {
    m_pki_subnet_id = pki_subnet_id;
    m_pki_subnet_id_isSet = true;
}

bool OAISubnet_ResponseCompound::is_pki_subnet_id_Set() const{
    return m_pki_subnet_id_isSet;
}

bool OAISubnet_ResponseCompound::is_pki_subnet_id_Valid() const{
    return m_pki_subnet_id_isValid;
}

qint32 OAISubnet_ResponseCompound::getFkiUserId() const {
    return m_fki_user_id;
}
void OAISubnet_ResponseCompound::setFkiUserId(const qint32 &fki_user_id) {
    m_fki_user_id = fki_user_id;
    m_fki_user_id_isSet = true;
}

bool OAISubnet_ResponseCompound::is_fki_user_id_Set() const{
    return m_fki_user_id_isSet;
}

bool OAISubnet_ResponseCompound::is_fki_user_id_Valid() const{
    return m_fki_user_id_isValid;
}

qint32 OAISubnet_ResponseCompound::getFkiApikeyId() const {
    return m_fki_apikey_id;
}
void OAISubnet_ResponseCompound::setFkiApikeyId(const qint32 &fki_apikey_id) {
    m_fki_apikey_id = fki_apikey_id;
    m_fki_apikey_id_isSet = true;
}

bool OAISubnet_ResponseCompound::is_fki_apikey_id_Set() const{
    return m_fki_apikey_id_isSet;
}

bool OAISubnet_ResponseCompound::is_fki_apikey_id_Valid() const{
    return m_fki_apikey_id_isValid;
}

OAIMultilingual_SubnetDescription OAISubnet_ResponseCompound::getObjSubnetDescription() const {
    return m_obj_subnet_description;
}
void OAISubnet_ResponseCompound::setObjSubnetDescription(const OAIMultilingual_SubnetDescription &obj_subnet_description) {
    m_obj_subnet_description = obj_subnet_description;
    m_obj_subnet_description_isSet = true;
}

bool OAISubnet_ResponseCompound::is_obj_subnet_description_Set() const{
    return m_obj_subnet_description_isSet;
}

bool OAISubnet_ResponseCompound::is_obj_subnet_description_Valid() const{
    return m_obj_subnet_description_isValid;
}

qint64 OAISubnet_ResponseCompound::getISubnetNetwork() const {
    return m_i_subnet_network;
}
void OAISubnet_ResponseCompound::setISubnetNetwork(const qint64 &i_subnet_network) {
    m_i_subnet_network = i_subnet_network;
    m_i_subnet_network_isSet = true;
}

bool OAISubnet_ResponseCompound::is_i_subnet_network_Set() const{
    return m_i_subnet_network_isSet;
}

bool OAISubnet_ResponseCompound::is_i_subnet_network_Valid() const{
    return m_i_subnet_network_isValid;
}

qint64 OAISubnet_ResponseCompound::getISubnetMask() const {
    return m_i_subnet_mask;
}
void OAISubnet_ResponseCompound::setISubnetMask(const qint64 &i_subnet_mask) {
    m_i_subnet_mask = i_subnet_mask;
    m_i_subnet_mask_isSet = true;
}

bool OAISubnet_ResponseCompound::is_i_subnet_mask_Set() const{
    return m_i_subnet_mask_isSet;
}

bool OAISubnet_ResponseCompound::is_i_subnet_mask_Valid() const{
    return m_i_subnet_mask_isValid;
}

bool OAISubnet_ResponseCompound::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_pki_subnet_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fki_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fki_apikey_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_obj_subnet_description.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_i_subnet_network_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_i_subnet_mask_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubnet_ResponseCompound::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_pki_subnet_id_isValid && m_obj_subnet_description_isValid && m_i_subnet_network_isValid && m_i_subnet_mask_isValid && true;
}

} // namespace Ezmaxapi
