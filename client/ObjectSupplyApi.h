/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef _ObjectSupplyApi_H
#define _ObjectSupplyApi_H

#include "Helpers.h"
#include "HttpRequest.h"
#include "ServerConfiguration.h"
#include "Oauth.h"

#include "Common_Response_Error.h"
#include "Header_Accept_Language.h"
#include "HttpFileElement.h"
#include "Supply_createObject_v1_Request.h"
#include "Supply_createObject_v1_Response.h"
#include "Supply_deleteObject_v1_Response.h"
#include "Supply_editObject_v1_Request.h"
#include "Supply_editObject_v1_Response.h"
#include "Supply_getAutocomplete_v2_Response.h"
#include "Supply_getList_v1_Response.h"
#include "Supply_getObject_v2_Response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace Ezmaxapi {

class ObjectSupplyApi : public QObject {
    Q_OBJECT

public:
    ObjectSupplyApi(const int timeOut = 0);
    ~ObjectSupplyApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, ServerVariable> &variables = QMap<QString, ServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, ServerVariable> &variables =  QMap<QString, ServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, ServerVariable> &variables =  QMap<QString, ServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  supply_create_object_v1_request Supply_createObject_v1_Request [required]
    */
    virtual void supplyCreateObjectV1(const Supply_createObject_v1_Request &supply_create_object_v1_request);

    /**
    * @param[in]  pki_supply_id qint32 [required]
    */
    virtual void supplyDeleteObjectV1(const qint32 &pki_supply_id);

    /**
    * @param[in]  pki_supply_id qint32 [required]
    * @param[in]  supply_edit_object_v1_request Supply_editObject_v1_Request [required]
    */
    virtual void supplyEditObjectV1(const qint32 &pki_supply_id, const Supply_editObject_v1_Request &supply_edit_object_v1_request);

    /**
    * @param[in]  s_selector QString [required]
    * @param[in]  e_filter_active QString [optional]
    * @param[in]  s_query QString [optional]
    * @param[in]  accept_language Header_Accept_Language [optional]
    */
    virtual void supplyGetAutocompleteV2(const QString &s_selector, const ::Ezmaxapi::OptionalParam<QString> &e_filter_active = ::Ezmaxapi::OptionalParam<QString>(), const ::Ezmaxapi::OptionalParam<QString> &s_query = ::Ezmaxapi::OptionalParam<QString>(), const ::Ezmaxapi::OptionalParam<Header_Accept_Language> &accept_language = ::Ezmaxapi::OptionalParam<Header_Accept_Language>());

    /**
    * @param[in]  e_order_by QString [optional]
    * @param[in]  i_row_max qint32 [optional]
    * @param[in]  i_row_offset qint32 [optional]
    * @param[in]  accept_language Header_Accept_Language [optional]
    * @param[in]  s_filter QString [optional]
    */
    virtual void supplyGetListV1(const ::Ezmaxapi::OptionalParam<QString> &e_order_by = ::Ezmaxapi::OptionalParam<QString>(), const ::Ezmaxapi::OptionalParam<qint32> &i_row_max = ::Ezmaxapi::OptionalParam<qint32>(), const ::Ezmaxapi::OptionalParam<qint32> &i_row_offset = ::Ezmaxapi::OptionalParam<qint32>(), const ::Ezmaxapi::OptionalParam<Header_Accept_Language> &accept_language = ::Ezmaxapi::OptionalParam<Header_Accept_Language>(), const ::Ezmaxapi::OptionalParam<QString> &s_filter = ::Ezmaxapi::OptionalParam<QString>());

    /**
    * @param[in]  pki_supply_id qint32 [required]
    */
    virtual void supplyGetObjectV2(const qint32 &pki_supply_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<ServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    HttpRequestInput _latestInput;
    HttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void supplyCreateObjectV1Callback(HttpRequestWorker *worker);
    void supplyDeleteObjectV1Callback(HttpRequestWorker *worker);
    void supplyEditObjectV1Callback(HttpRequestWorker *worker);
    void supplyGetAutocompleteV2Callback(HttpRequestWorker *worker);
    void supplyGetListV1Callback(HttpRequestWorker *worker);
    void supplyGetObjectV2Callback(HttpRequestWorker *worker);

Q_SIGNALS:

    void supplyCreateObjectV1Signal(Supply_createObject_v1_Response summary);
    void supplyDeleteObjectV1Signal(Supply_deleteObject_v1_Response summary);
    void supplyEditObjectV1Signal(Supply_editObject_v1_Response summary);
    void supplyGetAutocompleteV2Signal(Supply_getAutocomplete_v2_Response summary);
    void supplyGetListV1Signal(Supply_getList_v1_Response summary);
    void supplyGetObjectV2Signal(Supply_getObject_v2_Response summary);


    void supplyCreateObjectV1SignalFull(HttpRequestWorker *worker, Supply_createObject_v1_Response summary);
    void supplyDeleteObjectV1SignalFull(HttpRequestWorker *worker, Supply_deleteObject_v1_Response summary);
    void supplyEditObjectV1SignalFull(HttpRequestWorker *worker, Supply_editObject_v1_Response summary);
    void supplyGetAutocompleteV2SignalFull(HttpRequestWorker *worker, Supply_getAutocomplete_v2_Response summary);
    void supplyGetListV1SignalFull(HttpRequestWorker *worker, Supply_getList_v1_Response summary);
    void supplyGetObjectV2SignalFull(HttpRequestWorker *worker, Supply_getObject_v2_Response summary);

    Q_DECL_DEPRECATED_X("Use supplyCreateObjectV1SignalError() instead")
    void supplyCreateObjectV1SignalE(Supply_createObject_v1_Response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void supplyCreateObjectV1SignalError(Supply_createObject_v1_Response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use supplyDeleteObjectV1SignalError() instead")
    void supplyDeleteObjectV1SignalE(Supply_deleteObject_v1_Response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void supplyDeleteObjectV1SignalError(Supply_deleteObject_v1_Response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use supplyEditObjectV1SignalError() instead")
    void supplyEditObjectV1SignalE(Supply_editObject_v1_Response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void supplyEditObjectV1SignalError(Supply_editObject_v1_Response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use supplyGetAutocompleteV2SignalError() instead")
    void supplyGetAutocompleteV2SignalE(Supply_getAutocomplete_v2_Response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void supplyGetAutocompleteV2SignalError(Supply_getAutocomplete_v2_Response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use supplyGetListV1SignalError() instead")
    void supplyGetListV1SignalE(Supply_getList_v1_Response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void supplyGetListV1SignalError(Supply_getList_v1_Response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use supplyGetObjectV2SignalError() instead")
    void supplyGetObjectV2SignalE(Supply_getObject_v2_Response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void supplyGetObjectV2SignalError(Supply_getObject_v2_Response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use supplyCreateObjectV1SignalErrorFull() instead")
    void supplyCreateObjectV1SignalEFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void supplyCreateObjectV1SignalErrorFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use supplyDeleteObjectV1SignalErrorFull() instead")
    void supplyDeleteObjectV1SignalEFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void supplyDeleteObjectV1SignalErrorFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use supplyEditObjectV1SignalErrorFull() instead")
    void supplyEditObjectV1SignalEFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void supplyEditObjectV1SignalErrorFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use supplyGetAutocompleteV2SignalErrorFull() instead")
    void supplyGetAutocompleteV2SignalEFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void supplyGetAutocompleteV2SignalErrorFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use supplyGetListV1SignalErrorFull() instead")
    void supplyGetListV1SignalEFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void supplyGetListV1SignalErrorFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use supplyGetObjectV2SignalErrorFull() instead")
    void supplyGetObjectV2SignalEFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void supplyGetObjectV2SignalErrorFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace Ezmaxapi
#endif
