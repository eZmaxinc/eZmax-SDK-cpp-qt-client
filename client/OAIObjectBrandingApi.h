/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.16
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIObjectBrandingApi_H
#define OAI_OAIObjectBrandingApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBranding_createObject_v1_Request.h"
#include "OAIBranding_createObject_v1_Response.h"
#include "OAIBranding_editObject_v1_Request.h"
#include "OAIBranding_editObject_v1_Response.h"
#include "OAIBranding_getAutocomplete_v2_Response.h"
#include "OAIBranding_getList_v1_Response.h"
#include "OAIBranding_getObject_v1_Response.h"
#include "OAIBranding_getObject_v2_Response.h"
#include "OAICommon_Response_Error.h"
#include "OAICommon_getAutocomplete_v1_Response.h"
#include "OAIHeader_Accept_Language.h"
#include "OAIHttpFileElement.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIObjectBrandingApi : public QObject {
    Q_OBJECT

public:
    OAIObjectBrandingApi(const int timeOut = 0);
    ~OAIObjectBrandingApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_branding_create_object_v1_request OAIBranding_createObject_v1_Request [required]
    */
    void brandingCreateObjectV1(const OAIBranding_createObject_v1_Request &oai_branding_create_object_v1_request);

    /**
    * @param[in]  pki_branding_id qint32 [required]
    * @param[in]  oai_branding_edit_object_v1_request OAIBranding_editObject_v1_Request [required]
    */
    void brandingEditObjectV1(const qint32 &pki_branding_id, const OAIBranding_editObject_v1_Request &oai_branding_edit_object_v1_request);

    /**
    * @param[in]  s_selector QString [required]
    * @param[in]  e_filter_active QString [optional]
    * @param[in]  s_query QString [optional]
    * @param[in]  accept_language OAIHeader_Accept_Language [optional]
    */
    Q_DECL_DEPRECATED void brandingGetAutocompleteV1(const QString &s_selector, const ::OpenAPI::OptionalParam<QString> &e_filter_active = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &s_query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIHeader_Accept_Language> &accept_language = ::OpenAPI::OptionalParam<OAIHeader_Accept_Language>());

    /**
    * @param[in]  s_selector QString [required]
    * @param[in]  e_filter_active QString [optional]
    * @param[in]  s_query QString [optional]
    * @param[in]  accept_language OAIHeader_Accept_Language [optional]
    */
    void brandingGetAutocompleteV2(const QString &s_selector, const ::OpenAPI::OptionalParam<QString> &e_filter_active = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &s_query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIHeader_Accept_Language> &accept_language = ::OpenAPI::OptionalParam<OAIHeader_Accept_Language>());

    /**
    * @param[in]  e_order_by QString [optional]
    * @param[in]  i_row_max qint32 [optional]
    * @param[in]  i_row_offset qint32 [optional]
    * @param[in]  accept_language OAIHeader_Accept_Language [optional]
    * @param[in]  s_filter QString [optional]
    */
    void brandingGetListV1(const ::OpenAPI::OptionalParam<QString> &e_order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &i_row_max = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &i_row_offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIHeader_Accept_Language> &accept_language = ::OpenAPI::OptionalParam<OAIHeader_Accept_Language>(), const ::OpenAPI::OptionalParam<QString> &s_filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  pki_branding_id qint32 [required]
    */
    Q_DECL_DEPRECATED void brandingGetObjectV1(const qint32 &pki_branding_id);

    /**
    * @param[in]  pki_branding_id qint32 [required]
    */
    void brandingGetObjectV2(const qint32 &pki_branding_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void brandingCreateObjectV1Callback(OAIHttpRequestWorker *worker);
    void brandingEditObjectV1Callback(OAIHttpRequestWorker *worker);
    void brandingGetAutocompleteV1Callback(OAIHttpRequestWorker *worker);
    void brandingGetAutocompleteV2Callback(OAIHttpRequestWorker *worker);
    void brandingGetListV1Callback(OAIHttpRequestWorker *worker);
    void brandingGetObjectV1Callback(OAIHttpRequestWorker *worker);
    void brandingGetObjectV2Callback(OAIHttpRequestWorker *worker);

signals:

    void brandingCreateObjectV1Signal(OAIBranding_createObject_v1_Response summary);
    void brandingEditObjectV1Signal(OAIBranding_editObject_v1_Response summary);
    void brandingGetAutocompleteV1Signal(OAICommon_getAutocomplete_v1_Response summary);
    void brandingGetAutocompleteV2Signal(OAIBranding_getAutocomplete_v2_Response summary);
    void brandingGetListV1Signal(OAIBranding_getList_v1_Response summary);
    void brandingGetObjectV1Signal(OAIBranding_getObject_v1_Response summary);
    void brandingGetObjectV2Signal(OAIBranding_getObject_v2_Response summary);

    void brandingCreateObjectV1SignalFull(OAIHttpRequestWorker *worker, OAIBranding_createObject_v1_Response summary);
    void brandingEditObjectV1SignalFull(OAIHttpRequestWorker *worker, OAIBranding_editObject_v1_Response summary);
    void brandingGetAutocompleteV1SignalFull(OAIHttpRequestWorker *worker, OAICommon_getAutocomplete_v1_Response summary);
    void brandingGetAutocompleteV2SignalFull(OAIHttpRequestWorker *worker, OAIBranding_getAutocomplete_v2_Response summary);
    void brandingGetListV1SignalFull(OAIHttpRequestWorker *worker, OAIBranding_getList_v1_Response summary);
    void brandingGetObjectV1SignalFull(OAIHttpRequestWorker *worker, OAIBranding_getObject_v1_Response summary);
    void brandingGetObjectV2SignalFull(OAIHttpRequestWorker *worker, OAIBranding_getObject_v2_Response summary);

    void brandingCreateObjectV1SignalE(OAIBranding_createObject_v1_Response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void brandingEditObjectV1SignalE(OAIBranding_editObject_v1_Response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void brandingGetAutocompleteV1SignalE(OAICommon_getAutocomplete_v1_Response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void brandingGetAutocompleteV2SignalE(OAIBranding_getAutocomplete_v2_Response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void brandingGetListV1SignalE(OAIBranding_getList_v1_Response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void brandingGetObjectV1SignalE(OAIBranding_getObject_v1_Response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void brandingGetObjectV2SignalE(OAIBranding_getObject_v2_Response summary, QNetworkReply::NetworkError error_type, QString error_str);

    void brandingCreateObjectV1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void brandingEditObjectV1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void brandingGetAutocompleteV1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void brandingGetAutocompleteV2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void brandingGetListV1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void brandingGetObjectV1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void brandingGetObjectV2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public slots:
    void tokenAvailable();
    
};

} // namespace OpenAPI
#endif
