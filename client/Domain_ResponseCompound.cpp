/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "Domain_ResponseCompound.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "Helpers.h"

namespace Ezmaxapi {

Domain_ResponseCompound::Domain_ResponseCompound(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

Domain_ResponseCompound::Domain_ResponseCompound() {
    this->initializeModel();
}

Domain_ResponseCompound::~Domain_ResponseCompound() {}

void Domain_ResponseCompound::initializeModel() {

    m_pki_domain_id_isSet = false;
    m_pki_domain_id_isValid = false;

    m_s_domain_name_isSet = false;
    m_s_domain_name_isValid = false;

    m_b_domain_validdkim_isSet = false;
    m_b_domain_validdkim_isValid = false;

    m_b_domain_validmailfrom_isSet = false;
    m_b_domain_validmailfrom_isValid = false;

    m_b_domain_validcustomer_isSet = false;
    m_b_domain_validcustomer_isValid = false;

    m_obj_audit_isSet = false;
    m_obj_audit_isValid = false;

    m_a_obj_dnsrecord_isSet = false;
    m_a_obj_dnsrecord_isValid = false;
}

void Domain_ResponseCompound::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void Domain_ResponseCompound::fromJsonObject(QJsonObject json) {

    m_pki_domain_id_isValid = ::Ezmaxapi::fromJsonValue(m_pki_domain_id, json[QString("pkiDomainID")]);
    m_pki_domain_id_isSet = !json[QString("pkiDomainID")].isNull() && m_pki_domain_id_isValid;

    m_s_domain_name_isValid = ::Ezmaxapi::fromJsonValue(m_s_domain_name, json[QString("sDomainName")]);
    m_s_domain_name_isSet = !json[QString("sDomainName")].isNull() && m_s_domain_name_isValid;

    m_b_domain_validdkim_isValid = ::Ezmaxapi::fromJsonValue(m_b_domain_validdkim, json[QString("bDomainValiddkim")]);
    m_b_domain_validdkim_isSet = !json[QString("bDomainValiddkim")].isNull() && m_b_domain_validdkim_isValid;

    m_b_domain_validmailfrom_isValid = ::Ezmaxapi::fromJsonValue(m_b_domain_validmailfrom, json[QString("bDomainValidmailfrom")]);
    m_b_domain_validmailfrom_isSet = !json[QString("bDomainValidmailfrom")].isNull() && m_b_domain_validmailfrom_isValid;

    m_b_domain_validcustomer_isValid = ::Ezmaxapi::fromJsonValue(m_b_domain_validcustomer, json[QString("bDomainValidcustomer")]);
    m_b_domain_validcustomer_isSet = !json[QString("bDomainValidcustomer")].isNull() && m_b_domain_validcustomer_isValid;

    m_obj_audit_isValid = ::Ezmaxapi::fromJsonValue(m_obj_audit, json[QString("objAudit")]);
    m_obj_audit_isSet = !json[QString("objAudit")].isNull() && m_obj_audit_isValid;

    m_a_obj_dnsrecord_isValid = ::Ezmaxapi::fromJsonValue(m_a_obj_dnsrecord, json[QString("a_objDnsrecord")]);
    m_a_obj_dnsrecord_isSet = !json[QString("a_objDnsrecord")].isNull() && m_a_obj_dnsrecord_isValid;
}

QString Domain_ResponseCompound::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject Domain_ResponseCompound::asJsonObject() const {
    QJsonObject obj;
    if (m_pki_domain_id_isSet) {
        obj.insert(QString("pkiDomainID"), ::Ezmaxapi::toJsonValue(m_pki_domain_id));
    }
    if (m_s_domain_name_isSet) {
        obj.insert(QString("sDomainName"), ::Ezmaxapi::toJsonValue(m_s_domain_name));
    }
    if (m_b_domain_validdkim_isSet) {
        obj.insert(QString("bDomainValiddkim"), ::Ezmaxapi::toJsonValue(m_b_domain_validdkim));
    }
    if (m_b_domain_validmailfrom_isSet) {
        obj.insert(QString("bDomainValidmailfrom"), ::Ezmaxapi::toJsonValue(m_b_domain_validmailfrom));
    }
    if (m_b_domain_validcustomer_isSet) {
        obj.insert(QString("bDomainValidcustomer"), ::Ezmaxapi::toJsonValue(m_b_domain_validcustomer));
    }
    if (m_obj_audit.isSet()) {
        obj.insert(QString("objAudit"), ::Ezmaxapi::toJsonValue(m_obj_audit));
    }
    if (m_a_obj_dnsrecord.size() > 0) {
        obj.insert(QString("a_objDnsrecord"), ::Ezmaxapi::toJsonValue(m_a_obj_dnsrecord));
    }
    return obj;
}

qint32 Domain_ResponseCompound::getPkiDomainId() const {
    return m_pki_domain_id;
}
void Domain_ResponseCompound::setPkiDomainId(const qint32 &pki_domain_id) {
    m_pki_domain_id = pki_domain_id;
    m_pki_domain_id_isSet = true;
}

bool Domain_ResponseCompound::is_pki_domain_id_Set() const{
    return m_pki_domain_id_isSet;
}

bool Domain_ResponseCompound::is_pki_domain_id_Valid() const{
    return m_pki_domain_id_isValid;
}

QString Domain_ResponseCompound::getSDomainName() const {
    return m_s_domain_name;
}
void Domain_ResponseCompound::setSDomainName(const QString &s_domain_name) {
    m_s_domain_name = s_domain_name;
    m_s_domain_name_isSet = true;
}

bool Domain_ResponseCompound::is_s_domain_name_Set() const{
    return m_s_domain_name_isSet;
}

bool Domain_ResponseCompound::is_s_domain_name_Valid() const{
    return m_s_domain_name_isValid;
}

bool Domain_ResponseCompound::isBDomainValiddkim() const {
    return m_b_domain_validdkim;
}
void Domain_ResponseCompound::setBDomainValiddkim(const bool &b_domain_validdkim) {
    m_b_domain_validdkim = b_domain_validdkim;
    m_b_domain_validdkim_isSet = true;
}

bool Domain_ResponseCompound::is_b_domain_validdkim_Set() const{
    return m_b_domain_validdkim_isSet;
}

bool Domain_ResponseCompound::is_b_domain_validdkim_Valid() const{
    return m_b_domain_validdkim_isValid;
}

bool Domain_ResponseCompound::isBDomainValidmailfrom() const {
    return m_b_domain_validmailfrom;
}
void Domain_ResponseCompound::setBDomainValidmailfrom(const bool &b_domain_validmailfrom) {
    m_b_domain_validmailfrom = b_domain_validmailfrom;
    m_b_domain_validmailfrom_isSet = true;
}

bool Domain_ResponseCompound::is_b_domain_validmailfrom_Set() const{
    return m_b_domain_validmailfrom_isSet;
}

bool Domain_ResponseCompound::is_b_domain_validmailfrom_Valid() const{
    return m_b_domain_validmailfrom_isValid;
}

bool Domain_ResponseCompound::isBDomainValidcustomer() const {
    return m_b_domain_validcustomer;
}
void Domain_ResponseCompound::setBDomainValidcustomer(const bool &b_domain_validcustomer) {
    m_b_domain_validcustomer = b_domain_validcustomer;
    m_b_domain_validcustomer_isSet = true;
}

bool Domain_ResponseCompound::is_b_domain_validcustomer_Set() const{
    return m_b_domain_validcustomer_isSet;
}

bool Domain_ResponseCompound::is_b_domain_validcustomer_Valid() const{
    return m_b_domain_validcustomer_isValid;
}

Common_Audit Domain_ResponseCompound::getObjAudit() const {
    return m_obj_audit;
}
void Domain_ResponseCompound::setObjAudit(const Common_Audit &obj_audit) {
    m_obj_audit = obj_audit;
    m_obj_audit_isSet = true;
}

bool Domain_ResponseCompound::is_obj_audit_Set() const{
    return m_obj_audit_isSet;
}

bool Domain_ResponseCompound::is_obj_audit_Valid() const{
    return m_obj_audit_isValid;
}

QList<Custom_Dnsrecord_Response> Domain_ResponseCompound::getAObjDnsrecord() const {
    return m_a_obj_dnsrecord;
}
void Domain_ResponseCompound::setAObjDnsrecord(const QList<Custom_Dnsrecord_Response> &a_obj_dnsrecord) {
    m_a_obj_dnsrecord = a_obj_dnsrecord;
    m_a_obj_dnsrecord_isSet = true;
}

bool Domain_ResponseCompound::is_a_obj_dnsrecord_Set() const{
    return m_a_obj_dnsrecord_isSet;
}

bool Domain_ResponseCompound::is_a_obj_dnsrecord_Valid() const{
    return m_a_obj_dnsrecord_isValid;
}

bool Domain_ResponseCompound::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_pki_domain_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s_domain_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_b_domain_validdkim_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_b_domain_validmailfrom_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_b_domain_validcustomer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_obj_audit.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_a_obj_dnsrecord.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool Domain_ResponseCompound::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_pki_domain_id_isValid && m_s_domain_name_isValid && m_b_domain_validdkim_isValid && m_b_domain_validmailfrom_isValid && m_b_domain_validcustomer_isValid && m_obj_audit_isValid && m_a_obj_dnsrecord_isValid && true;
}

} // namespace Ezmaxapi
