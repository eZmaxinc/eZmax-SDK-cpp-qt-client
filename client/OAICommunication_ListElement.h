/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.17
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICommunication_ListElement.h
 *
 * A Communication List Element
 */

#ifndef OAICommunication_ListElement_H
#define OAICommunication_ListElement_H

#include <QJsonObject>

#include "OAIComputed_eCommunicationDirection.h"
#include "OAIField_eCommunicationImportance.h"
#include "OAIField_eCommunicationType.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICommunication_ListElement : public OAIObject {
public:
    OAICommunication_ListElement();
    OAICommunication_ListElement(QString json);
    ~OAICommunication_ListElement() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getPkiCommunicationId() const;
    void setPkiCommunicationId(const qint32 &pki_communication_id);
    bool is_pki_communication_id_Set() const;
    bool is_pki_communication_id_Valid() const;

    qint32 getFkiEzsignfolderId() const;
    void setFkiEzsignfolderId(const qint32 &fki_ezsignfolder_id);
    bool is_fki_ezsignfolder_id_Set() const;
    bool is_fki_ezsignfolder_id_Valid() const;

    qint32 getFkiInscriptionId() const;
    void setFkiInscriptionId(const qint32 &fki_inscription_id);
    bool is_fki_inscription_id_Set() const;
    bool is_fki_inscription_id_Valid() const;

    qint32 getFkiInscriptionnotauthenticatedId() const;
    void setFkiInscriptionnotauthenticatedId(const qint32 &fki_inscriptionnotauthenticated_id);
    bool is_fki_inscriptionnotauthenticated_id_Set() const;
    bool is_fki_inscriptionnotauthenticated_id_Valid() const;

    QString getDtCreatedDate() const;
    void setDtCreatedDate(const QString &dt_created_date);
    bool is_dt_created_date_Set() const;
    bool is_dt_created_date_Valid() const;

    OAIComputed_eCommunicationDirection getECommunicationDirection() const;
    void setECommunicationDirection(const OAIComputed_eCommunicationDirection &e_communication_direction);
    bool is_e_communication_direction_Set() const;
    bool is_e_communication_direction_Valid() const;

    OAIField_eCommunicationImportance getECommunicationImportance() const;
    void setECommunicationImportance(const OAIField_eCommunicationImportance &e_communication_importance);
    bool is_e_communication_importance_Set() const;
    bool is_e_communication_importance_Valid() const;

    OAIField_eCommunicationType getECommunicationType() const;
    void setECommunicationType(const OAIField_eCommunicationType &e_communication_type);
    bool is_e_communication_type_Set() const;
    bool is_e_communication_type_Valid() const;

    qint32 getICommunicationrecipientCount() const;
    void setICommunicationrecipientCount(const qint32 &i_communicationrecipient_count);
    bool is_i_communicationrecipient_count_Set() const;
    bool is_i_communicationrecipient_count_Valid() const;

    QString getSCommunicationSubject() const;
    void setSCommunicationSubject(const QString &s_communication_subject);
    bool is_s_communication_subject_Set() const;
    bool is_s_communication_subject_Valid() const;

    QString getSCommunicationSender() const;
    void setSCommunicationSender(const QString &s_communication_sender);
    bool is_s_communication_sender_Set() const;
    bool is_s_communication_sender_Valid() const;

    QString getSCommunicationRecipient() const;
    void setSCommunicationRecipient(const QString &s_communication_recipient);
    bool is_s_communication_recipient_Set() const;
    bool is_s_communication_recipient_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 pki_communication_id;
    bool m_pki_communication_id_isSet;
    bool m_pki_communication_id_isValid;

    qint32 fki_ezsignfolder_id;
    bool m_fki_ezsignfolder_id_isSet;
    bool m_fki_ezsignfolder_id_isValid;

    qint32 fki_inscription_id;
    bool m_fki_inscription_id_isSet;
    bool m_fki_inscription_id_isValid;

    qint32 fki_inscriptionnotauthenticated_id;
    bool m_fki_inscriptionnotauthenticated_id_isSet;
    bool m_fki_inscriptionnotauthenticated_id_isValid;

    QString dt_created_date;
    bool m_dt_created_date_isSet;
    bool m_dt_created_date_isValid;

    OAIComputed_eCommunicationDirection e_communication_direction;
    bool m_e_communication_direction_isSet;
    bool m_e_communication_direction_isValid;

    OAIField_eCommunicationImportance e_communication_importance;
    bool m_e_communication_importance_isSet;
    bool m_e_communication_importance_isValid;

    OAIField_eCommunicationType e_communication_type;
    bool m_e_communication_type_isSet;
    bool m_e_communication_type_isValid;

    qint32 i_communicationrecipient_count;
    bool m_i_communicationrecipient_count_isSet;
    bool m_i_communicationrecipient_count_isValid;

    QString s_communication_subject;
    bool m_s_communication_subject_isSet;
    bool m_s_communication_subject_isValid;

    QString s_communication_sender;
    bool m_s_communication_sender_isSet;
    bool m_s_communication_sender_isValid;

    QString s_communication_recipient;
    bool m_s_communication_recipient_isSet;
    bool m_s_communication_recipient_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICommunication_ListElement)

#endif // OAICommunication_ListElement_H
