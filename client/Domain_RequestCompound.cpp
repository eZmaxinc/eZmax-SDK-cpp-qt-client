/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "Domain_RequestCompound.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "Helpers.h"

namespace Ezmaxapi {

Domain_RequestCompound::Domain_RequestCompound(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

Domain_RequestCompound::Domain_RequestCompound() {
    this->initializeModel();
}

Domain_RequestCompound::~Domain_RequestCompound() {}

void Domain_RequestCompound::initializeModel() {

    m_pki_domain_id_isSet = false;
    m_pki_domain_id_isValid = false;

    m_s_domain_name_isSet = false;
    m_s_domain_name_isValid = false;
}

void Domain_RequestCompound::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void Domain_RequestCompound::fromJsonObject(QJsonObject json) {

    m_pki_domain_id_isValid = ::Ezmaxapi::fromJsonValue(m_pki_domain_id, json[QString("pkiDomainID")]);
    m_pki_domain_id_isSet = !json[QString("pkiDomainID")].isNull() && m_pki_domain_id_isValid;

    m_s_domain_name_isValid = ::Ezmaxapi::fromJsonValue(m_s_domain_name, json[QString("sDomainName")]);
    m_s_domain_name_isSet = !json[QString("sDomainName")].isNull() && m_s_domain_name_isValid;
}

QString Domain_RequestCompound::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject Domain_RequestCompound::asJsonObject() const {
    QJsonObject obj;
    if (m_pki_domain_id_isSet) {
        obj.insert(QString("pkiDomainID"), ::Ezmaxapi::toJsonValue(m_pki_domain_id));
    }
    if (m_s_domain_name_isSet) {
        obj.insert(QString("sDomainName"), ::Ezmaxapi::toJsonValue(m_s_domain_name));
    }
    return obj;
}

qint32 Domain_RequestCompound::getPkiDomainId() const {
    return m_pki_domain_id;
}
void Domain_RequestCompound::setPkiDomainId(const qint32 &pki_domain_id) {
    m_pki_domain_id = pki_domain_id;
    m_pki_domain_id_isSet = true;
}

bool Domain_RequestCompound::is_pki_domain_id_Set() const{
    return m_pki_domain_id_isSet;
}

bool Domain_RequestCompound::is_pki_domain_id_Valid() const{
    return m_pki_domain_id_isValid;
}

QString Domain_RequestCompound::getSDomainName() const {
    return m_s_domain_name;
}
void Domain_RequestCompound::setSDomainName(const QString &s_domain_name) {
    m_s_domain_name = s_domain_name;
    m_s_domain_name_isSet = true;
}

bool Domain_RequestCompound::is_s_domain_name_Set() const{
    return m_s_domain_name_isSet;
}

bool Domain_RequestCompound::is_s_domain_name_Valid() const{
    return m_s_domain_name_isValid;
}

bool Domain_RequestCompound::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_pki_domain_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s_domain_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool Domain_RequestCompound::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_s_domain_name_isValid && true;
}

} // namespace Ezmaxapi
