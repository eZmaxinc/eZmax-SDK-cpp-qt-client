/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "Ezsignfoldersignerassociation_ResponseCompound_User.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "Helpers.h"

namespace Ezmaxapi {

Ezsignfoldersignerassociation_ResponseCompound_User::Ezsignfoldersignerassociation_ResponseCompound_User(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

Ezsignfoldersignerassociation_ResponseCompound_User::Ezsignfoldersignerassociation_ResponseCompound_User() {
    this->initializeModel();
}

Ezsignfoldersignerassociation_ResponseCompound_User::~Ezsignfoldersignerassociation_ResponseCompound_User() {}

void Ezsignfoldersignerassociation_ResponseCompound_User::initializeModel() {

    m_pki_user_id_isSet = false;
    m_pki_user_id_isValid = false;

    m_fki_language_id_isSet = false;
    m_fki_language_id_isValid = false;

    m_s_user_firstname_isSet = false;
    m_s_user_firstname_isValid = false;

    m_s_user_lastname_isSet = false;
    m_s_user_lastname_isValid = false;

    m_s_email_address_isSet = false;
    m_s_email_address_isValid = false;
}

void Ezsignfoldersignerassociation_ResponseCompound_User::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void Ezsignfoldersignerassociation_ResponseCompound_User::fromJsonObject(QJsonObject json) {

    m_pki_user_id_isValid = ::Ezmaxapi::fromJsonValue(m_pki_user_id, json[QString("pkiUserID")]);
    m_pki_user_id_isSet = !json[QString("pkiUserID")].isNull() && m_pki_user_id_isValid;

    m_fki_language_id_isValid = ::Ezmaxapi::fromJsonValue(m_fki_language_id, json[QString("fkiLanguageID")]);
    m_fki_language_id_isSet = !json[QString("fkiLanguageID")].isNull() && m_fki_language_id_isValid;

    m_s_user_firstname_isValid = ::Ezmaxapi::fromJsonValue(m_s_user_firstname, json[QString("sUserFirstname")]);
    m_s_user_firstname_isSet = !json[QString("sUserFirstname")].isNull() && m_s_user_firstname_isValid;

    m_s_user_lastname_isValid = ::Ezmaxapi::fromJsonValue(m_s_user_lastname, json[QString("sUserLastname")]);
    m_s_user_lastname_isSet = !json[QString("sUserLastname")].isNull() && m_s_user_lastname_isValid;

    m_s_email_address_isValid = ::Ezmaxapi::fromJsonValue(m_s_email_address, json[QString("sEmailAddress")]);
    m_s_email_address_isSet = !json[QString("sEmailAddress")].isNull() && m_s_email_address_isValid;
}

QString Ezsignfoldersignerassociation_ResponseCompound_User::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject Ezsignfoldersignerassociation_ResponseCompound_User::asJsonObject() const {
    QJsonObject obj;
    if (m_pki_user_id_isSet) {
        obj.insert(QString("pkiUserID"), ::Ezmaxapi::toJsonValue(m_pki_user_id));
    }
    if (m_fki_language_id_isSet) {
        obj.insert(QString("fkiLanguageID"), ::Ezmaxapi::toJsonValue(m_fki_language_id));
    }
    if (m_s_user_firstname_isSet) {
        obj.insert(QString("sUserFirstname"), ::Ezmaxapi::toJsonValue(m_s_user_firstname));
    }
    if (m_s_user_lastname_isSet) {
        obj.insert(QString("sUserLastname"), ::Ezmaxapi::toJsonValue(m_s_user_lastname));
    }
    if (m_s_email_address_isSet) {
        obj.insert(QString("sEmailAddress"), ::Ezmaxapi::toJsonValue(m_s_email_address));
    }
    return obj;
}

qint32 Ezsignfoldersignerassociation_ResponseCompound_User::getPkiUserId() const {
    return m_pki_user_id;
}
void Ezsignfoldersignerassociation_ResponseCompound_User::setPkiUserId(const qint32 &pki_user_id) {
    m_pki_user_id = pki_user_id;
    m_pki_user_id_isSet = true;
}

bool Ezsignfoldersignerassociation_ResponseCompound_User::is_pki_user_id_Set() const{
    return m_pki_user_id_isSet;
}

bool Ezsignfoldersignerassociation_ResponseCompound_User::is_pki_user_id_Valid() const{
    return m_pki_user_id_isValid;
}

qint32 Ezsignfoldersignerassociation_ResponseCompound_User::getFkiLanguageId() const {
    return m_fki_language_id;
}
void Ezsignfoldersignerassociation_ResponseCompound_User::setFkiLanguageId(const qint32 &fki_language_id) {
    m_fki_language_id = fki_language_id;
    m_fki_language_id_isSet = true;
}

bool Ezsignfoldersignerassociation_ResponseCompound_User::is_fki_language_id_Set() const{
    return m_fki_language_id_isSet;
}

bool Ezsignfoldersignerassociation_ResponseCompound_User::is_fki_language_id_Valid() const{
    return m_fki_language_id_isValid;
}

QString Ezsignfoldersignerassociation_ResponseCompound_User::getSUserFirstname() const {
    return m_s_user_firstname;
}
void Ezsignfoldersignerassociation_ResponseCompound_User::setSUserFirstname(const QString &s_user_firstname) {
    m_s_user_firstname = s_user_firstname;
    m_s_user_firstname_isSet = true;
}

bool Ezsignfoldersignerassociation_ResponseCompound_User::is_s_user_firstname_Set() const{
    return m_s_user_firstname_isSet;
}

bool Ezsignfoldersignerassociation_ResponseCompound_User::is_s_user_firstname_Valid() const{
    return m_s_user_firstname_isValid;
}

QString Ezsignfoldersignerassociation_ResponseCompound_User::getSUserLastname() const {
    return m_s_user_lastname;
}
void Ezsignfoldersignerassociation_ResponseCompound_User::setSUserLastname(const QString &s_user_lastname) {
    m_s_user_lastname = s_user_lastname;
    m_s_user_lastname_isSet = true;
}

bool Ezsignfoldersignerassociation_ResponseCompound_User::is_s_user_lastname_Set() const{
    return m_s_user_lastname_isSet;
}

bool Ezsignfoldersignerassociation_ResponseCompound_User::is_s_user_lastname_Valid() const{
    return m_s_user_lastname_isValid;
}

QString Ezsignfoldersignerassociation_ResponseCompound_User::getSEmailAddress() const {
    return m_s_email_address;
}
void Ezsignfoldersignerassociation_ResponseCompound_User::setSEmailAddress(const QString &s_email_address) {
    m_s_email_address = s_email_address;
    m_s_email_address_isSet = true;
}

bool Ezsignfoldersignerassociation_ResponseCompound_User::is_s_email_address_Set() const{
    return m_s_email_address_isSet;
}

bool Ezsignfoldersignerassociation_ResponseCompound_User::is_s_email_address_Valid() const{
    return m_s_email_address_isValid;
}

bool Ezsignfoldersignerassociation_ResponseCompound_User::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_pki_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fki_language_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s_user_firstname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s_user_lastname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s_email_address_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool Ezsignfoldersignerassociation_ResponseCompound_User::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_pki_user_id_isValid && m_fki_language_id_isValid && m_s_user_firstname_isValid && m_s_user_lastname_isValid && m_s_email_address_isValid && true;
}

} // namespace Ezmaxapi
