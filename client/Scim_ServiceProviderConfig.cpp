/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "Scim_ServiceProviderConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "Helpers.h"

namespace Ezmaxapi {

Scim_ServiceProviderConfig::Scim_ServiceProviderConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

Scim_ServiceProviderConfig::Scim_ServiceProviderConfig() {
    this->initializeModel();
}

Scim_ServiceProviderConfig::~Scim_ServiceProviderConfig() {}

void Scim_ServiceProviderConfig::initializeModel() {

    m_authentication_schemes_isSet = false;
    m_authentication_schemes_isValid = false;

    m_bulk_isSet = false;
    m_bulk_isValid = false;

    m_change_password_isSet = false;
    m_change_password_isValid = false;

    m_documentation_uri_isSet = false;
    m_documentation_uri_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_filter_isSet = false;
    m_filter_isValid = false;

    m_patch_isSet = false;
    m_patch_isValid = false;

    m_sort_isSet = false;
    m_sort_isValid = false;
}

void Scim_ServiceProviderConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void Scim_ServiceProviderConfig::fromJsonObject(QJsonObject json) {

    m_authentication_schemes_isValid = ::Ezmaxapi::fromJsonValue(m_authentication_schemes, json[QString("authenticationSchemes")]);
    m_authentication_schemes_isSet = !json[QString("authenticationSchemes")].isNull() && m_authentication_schemes_isValid;

    m_bulk_isValid = ::Ezmaxapi::fromJsonValue(m_bulk, json[QString("bulk")]);
    m_bulk_isSet = !json[QString("bulk")].isNull() && m_bulk_isValid;

    m_change_password_isValid = ::Ezmaxapi::fromJsonValue(m_change_password, json[QString("changePassword")]);
    m_change_password_isSet = !json[QString("changePassword")].isNull() && m_change_password_isValid;

    m_documentation_uri_isValid = ::Ezmaxapi::fromJsonValue(m_documentation_uri, json[QString("documentationUri")]);
    m_documentation_uri_isSet = !json[QString("documentationUri")].isNull() && m_documentation_uri_isValid;

    m_etag_isValid = ::Ezmaxapi::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_filter_isValid = ::Ezmaxapi::fromJsonValue(m_filter, json[QString("filter")]);
    m_filter_isSet = !json[QString("filter")].isNull() && m_filter_isValid;

    m_patch_isValid = ::Ezmaxapi::fromJsonValue(m_patch, json[QString("patch")]);
    m_patch_isSet = !json[QString("patch")].isNull() && m_patch_isValid;

    m_sort_isValid = ::Ezmaxapi::fromJsonValue(m_sort, json[QString("sort")]);
    m_sort_isSet = !json[QString("sort")].isNull() && m_sort_isValid;
}

QString Scim_ServiceProviderConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject Scim_ServiceProviderConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_authentication_schemes.size() > 0) {
        obj.insert(QString("authenticationSchemes"), ::Ezmaxapi::toJsonValue(m_authentication_schemes));
    }
    if (m_bulk.isSet()) {
        obj.insert(QString("bulk"), ::Ezmaxapi::toJsonValue(m_bulk));
    }
    if (m_change_password.isSet()) {
        obj.insert(QString("changePassword"), ::Ezmaxapi::toJsonValue(m_change_password));
    }
    if (m_documentation_uri_isSet) {
        obj.insert(QString("documentationUri"), ::Ezmaxapi::toJsonValue(m_documentation_uri));
    }
    if (m_etag.isSet()) {
        obj.insert(QString("etag"), ::Ezmaxapi::toJsonValue(m_etag));
    }
    if (m_filter.isSet()) {
        obj.insert(QString("filter"), ::Ezmaxapi::toJsonValue(m_filter));
    }
    if (m_patch.isSet()) {
        obj.insert(QString("patch"), ::Ezmaxapi::toJsonValue(m_patch));
    }
    if (m_sort.isSet()) {
        obj.insert(QString("sort"), ::Ezmaxapi::toJsonValue(m_sort));
    }
    return obj;
}

QList<Scim_AuthenticationScheme> Scim_ServiceProviderConfig::getAuthenticationSchemes() const {
    return m_authentication_schemes;
}
void Scim_ServiceProviderConfig::setAuthenticationSchemes(const QList<Scim_AuthenticationScheme> &authentication_schemes) {
    m_authentication_schemes = authentication_schemes;
    m_authentication_schemes_isSet = true;
}

bool Scim_ServiceProviderConfig::is_authentication_schemes_Set() const{
    return m_authentication_schemes_isSet;
}

bool Scim_ServiceProviderConfig::is_authentication_schemes_Valid() const{
    return m_authentication_schemes_isValid;
}

Scim_ServiceProviderConfig_bulk Scim_ServiceProviderConfig::getBulk() const {
    return m_bulk;
}
void Scim_ServiceProviderConfig::setBulk(const Scim_ServiceProviderConfig_bulk &bulk) {
    m_bulk = bulk;
    m_bulk_isSet = true;
}

bool Scim_ServiceProviderConfig::is_bulk_Set() const{
    return m_bulk_isSet;
}

bool Scim_ServiceProviderConfig::is_bulk_Valid() const{
    return m_bulk_isValid;
}

Scim_ServiceProviderConfig_changePassword Scim_ServiceProviderConfig::getChangePassword() const {
    return m_change_password;
}
void Scim_ServiceProviderConfig::setChangePassword(const Scim_ServiceProviderConfig_changePassword &change_password) {
    m_change_password = change_password;
    m_change_password_isSet = true;
}

bool Scim_ServiceProviderConfig::is_change_password_Set() const{
    return m_change_password_isSet;
}

bool Scim_ServiceProviderConfig::is_change_password_Valid() const{
    return m_change_password_isValid;
}

QString Scim_ServiceProviderConfig::getDocumentationUri() const {
    return m_documentation_uri;
}
void Scim_ServiceProviderConfig::setDocumentationUri(const QString &documentation_uri) {
    m_documentation_uri = documentation_uri;
    m_documentation_uri_isSet = true;
}

bool Scim_ServiceProviderConfig::is_documentation_uri_Set() const{
    return m_documentation_uri_isSet;
}

bool Scim_ServiceProviderConfig::is_documentation_uri_Valid() const{
    return m_documentation_uri_isValid;
}

Scim_ServiceProviderConfig_etag Scim_ServiceProviderConfig::getEtag() const {
    return m_etag;
}
void Scim_ServiceProviderConfig::setEtag(const Scim_ServiceProviderConfig_etag &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool Scim_ServiceProviderConfig::is_etag_Set() const{
    return m_etag_isSet;
}

bool Scim_ServiceProviderConfig::is_etag_Valid() const{
    return m_etag_isValid;
}

Scim_ServiceProviderConfig_filter Scim_ServiceProviderConfig::getFilter() const {
    return m_filter;
}
void Scim_ServiceProviderConfig::setFilter(const Scim_ServiceProviderConfig_filter &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool Scim_ServiceProviderConfig::is_filter_Set() const{
    return m_filter_isSet;
}

bool Scim_ServiceProviderConfig::is_filter_Valid() const{
    return m_filter_isValid;
}

Scim_ServiceProviderConfig_patch Scim_ServiceProviderConfig::getPatch() const {
    return m_patch;
}
void Scim_ServiceProviderConfig::setPatch(const Scim_ServiceProviderConfig_patch &patch) {
    m_patch = patch;
    m_patch_isSet = true;
}

bool Scim_ServiceProviderConfig::is_patch_Set() const{
    return m_patch_isSet;
}

bool Scim_ServiceProviderConfig::is_patch_Valid() const{
    return m_patch_isValid;
}

Scim_ServiceProviderConfig_sort Scim_ServiceProviderConfig::getSort() const {
    return m_sort;
}
void Scim_ServiceProviderConfig::setSort(const Scim_ServiceProviderConfig_sort &sort) {
    m_sort = sort;
    m_sort_isSet = true;
}

bool Scim_ServiceProviderConfig::is_sort_Set() const{
    return m_sort_isSet;
}

bool Scim_ServiceProviderConfig::is_sort_Valid() const{
    return m_sort_isValid;
}

bool Scim_ServiceProviderConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authentication_schemes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_bulk.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_change_password.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_documentation_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_patch.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool Scim_ServiceProviderConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_authentication_schemes_isValid && m_bulk_isValid && m_change_password_isValid && m_documentation_uri_isValid && m_etag_isValid && m_filter_isValid && m_patch_isValid && m_sort_isValid && true;
}

} // namespace Ezmaxapi
