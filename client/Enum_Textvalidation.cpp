/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "Enum_Textvalidation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "Helpers.h"

namespace Ezmaxapi {

Enum_Textvalidation::Enum_Textvalidation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

Enum_Textvalidation::Enum_Textvalidation() {
    this->initializeModel();
}

Enum_Textvalidation::~Enum_Textvalidation() {}

void Enum_Textvalidation::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eEnum_Textvalidation::INVALID_VALUE_OPENAPI_GENERATED;
}

void Enum_Textvalidation::fromJson(QString jsonString) {
    
    if ( jsonString.compare("None", Qt::CaseInsensitive) == 0) {
        m_value = eEnum_Textvalidation::NONE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Date (YYYY-MM-DD)", Qt::CaseInsensitive) == 0) {
        m_value = eEnum_Textvalidation::DATE_YYYY_MM_DD_;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Date (MM/DD/YYYY)", Qt::CaseInsensitive) == 0) {
        m_value = eEnum_Textvalidation::DATE_MM_DD_YYYY_;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Date (MM/DD/YY)", Qt::CaseInsensitive) == 0) {
        m_value = eEnum_Textvalidation::DATE_MM_DD_YY_;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Date (DD/MM/YYYY)", Qt::CaseInsensitive) == 0) {
        m_value = eEnum_Textvalidation::DATE_DD_MM_YYYY_;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Date (DD/MM/YY)", Qt::CaseInsensitive) == 0) {
        m_value = eEnum_Textvalidation::DATE_DD_MM_YY_;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Email", Qt::CaseInsensitive) == 0) {
        m_value = eEnum_Textvalidation::EMAIL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Letters", Qt::CaseInsensitive) == 0) {
        m_value = eEnum_Textvalidation::LETTERS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Numbers", Qt::CaseInsensitive) == 0) {
        m_value = eEnum_Textvalidation::NUMBERS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Zip", Qt::CaseInsensitive) == 0) {
        m_value = eEnum_Textvalidation::ZIP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Zip+4", Qt::CaseInsensitive) == 0) {
        m_value = eEnum_Textvalidation::ZIP_4;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PostalCode", Qt::CaseInsensitive) == 0) {
        m_value = eEnum_Textvalidation::POSTALCODE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Custom", Qt::CaseInsensitive) == 0) {
        m_value = eEnum_Textvalidation::CUSTOM;
        m_value_isSet = m_value_isValid = true;
    }
}

void Enum_Textvalidation::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString Enum_Textvalidation::asJson() const {
    
    QString val;
    switch (m_value){
        case eEnum_Textvalidation::NONE:
            val = "None";
            break;
        case eEnum_Textvalidation::DATE_YYYY_MM_DD_:
            val = "Date (YYYY-MM-DD)";
            break;
        case eEnum_Textvalidation::DATE_MM_DD_YYYY_:
            val = "Date (MM/DD/YYYY)";
            break;
        case eEnum_Textvalidation::DATE_MM_DD_YY_:
            val = "Date (MM/DD/YY)";
            break;
        case eEnum_Textvalidation::DATE_DD_MM_YYYY_:
            val = "Date (DD/MM/YYYY)";
            break;
        case eEnum_Textvalidation::DATE_DD_MM_YY_:
            val = "Date (DD/MM/YY)";
            break;
        case eEnum_Textvalidation::EMAIL:
            val = "Email";
            break;
        case eEnum_Textvalidation::LETTERS:
            val = "Letters";
            break;
        case eEnum_Textvalidation::NUMBERS:
            val = "Numbers";
            break;
        case eEnum_Textvalidation::ZIP:
            val = "Zip";
            break;
        case eEnum_Textvalidation::ZIP_4:
            val = "Zip+4";
            break;
        case eEnum_Textvalidation::POSTALCODE:
            val = "PostalCode";
            break;
        case eEnum_Textvalidation::CUSTOM:
            val = "Custom";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue Enum_Textvalidation::asJsonValue() const {
    
    return QJsonValue(asJson());
}


Enum_Textvalidation::eEnum_Textvalidation Enum_Textvalidation::getValue() const {
    return m_value;
}

void Enum_Textvalidation::setValue(const Enum_Textvalidation::eEnum_Textvalidation& value){
    m_value = value;
    m_value_isSet = true;
}
bool Enum_Textvalidation::isSet() const {
    
    return m_value_isSet;
}

bool Enum_Textvalidation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace Ezmaxapi
