/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "Website_RequestCompound.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "Helpers.h"

namespace Ezmaxapi {

Website_RequestCompound::Website_RequestCompound(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

Website_RequestCompound::Website_RequestCompound() {
    this->initializeModel();
}

Website_RequestCompound::~Website_RequestCompound() {}

void Website_RequestCompound::initializeModel() {

    m_pki_website_id_isSet = false;
    m_pki_website_id_isValid = false;

    m_fki_websitetype_id_isSet = false;
    m_fki_websitetype_id_isValid = false;

    m_s_website_address_isSet = false;
    m_s_website_address_isValid = false;
}

void Website_RequestCompound::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void Website_RequestCompound::fromJsonObject(QJsonObject json) {

    m_pki_website_id_isValid = ::Ezmaxapi::fromJsonValue(m_pki_website_id, json[QString("pkiWebsiteID")]);
    m_pki_website_id_isSet = !json[QString("pkiWebsiteID")].isNull() && m_pki_website_id_isValid;

    m_fki_websitetype_id_isValid = ::Ezmaxapi::fromJsonValue(m_fki_websitetype_id, json[QString("fkiWebsitetypeID")]);
    m_fki_websitetype_id_isSet = !json[QString("fkiWebsitetypeID")].isNull() && m_fki_websitetype_id_isValid;

    m_s_website_address_isValid = ::Ezmaxapi::fromJsonValue(m_s_website_address, json[QString("sWebsiteAddress")]);
    m_s_website_address_isSet = !json[QString("sWebsiteAddress")].isNull() && m_s_website_address_isValid;
}

QString Website_RequestCompound::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject Website_RequestCompound::asJsonObject() const {
    QJsonObject obj;
    if (m_pki_website_id_isSet) {
        obj.insert(QString("pkiWebsiteID"), ::Ezmaxapi::toJsonValue(m_pki_website_id));
    }
    if (m_fki_websitetype_id_isSet) {
        obj.insert(QString("fkiWebsitetypeID"), ::Ezmaxapi::toJsonValue(m_fki_websitetype_id));
    }
    if (m_s_website_address_isSet) {
        obj.insert(QString("sWebsiteAddress"), ::Ezmaxapi::toJsonValue(m_s_website_address));
    }
    return obj;
}

qint32 Website_RequestCompound::getPkiWebsiteId() const {
    return m_pki_website_id;
}
void Website_RequestCompound::setPkiWebsiteId(const qint32 &pki_website_id) {
    m_pki_website_id = pki_website_id;
    m_pki_website_id_isSet = true;
}

bool Website_RequestCompound::is_pki_website_id_Set() const{
    return m_pki_website_id_isSet;
}

bool Website_RequestCompound::is_pki_website_id_Valid() const{
    return m_pki_website_id_isValid;
}

qint32 Website_RequestCompound::getFkiWebsitetypeId() const {
    return m_fki_websitetype_id;
}
void Website_RequestCompound::setFkiWebsitetypeId(const qint32 &fki_websitetype_id) {
    m_fki_websitetype_id = fki_websitetype_id;
    m_fki_websitetype_id_isSet = true;
}

bool Website_RequestCompound::is_fki_websitetype_id_Set() const{
    return m_fki_websitetype_id_isSet;
}

bool Website_RequestCompound::is_fki_websitetype_id_Valid() const{
    return m_fki_websitetype_id_isValid;
}

QString Website_RequestCompound::getSWebsiteAddress() const {
    return m_s_website_address;
}
void Website_RequestCompound::setSWebsiteAddress(const QString &s_website_address) {
    m_s_website_address = s_website_address;
    m_s_website_address_isSet = true;
}

bool Website_RequestCompound::is_s_website_address_Set() const{
    return m_s_website_address_isSet;
}

bool Website_RequestCompound::is_s_website_address_Valid() const{
    return m_s_website_address_isValid;
}

bool Website_RequestCompound::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_pki_website_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fki_websitetype_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s_website_address_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool Website_RequestCompound::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_fki_websitetype_id_isValid && m_s_website_address_isValid && true;
}

} // namespace Ezmaxapi
