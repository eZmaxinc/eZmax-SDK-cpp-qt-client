/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "Ezsigntemplatepublic_ListElement.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "Helpers.h"

namespace Ezmaxapi {

Ezsigntemplatepublic_ListElement::Ezsigntemplatepublic_ListElement(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

Ezsigntemplatepublic_ListElement::Ezsigntemplatepublic_ListElement() {
    this->initializeModel();
}

Ezsigntemplatepublic_ListElement::~Ezsigntemplatepublic_ListElement() {}

void Ezsigntemplatepublic_ListElement::initializeModel() {

    m_pki_ezsigntemplatepublic_id_isSet = false;
    m_pki_ezsigntemplatepublic_id_isValid = false;

    m_fki_ezsignfoldertype_id_isSet = false;
    m_fki_ezsignfoldertype_id_isValid = false;

    m_s_ezsignfoldertype_name_x_isSet = false;
    m_s_ezsignfoldertype_name_x_isValid = false;

    m_fki_userlogintype_id_isSet = false;
    m_fki_userlogintype_id_isValid = false;

    m_fki_ezsigntemplate_id_isSet = false;
    m_fki_ezsigntemplate_id_isValid = false;

    m_fki_ezsigntemplatepackage_id_isSet = false;
    m_fki_ezsigntemplatepackage_id_isValid = false;

    m_s_ezsigntemplatepublic_description_isSet = false;
    m_s_ezsigntemplatepublic_description_isValid = false;

    m_b_ezsigntemplatepublic_isactive_isSet = false;
    m_b_ezsigntemplatepublic_isactive_isValid = false;

    m_t_ezsigntemplatepublic_note_isSet = false;
    m_t_ezsigntemplatepublic_note_isValid = false;

    m_e_ezsigntemplatepublic_limittype_isSet = false;
    m_e_ezsigntemplatepublic_limittype_isValid = false;

    m_i_ezsigntemplatepublic_limit_isSet = false;
    m_i_ezsigntemplatepublic_limit_isValid = false;

    m_i_ezsigntemplatepublic_limitexceeded_isSet = false;
    m_i_ezsigntemplatepublic_limitexceeded_isValid = false;

    m_dt_ezsigntemplatepublic_limitexceededsince_isSet = false;
    m_dt_ezsigntemplatepublic_limitexceededsince_isValid = false;

    m_i_ezsignfolder_isSet = false;
    m_i_ezsignfolder_isValid = false;

    m_i_ezsigndocument_isSet = false;
    m_i_ezsigndocument_isValid = false;

    m_s_ezsigntemplatepublic_ezsigntemplatedescription_isSet = false;
    m_s_ezsigntemplatepublic_ezsigntemplatedescription_isValid = false;
}

void Ezsigntemplatepublic_ListElement::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void Ezsigntemplatepublic_ListElement::fromJsonObject(QJsonObject json) {

    m_pki_ezsigntemplatepublic_id_isValid = ::Ezmaxapi::fromJsonValue(m_pki_ezsigntemplatepublic_id, json[QString("pkiEzsigntemplatepublicID")]);
    m_pki_ezsigntemplatepublic_id_isSet = !json[QString("pkiEzsigntemplatepublicID")].isNull() && m_pki_ezsigntemplatepublic_id_isValid;

    m_fki_ezsignfoldertype_id_isValid = ::Ezmaxapi::fromJsonValue(m_fki_ezsignfoldertype_id, json[QString("fkiEzsignfoldertypeID")]);
    m_fki_ezsignfoldertype_id_isSet = !json[QString("fkiEzsignfoldertypeID")].isNull() && m_fki_ezsignfoldertype_id_isValid;

    m_s_ezsignfoldertype_name_x_isValid = ::Ezmaxapi::fromJsonValue(m_s_ezsignfoldertype_name_x, json[QString("sEzsignfoldertypeNameX")]);
    m_s_ezsignfoldertype_name_x_isSet = !json[QString("sEzsignfoldertypeNameX")].isNull() && m_s_ezsignfoldertype_name_x_isValid;

    m_fki_userlogintype_id_isValid = ::Ezmaxapi::fromJsonValue(m_fki_userlogintype_id, json[QString("fkiUserlogintypeID")]);
    m_fki_userlogintype_id_isSet = !json[QString("fkiUserlogintypeID")].isNull() && m_fki_userlogintype_id_isValid;

    m_fki_ezsigntemplate_id_isValid = ::Ezmaxapi::fromJsonValue(m_fki_ezsigntemplate_id, json[QString("fkiEzsigntemplateID")]);
    m_fki_ezsigntemplate_id_isSet = !json[QString("fkiEzsigntemplateID")].isNull() && m_fki_ezsigntemplate_id_isValid;

    m_fki_ezsigntemplatepackage_id_isValid = ::Ezmaxapi::fromJsonValue(m_fki_ezsigntemplatepackage_id, json[QString("fkiEzsigntemplatepackageID")]);
    m_fki_ezsigntemplatepackage_id_isSet = !json[QString("fkiEzsigntemplatepackageID")].isNull() && m_fki_ezsigntemplatepackage_id_isValid;

    m_s_ezsigntemplatepublic_description_isValid = ::Ezmaxapi::fromJsonValue(m_s_ezsigntemplatepublic_description, json[QString("sEzsigntemplatepublicDescription")]);
    m_s_ezsigntemplatepublic_description_isSet = !json[QString("sEzsigntemplatepublicDescription")].isNull() && m_s_ezsigntemplatepublic_description_isValid;

    m_b_ezsigntemplatepublic_isactive_isValid = ::Ezmaxapi::fromJsonValue(m_b_ezsigntemplatepublic_isactive, json[QString("bEzsigntemplatepublicIsactive")]);
    m_b_ezsigntemplatepublic_isactive_isSet = !json[QString("bEzsigntemplatepublicIsactive")].isNull() && m_b_ezsigntemplatepublic_isactive_isValid;

    m_t_ezsigntemplatepublic_note_isValid = ::Ezmaxapi::fromJsonValue(m_t_ezsigntemplatepublic_note, json[QString("tEzsigntemplatepublicNote")]);
    m_t_ezsigntemplatepublic_note_isSet = !json[QString("tEzsigntemplatepublicNote")].isNull() && m_t_ezsigntemplatepublic_note_isValid;

    m_e_ezsigntemplatepublic_limittype_isValid = ::Ezmaxapi::fromJsonValue(m_e_ezsigntemplatepublic_limittype, json[QString("eEzsigntemplatepublicLimittype")]);
    m_e_ezsigntemplatepublic_limittype_isSet = !json[QString("eEzsigntemplatepublicLimittype")].isNull() && m_e_ezsigntemplatepublic_limittype_isValid;

    m_i_ezsigntemplatepublic_limit_isValid = ::Ezmaxapi::fromJsonValue(m_i_ezsigntemplatepublic_limit, json[QString("iEzsigntemplatepublicLimit")]);
    m_i_ezsigntemplatepublic_limit_isSet = !json[QString("iEzsigntemplatepublicLimit")].isNull() && m_i_ezsigntemplatepublic_limit_isValid;

    m_i_ezsigntemplatepublic_limitexceeded_isValid = ::Ezmaxapi::fromJsonValue(m_i_ezsigntemplatepublic_limitexceeded, json[QString("iEzsigntemplatepublicLimitexceeded")]);
    m_i_ezsigntemplatepublic_limitexceeded_isSet = !json[QString("iEzsigntemplatepublicLimitexceeded")].isNull() && m_i_ezsigntemplatepublic_limitexceeded_isValid;

    m_dt_ezsigntemplatepublic_limitexceededsince_isValid = ::Ezmaxapi::fromJsonValue(m_dt_ezsigntemplatepublic_limitexceededsince, json[QString("dtEzsigntemplatepublicLimitexceededsince")]);
    m_dt_ezsigntemplatepublic_limitexceededsince_isSet = !json[QString("dtEzsigntemplatepublicLimitexceededsince")].isNull() && m_dt_ezsigntemplatepublic_limitexceededsince_isValid;

    m_i_ezsignfolder_isValid = ::Ezmaxapi::fromJsonValue(m_i_ezsignfolder, json[QString("iEzsignfolder")]);
    m_i_ezsignfolder_isSet = !json[QString("iEzsignfolder")].isNull() && m_i_ezsignfolder_isValid;

    m_i_ezsigndocument_isValid = ::Ezmaxapi::fromJsonValue(m_i_ezsigndocument, json[QString("iEzsigndocument")]);
    m_i_ezsigndocument_isSet = !json[QString("iEzsigndocument")].isNull() && m_i_ezsigndocument_isValid;

    m_s_ezsigntemplatepublic_ezsigntemplatedescription_isValid = ::Ezmaxapi::fromJsonValue(m_s_ezsigntemplatepublic_ezsigntemplatedescription, json[QString("sEzsigntemplatepublicEzsigntemplatedescription")]);
    m_s_ezsigntemplatepublic_ezsigntemplatedescription_isSet = !json[QString("sEzsigntemplatepublicEzsigntemplatedescription")].isNull() && m_s_ezsigntemplatepublic_ezsigntemplatedescription_isValid;
}

QString Ezsigntemplatepublic_ListElement::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject Ezsigntemplatepublic_ListElement::asJsonObject() const {
    QJsonObject obj;
    if (m_pki_ezsigntemplatepublic_id_isSet) {
        obj.insert(QString("pkiEzsigntemplatepublicID"), ::Ezmaxapi::toJsonValue(m_pki_ezsigntemplatepublic_id));
    }
    if (m_fki_ezsignfoldertype_id_isSet) {
        obj.insert(QString("fkiEzsignfoldertypeID"), ::Ezmaxapi::toJsonValue(m_fki_ezsignfoldertype_id));
    }
    if (m_s_ezsignfoldertype_name_x_isSet) {
        obj.insert(QString("sEzsignfoldertypeNameX"), ::Ezmaxapi::toJsonValue(m_s_ezsignfoldertype_name_x));
    }
    if (m_fki_userlogintype_id_isSet) {
        obj.insert(QString("fkiUserlogintypeID"), ::Ezmaxapi::toJsonValue(m_fki_userlogintype_id));
    }
    if (m_fki_ezsigntemplate_id_isSet) {
        obj.insert(QString("fkiEzsigntemplateID"), ::Ezmaxapi::toJsonValue(m_fki_ezsigntemplate_id));
    }
    if (m_fki_ezsigntemplatepackage_id_isSet) {
        obj.insert(QString("fkiEzsigntemplatepackageID"), ::Ezmaxapi::toJsonValue(m_fki_ezsigntemplatepackage_id));
    }
    if (m_s_ezsigntemplatepublic_description_isSet) {
        obj.insert(QString("sEzsigntemplatepublicDescription"), ::Ezmaxapi::toJsonValue(m_s_ezsigntemplatepublic_description));
    }
    if (m_b_ezsigntemplatepublic_isactive_isSet) {
        obj.insert(QString("bEzsigntemplatepublicIsactive"), ::Ezmaxapi::toJsonValue(m_b_ezsigntemplatepublic_isactive));
    }
    if (m_t_ezsigntemplatepublic_note_isSet) {
        obj.insert(QString("tEzsigntemplatepublicNote"), ::Ezmaxapi::toJsonValue(m_t_ezsigntemplatepublic_note));
    }
    if (m_e_ezsigntemplatepublic_limittype.isSet()) {
        obj.insert(QString("eEzsigntemplatepublicLimittype"), ::Ezmaxapi::toJsonValue(m_e_ezsigntemplatepublic_limittype));
    }
    if (m_i_ezsigntemplatepublic_limit_isSet) {
        obj.insert(QString("iEzsigntemplatepublicLimit"), ::Ezmaxapi::toJsonValue(m_i_ezsigntemplatepublic_limit));
    }
    if (m_i_ezsigntemplatepublic_limitexceeded_isSet) {
        obj.insert(QString("iEzsigntemplatepublicLimitexceeded"), ::Ezmaxapi::toJsonValue(m_i_ezsigntemplatepublic_limitexceeded));
    }
    if (m_dt_ezsigntemplatepublic_limitexceededsince_isSet) {
        obj.insert(QString("dtEzsigntemplatepublicLimitexceededsince"), ::Ezmaxapi::toJsonValue(m_dt_ezsigntemplatepublic_limitexceededsince));
    }
    if (m_i_ezsignfolder_isSet) {
        obj.insert(QString("iEzsignfolder"), ::Ezmaxapi::toJsonValue(m_i_ezsignfolder));
    }
    if (m_i_ezsigndocument_isSet) {
        obj.insert(QString("iEzsigndocument"), ::Ezmaxapi::toJsonValue(m_i_ezsigndocument));
    }
    if (m_s_ezsigntemplatepublic_ezsigntemplatedescription_isSet) {
        obj.insert(QString("sEzsigntemplatepublicEzsigntemplatedescription"), ::Ezmaxapi::toJsonValue(m_s_ezsigntemplatepublic_ezsigntemplatedescription));
    }
    return obj;
}

qint32 Ezsigntemplatepublic_ListElement::getPkiEzsigntemplatepublicId() const {
    return m_pki_ezsigntemplatepublic_id;
}
void Ezsigntemplatepublic_ListElement::setPkiEzsigntemplatepublicId(const qint32 &pki_ezsigntemplatepublic_id) {
    m_pki_ezsigntemplatepublic_id = pki_ezsigntemplatepublic_id;
    m_pki_ezsigntemplatepublic_id_isSet = true;
}

bool Ezsigntemplatepublic_ListElement::is_pki_ezsigntemplatepublic_id_Set() const{
    return m_pki_ezsigntemplatepublic_id_isSet;
}

bool Ezsigntemplatepublic_ListElement::is_pki_ezsigntemplatepublic_id_Valid() const{
    return m_pki_ezsigntemplatepublic_id_isValid;
}

qint32 Ezsigntemplatepublic_ListElement::getFkiEzsignfoldertypeId() const {
    return m_fki_ezsignfoldertype_id;
}
void Ezsigntemplatepublic_ListElement::setFkiEzsignfoldertypeId(const qint32 &fki_ezsignfoldertype_id) {
    m_fki_ezsignfoldertype_id = fki_ezsignfoldertype_id;
    m_fki_ezsignfoldertype_id_isSet = true;
}

bool Ezsigntemplatepublic_ListElement::is_fki_ezsignfoldertype_id_Set() const{
    return m_fki_ezsignfoldertype_id_isSet;
}

bool Ezsigntemplatepublic_ListElement::is_fki_ezsignfoldertype_id_Valid() const{
    return m_fki_ezsignfoldertype_id_isValid;
}

QString Ezsigntemplatepublic_ListElement::getSEzsignfoldertypeNameX() const {
    return m_s_ezsignfoldertype_name_x;
}
void Ezsigntemplatepublic_ListElement::setSEzsignfoldertypeNameX(const QString &s_ezsignfoldertype_name_x) {
    m_s_ezsignfoldertype_name_x = s_ezsignfoldertype_name_x;
    m_s_ezsignfoldertype_name_x_isSet = true;
}

bool Ezsigntemplatepublic_ListElement::is_s_ezsignfoldertype_name_x_Set() const{
    return m_s_ezsignfoldertype_name_x_isSet;
}

bool Ezsigntemplatepublic_ListElement::is_s_ezsignfoldertype_name_x_Valid() const{
    return m_s_ezsignfoldertype_name_x_isValid;
}

qint32 Ezsigntemplatepublic_ListElement::getFkiUserlogintypeId() const {
    return m_fki_userlogintype_id;
}
void Ezsigntemplatepublic_ListElement::setFkiUserlogintypeId(const qint32 &fki_userlogintype_id) {
    m_fki_userlogintype_id = fki_userlogintype_id;
    m_fki_userlogintype_id_isSet = true;
}

bool Ezsigntemplatepublic_ListElement::is_fki_userlogintype_id_Set() const{
    return m_fki_userlogintype_id_isSet;
}

bool Ezsigntemplatepublic_ListElement::is_fki_userlogintype_id_Valid() const{
    return m_fki_userlogintype_id_isValid;
}

qint32 Ezsigntemplatepublic_ListElement::getFkiEzsigntemplateId() const {
    return m_fki_ezsigntemplate_id;
}
void Ezsigntemplatepublic_ListElement::setFkiEzsigntemplateId(const qint32 &fki_ezsigntemplate_id) {
    m_fki_ezsigntemplate_id = fki_ezsigntemplate_id;
    m_fki_ezsigntemplate_id_isSet = true;
}

bool Ezsigntemplatepublic_ListElement::is_fki_ezsigntemplate_id_Set() const{
    return m_fki_ezsigntemplate_id_isSet;
}

bool Ezsigntemplatepublic_ListElement::is_fki_ezsigntemplate_id_Valid() const{
    return m_fki_ezsigntemplate_id_isValid;
}

qint32 Ezsigntemplatepublic_ListElement::getFkiEzsigntemplatepackageId() const {
    return m_fki_ezsigntemplatepackage_id;
}
void Ezsigntemplatepublic_ListElement::setFkiEzsigntemplatepackageId(const qint32 &fki_ezsigntemplatepackage_id) {
    m_fki_ezsigntemplatepackage_id = fki_ezsigntemplatepackage_id;
    m_fki_ezsigntemplatepackage_id_isSet = true;
}

bool Ezsigntemplatepublic_ListElement::is_fki_ezsigntemplatepackage_id_Set() const{
    return m_fki_ezsigntemplatepackage_id_isSet;
}

bool Ezsigntemplatepublic_ListElement::is_fki_ezsigntemplatepackage_id_Valid() const{
    return m_fki_ezsigntemplatepackage_id_isValid;
}

QString Ezsigntemplatepublic_ListElement::getSEzsigntemplatepublicDescription() const {
    return m_s_ezsigntemplatepublic_description;
}
void Ezsigntemplatepublic_ListElement::setSEzsigntemplatepublicDescription(const QString &s_ezsigntemplatepublic_description) {
    m_s_ezsigntemplatepublic_description = s_ezsigntemplatepublic_description;
    m_s_ezsigntemplatepublic_description_isSet = true;
}

bool Ezsigntemplatepublic_ListElement::is_s_ezsigntemplatepublic_description_Set() const{
    return m_s_ezsigntemplatepublic_description_isSet;
}

bool Ezsigntemplatepublic_ListElement::is_s_ezsigntemplatepublic_description_Valid() const{
    return m_s_ezsigntemplatepublic_description_isValid;
}

bool Ezsigntemplatepublic_ListElement::isBEzsigntemplatepublicIsactive() const {
    return m_b_ezsigntemplatepublic_isactive;
}
void Ezsigntemplatepublic_ListElement::setBEzsigntemplatepublicIsactive(const bool &b_ezsigntemplatepublic_isactive) {
    m_b_ezsigntemplatepublic_isactive = b_ezsigntemplatepublic_isactive;
    m_b_ezsigntemplatepublic_isactive_isSet = true;
}

bool Ezsigntemplatepublic_ListElement::is_b_ezsigntemplatepublic_isactive_Set() const{
    return m_b_ezsigntemplatepublic_isactive_isSet;
}

bool Ezsigntemplatepublic_ListElement::is_b_ezsigntemplatepublic_isactive_Valid() const{
    return m_b_ezsigntemplatepublic_isactive_isValid;
}

QString Ezsigntemplatepublic_ListElement::getTEzsigntemplatepublicNote() const {
    return m_t_ezsigntemplatepublic_note;
}
void Ezsigntemplatepublic_ListElement::setTEzsigntemplatepublicNote(const QString &t_ezsigntemplatepublic_note) {
    m_t_ezsigntemplatepublic_note = t_ezsigntemplatepublic_note;
    m_t_ezsigntemplatepublic_note_isSet = true;
}

bool Ezsigntemplatepublic_ListElement::is_t_ezsigntemplatepublic_note_Set() const{
    return m_t_ezsigntemplatepublic_note_isSet;
}

bool Ezsigntemplatepublic_ListElement::is_t_ezsigntemplatepublic_note_Valid() const{
    return m_t_ezsigntemplatepublic_note_isValid;
}

Field_eEzsigntemplatepublicLimittype Ezsigntemplatepublic_ListElement::getEEzsigntemplatepublicLimittype() const {
    return m_e_ezsigntemplatepublic_limittype;
}
void Ezsigntemplatepublic_ListElement::setEEzsigntemplatepublicLimittype(const Field_eEzsigntemplatepublicLimittype &e_ezsigntemplatepublic_limittype) {
    m_e_ezsigntemplatepublic_limittype = e_ezsigntemplatepublic_limittype;
    m_e_ezsigntemplatepublic_limittype_isSet = true;
}

bool Ezsigntemplatepublic_ListElement::is_e_ezsigntemplatepublic_limittype_Set() const{
    return m_e_ezsigntemplatepublic_limittype_isSet;
}

bool Ezsigntemplatepublic_ListElement::is_e_ezsigntemplatepublic_limittype_Valid() const{
    return m_e_ezsigntemplatepublic_limittype_isValid;
}

qint32 Ezsigntemplatepublic_ListElement::getIEzsigntemplatepublicLimit() const {
    return m_i_ezsigntemplatepublic_limit;
}
void Ezsigntemplatepublic_ListElement::setIEzsigntemplatepublicLimit(const qint32 &i_ezsigntemplatepublic_limit) {
    m_i_ezsigntemplatepublic_limit = i_ezsigntemplatepublic_limit;
    m_i_ezsigntemplatepublic_limit_isSet = true;
}

bool Ezsigntemplatepublic_ListElement::is_i_ezsigntemplatepublic_limit_Set() const{
    return m_i_ezsigntemplatepublic_limit_isSet;
}

bool Ezsigntemplatepublic_ListElement::is_i_ezsigntemplatepublic_limit_Valid() const{
    return m_i_ezsigntemplatepublic_limit_isValid;
}

qint32 Ezsigntemplatepublic_ListElement::getIEzsigntemplatepublicLimitexceeded() const {
    return m_i_ezsigntemplatepublic_limitexceeded;
}
void Ezsigntemplatepublic_ListElement::setIEzsigntemplatepublicLimitexceeded(const qint32 &i_ezsigntemplatepublic_limitexceeded) {
    m_i_ezsigntemplatepublic_limitexceeded = i_ezsigntemplatepublic_limitexceeded;
    m_i_ezsigntemplatepublic_limitexceeded_isSet = true;
}

bool Ezsigntemplatepublic_ListElement::is_i_ezsigntemplatepublic_limitexceeded_Set() const{
    return m_i_ezsigntemplatepublic_limitexceeded_isSet;
}

bool Ezsigntemplatepublic_ListElement::is_i_ezsigntemplatepublic_limitexceeded_Valid() const{
    return m_i_ezsigntemplatepublic_limitexceeded_isValid;
}

QString Ezsigntemplatepublic_ListElement::getDtEzsigntemplatepublicLimitexceededsince() const {
    return m_dt_ezsigntemplatepublic_limitexceededsince;
}
void Ezsigntemplatepublic_ListElement::setDtEzsigntemplatepublicLimitexceededsince(const QString &dt_ezsigntemplatepublic_limitexceededsince) {
    m_dt_ezsigntemplatepublic_limitexceededsince = dt_ezsigntemplatepublic_limitexceededsince;
    m_dt_ezsigntemplatepublic_limitexceededsince_isSet = true;
}

bool Ezsigntemplatepublic_ListElement::is_dt_ezsigntemplatepublic_limitexceededsince_Set() const{
    return m_dt_ezsigntemplatepublic_limitexceededsince_isSet;
}

bool Ezsigntemplatepublic_ListElement::is_dt_ezsigntemplatepublic_limitexceededsince_Valid() const{
    return m_dt_ezsigntemplatepublic_limitexceededsince_isValid;
}

qint32 Ezsigntemplatepublic_ListElement::getIEzsignfolder() const {
    return m_i_ezsignfolder;
}
void Ezsigntemplatepublic_ListElement::setIEzsignfolder(const qint32 &i_ezsignfolder) {
    m_i_ezsignfolder = i_ezsignfolder;
    m_i_ezsignfolder_isSet = true;
}

bool Ezsigntemplatepublic_ListElement::is_i_ezsignfolder_Set() const{
    return m_i_ezsignfolder_isSet;
}

bool Ezsigntemplatepublic_ListElement::is_i_ezsignfolder_Valid() const{
    return m_i_ezsignfolder_isValid;
}

qint32 Ezsigntemplatepublic_ListElement::getIEzsigndocument() const {
    return m_i_ezsigndocument;
}
void Ezsigntemplatepublic_ListElement::setIEzsigndocument(const qint32 &i_ezsigndocument) {
    m_i_ezsigndocument = i_ezsigndocument;
    m_i_ezsigndocument_isSet = true;
}

bool Ezsigntemplatepublic_ListElement::is_i_ezsigndocument_Set() const{
    return m_i_ezsigndocument_isSet;
}

bool Ezsigntemplatepublic_ListElement::is_i_ezsigndocument_Valid() const{
    return m_i_ezsigndocument_isValid;
}

QString Ezsigntemplatepublic_ListElement::getSEzsigntemplatepublicEzsigntemplatedescription() const {
    return m_s_ezsigntemplatepublic_ezsigntemplatedescription;
}
void Ezsigntemplatepublic_ListElement::setSEzsigntemplatepublicEzsigntemplatedescription(const QString &s_ezsigntemplatepublic_ezsigntemplatedescription) {
    m_s_ezsigntemplatepublic_ezsigntemplatedescription = s_ezsigntemplatepublic_ezsigntemplatedescription;
    m_s_ezsigntemplatepublic_ezsigntemplatedescription_isSet = true;
}

bool Ezsigntemplatepublic_ListElement::is_s_ezsigntemplatepublic_ezsigntemplatedescription_Set() const{
    return m_s_ezsigntemplatepublic_ezsigntemplatedescription_isSet;
}

bool Ezsigntemplatepublic_ListElement::is_s_ezsigntemplatepublic_ezsigntemplatedescription_Valid() const{
    return m_s_ezsigntemplatepublic_ezsigntemplatedescription_isValid;
}

bool Ezsigntemplatepublic_ListElement::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_pki_ezsigntemplatepublic_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fki_ezsignfoldertype_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s_ezsignfoldertype_name_x_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fki_userlogintype_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fki_ezsigntemplate_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fki_ezsigntemplatepackage_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s_ezsigntemplatepublic_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_b_ezsigntemplatepublic_isactive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_t_ezsigntemplatepublic_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_e_ezsigntemplatepublic_limittype.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_i_ezsigntemplatepublic_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_i_ezsigntemplatepublic_limitexceeded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dt_ezsigntemplatepublic_limitexceededsince_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_i_ezsignfolder_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_i_ezsigndocument_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s_ezsigntemplatepublic_ezsigntemplatedescription_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool Ezsigntemplatepublic_ListElement::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_pki_ezsigntemplatepublic_id_isValid && m_fki_ezsignfoldertype_id_isValid && m_s_ezsignfoldertype_name_x_isValid && m_fki_userlogintype_id_isValid && m_s_ezsigntemplatepublic_description_isValid && m_b_ezsigntemplatepublic_isactive_isValid && m_t_ezsigntemplatepublic_note_isValid && m_e_ezsigntemplatepublic_limittype_isValid && m_i_ezsigntemplatepublic_limit_isValid && m_i_ezsigntemplatepublic_limitexceeded_isValid && m_dt_ezsigntemplatepublic_limitexceededsince_isValid && m_i_ezsignfolder_isValid && m_i_ezsigndocument_isValid && m_s_ezsigntemplatepublic_ezsigntemplatedescription_isValid && true;
}

} // namespace Ezmaxapi
