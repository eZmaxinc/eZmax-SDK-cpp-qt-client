/**
 * eZmax API Definition
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIXxxx.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIXxxx::OAIXxxx(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIXxxx::OAIXxxx() {
    this->initializeModel();
}

OAIXxxx::~OAIXxxx() {}

void OAIXxxx::initializeModel() {

    m_foo_isSet = false;
    m_foo_isValid = false;

    m_bar_isSet = false;
    m_bar_isValid = false;
}

void OAIXxxx::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIXxxx::fromJsonObject(QJsonObject json) {

    m_foo_isValid = ::OpenAPI::fromJsonValue(foo, json[QString("foo")]);
    m_foo_isSet = !json[QString("foo")].isNull() && m_foo_isValid;

    m_bar_isValid = ::OpenAPI::fromJsonValue(bar, json[QString("bar")]);
    m_bar_isSet = !json[QString("bar")].isNull() && m_bar_isValid;
}

QString OAIXxxx::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIXxxx::asJsonObject() const {
    QJsonObject obj;
    if (m_foo_isSet) {
        obj.insert(QString("foo"), ::OpenAPI::toJsonValue(foo));
    }
    if (m_bar_isSet) {
        obj.insert(QString("bar"), ::OpenAPI::toJsonValue(bar));
    }
    return obj;
}

qint32 OAIXxxx::getFoo() const {
    return foo;
}
void OAIXxxx::setFoo(const qint32 &foo) {
    this->foo = foo;
    this->m_foo_isSet = true;
}

bool OAIXxxx::is_foo_Set() const{
    return m_foo_isSet;
}

bool OAIXxxx::is_foo_Valid() const{
    return m_foo_isValid;
}

qint32 OAIXxxx::getBar() const {
    return bar;
}
void OAIXxxx::setBar(const qint32 &bar) {
    this->bar = bar;
    this->m_bar_isSet = true;
}

bool OAIXxxx::is_bar_Set() const{
    return m_bar_isSet;
}

bool OAIXxxx::is_bar_Valid() const{
    return m_bar_isValid;
}

bool OAIXxxx::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_foo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bar_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIXxxx::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_foo_isValid && m_bar_isValid && true;
}

} // namespace OpenAPI
