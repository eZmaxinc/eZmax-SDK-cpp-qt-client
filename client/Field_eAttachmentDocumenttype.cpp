/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "Field_eAttachmentDocumenttype.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "Helpers.h"

namespace Ezmaxapi {

Field_eAttachmentDocumenttype::Field_eAttachmentDocumenttype(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

Field_eAttachmentDocumenttype::Field_eAttachmentDocumenttype() {
    this->initializeModel();
}

Field_eAttachmentDocumenttype::~Field_eAttachmentDocumenttype() {}

void Field_eAttachmentDocumenttype::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eField_eAttachmentDocumenttype::INVALID_VALUE_OPENAPI_GENERATED;
}

void Field_eAttachmentDocumenttype::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Adjustment", Qt::CaseInsensitive) == 0) {
        m_value = eField_eAttachmentDocumenttype::ADJUSTMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Agent", Qt::CaseInsensitive) == 0) {
        m_value = eField_eAttachmentDocumenttype::AGENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Bankaccount", Qt::CaseInsensitive) == 0) {
        m_value = eField_eAttachmentDocumenttype::BANKACCOUNT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Broker", Qt::CaseInsensitive) == 0) {
        m_value = eField_eAttachmentDocumenttype::BROKER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Buyercontract", Qt::CaseInsensitive) == 0) {
        m_value = eField_eAttachmentDocumenttype::BUYERCONTRACT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Commissionadvance", Qt::CaseInsensitive) == 0) {
        m_value = eField_eAttachmentDocumenttype::COMMISSIONADVANCE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Communication", Qt::CaseInsensitive) == 0) {
        m_value = eField_eAttachmentDocumenttype::COMMUNICATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Customer", Qt::CaseInsensitive) == 0) {
        m_value = eField_eAttachmentDocumenttype::CUSTOMER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Customertemplate", Qt::CaseInsensitive) == 0) {
        m_value = eField_eAttachmentDocumenttype::CUSTOMERTEMPLATE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Deposit", Qt::CaseInsensitive) == 0) {
        m_value = eField_eAttachmentDocumenttype::DEPOSIT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Deposittransitcheque", Qt::CaseInsensitive) == 0) {
        m_value = eField_eAttachmentDocumenttype::DEPOSITTRANSITCHEQUE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Disclosure", Qt::CaseInsensitive) == 0) {
        m_value = eField_eAttachmentDocumenttype::DISCLOSURE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Electronicfundstransfer", Qt::CaseInsensitive) == 0) {
        m_value = eField_eAttachmentDocumenttype::ELECTRONICFUNDSTRANSFER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Employee", Qt::CaseInsensitive) == 0) {
        m_value = eField_eAttachmentDocumenttype::EMPLOYEE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Externalbroker", Qt::CaseInsensitive) == 0) {
        m_value = eField_eAttachmentDocumenttype::EXTERNALBROKER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Ezcomadvanceserver", Qt::CaseInsensitive) == 0) {
        m_value = eField_eAttachmentDocumenttype::EZCOMADVANCESERVER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Ezcomcompany", Qt::CaseInsensitive) == 0) {
        m_value = eField_eAttachmentDocumenttype::EZCOMCOMPANY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Ezsigndocument", Qt::CaseInsensitive) == 0) {
        m_value = eField_eAttachmentDocumenttype::EZSIGNDOCUMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EzsigndocumentProof", Qt::CaseInsensitive) == 0) {
        m_value = eField_eAttachmentDocumenttype::EZSIGNDOCUMENTPROOF;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EzsigndocumentProofdocument", Qt::CaseInsensitive) == 0) {
        m_value = eField_eAttachmentDocumenttype::EZSIGNDOCUMENTPROOFDOCUMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Ezsigndocumentgroup", Qt::CaseInsensitive) == 0) {
        m_value = eField_eAttachmentDocumenttype::EZSIGNDOCUMENTGROUP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EzsigndocumentgroupProof", Qt::CaseInsensitive) == 0) {
        m_value = eField_eAttachmentDocumenttype::EZSIGNDOCUMENTGROUPPROOF;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EzsigndocumentgroupProofdocument", Qt::CaseInsensitive) == 0) {
        m_value = eField_eAttachmentDocumenttype::EZSIGNDOCUMENTGROUPPROOFDOCUMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EzsigndocumentAttachment", Qt::CaseInsensitive) == 0) {
        m_value = eField_eAttachmentDocumenttype::EZSIGNDOCUMENTATTACHMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Folder", Qt::CaseInsensitive) == 0) {
        m_value = eField_eAttachmentDocumenttype::FOLDER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Franchiseagence", Qt::CaseInsensitive) == 0) {
        m_value = eField_eAttachmentDocumenttype::FRANCHISEAGENCE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Franchisebroker", Qt::CaseInsensitive) == 0) {
        m_value = eField_eAttachmentDocumenttype::FRANCHISEBROKER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Franchisecomplaint", Qt::CaseInsensitive) == 0) {
        m_value = eField_eAttachmentDocumenttype::FRANCHISECOMPLAINT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Franchisefranchise", Qt::CaseInsensitive) == 0) {
        m_value = eField_eAttachmentDocumenttype::FRANCHISEFRANCHISE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Franchiseoffice", Qt::CaseInsensitive) == 0) {
        m_value = eField_eAttachmentDocumenttype::FRANCHISEOFFICE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Ghacqcontract", Qt::CaseInsensitive) == 0) {
        m_value = eField_eAttachmentDocumenttype::GHACQCONTRACT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Inscription", Qt::CaseInsensitive) == 0) {
        m_value = eField_eAttachmentDocumenttype::INSCRIPTION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Inscriptionnotauthenticated", Qt::CaseInsensitive) == 0) {
        m_value = eField_eAttachmentDocumenttype::INSCRIPTIONNOTAUTHENTICATED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Inscriptiontemp", Qt::CaseInsensitive) == 0) {
        m_value = eField_eAttachmentDocumenttype::INSCRIPTIONTEMP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Invoice", Qt::CaseInsensitive) == 0) {
        m_value = eField_eAttachmentDocumenttype::INVOICE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Lead", Qt::CaseInsensitive) == 0) {
        m_value = eField_eAttachmentDocumenttype::LEAD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Marketingfollow", Qt::CaseInsensitive) == 0) {
        m_value = eField_eAttachmentDocumenttype::MARKETINGFOLLOW;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Marketingprogram", Qt::CaseInsensitive) == 0) {
        m_value = eField_eAttachmentDocumenttype::MARKETINGPROGRAM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Notary", Qt::CaseInsensitive) == 0) {
        m_value = eField_eAttachmentDocumenttype::NOTARY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Officetaxreport", Qt::CaseInsensitive) == 0) {
        m_value = eField_eAttachmentDocumenttype::OFFICETAXREPORT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Otherincome", Qt::CaseInsensitive) == 0) {
        m_value = eField_eAttachmentDocumenttype::OTHERINCOME;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Paymentpreparation", Qt::CaseInsensitive) == 0) {
        m_value = eField_eAttachmentDocumenttype::PAYMENTPREPARATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Purchase", Qt::CaseInsensitive) == 0) {
        m_value = eField_eAttachmentDocumenttype::PURCHASE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Reconciliation", Qt::CaseInsensitive) == 0) {
        m_value = eField_eAttachmentDocumenttype::RECONCILIATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Rejectedoffertopurchase", Qt::CaseInsensitive) == 0) {
        m_value = eField_eAttachmentDocumenttype::REJECTEDOFFERTOPURCHASE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Salary", Qt::CaseInsensitive) == 0) {
        m_value = eField_eAttachmentDocumenttype::SALARY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Supplier", Qt::CaseInsensitive) == 0) {
        m_value = eField_eAttachmentDocumenttype::SUPPLIER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Template", Qt::CaseInsensitive) == 0) {
        m_value = eField_eAttachmentDocumenttype::TEMPLATE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Tranqcontract", Qt::CaseInsensitive) == 0) {
        m_value = eField_eAttachmentDocumenttype::TRANQCONTRACT;
        m_value_isSet = m_value_isValid = true;
    }
}

void Field_eAttachmentDocumenttype::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString Field_eAttachmentDocumenttype::asJson() const {
    
    QString val;
    switch (m_value){
        case eField_eAttachmentDocumenttype::ADJUSTMENT:
            val = "Adjustment";
            break;
        case eField_eAttachmentDocumenttype::AGENT:
            val = "Agent";
            break;
        case eField_eAttachmentDocumenttype::BANKACCOUNT:
            val = "Bankaccount";
            break;
        case eField_eAttachmentDocumenttype::BROKER:
            val = "Broker";
            break;
        case eField_eAttachmentDocumenttype::BUYERCONTRACT:
            val = "Buyercontract";
            break;
        case eField_eAttachmentDocumenttype::COMMISSIONADVANCE:
            val = "Commissionadvance";
            break;
        case eField_eAttachmentDocumenttype::COMMUNICATION:
            val = "Communication";
            break;
        case eField_eAttachmentDocumenttype::CUSTOMER:
            val = "Customer";
            break;
        case eField_eAttachmentDocumenttype::CUSTOMERTEMPLATE:
            val = "Customertemplate";
            break;
        case eField_eAttachmentDocumenttype::DEPOSIT:
            val = "Deposit";
            break;
        case eField_eAttachmentDocumenttype::DEPOSITTRANSITCHEQUE:
            val = "Deposittransitcheque";
            break;
        case eField_eAttachmentDocumenttype::DISCLOSURE:
            val = "Disclosure";
            break;
        case eField_eAttachmentDocumenttype::ELECTRONICFUNDSTRANSFER:
            val = "Electronicfundstransfer";
            break;
        case eField_eAttachmentDocumenttype::EMPLOYEE:
            val = "Employee";
            break;
        case eField_eAttachmentDocumenttype::EXTERNALBROKER:
            val = "Externalbroker";
            break;
        case eField_eAttachmentDocumenttype::EZCOMADVANCESERVER:
            val = "Ezcomadvanceserver";
            break;
        case eField_eAttachmentDocumenttype::EZCOMCOMPANY:
            val = "Ezcomcompany";
            break;
        case eField_eAttachmentDocumenttype::EZSIGNDOCUMENT:
            val = "Ezsigndocument";
            break;
        case eField_eAttachmentDocumenttype::EZSIGNDOCUMENTPROOF:
            val = "EzsigndocumentProof";
            break;
        case eField_eAttachmentDocumenttype::EZSIGNDOCUMENTPROOFDOCUMENT:
            val = "EzsigndocumentProofdocument";
            break;
        case eField_eAttachmentDocumenttype::EZSIGNDOCUMENTGROUP:
            val = "Ezsigndocumentgroup";
            break;
        case eField_eAttachmentDocumenttype::EZSIGNDOCUMENTGROUPPROOF:
            val = "EzsigndocumentgroupProof";
            break;
        case eField_eAttachmentDocumenttype::EZSIGNDOCUMENTGROUPPROOFDOCUMENT:
            val = "EzsigndocumentgroupProofdocument";
            break;
        case eField_eAttachmentDocumenttype::EZSIGNDOCUMENTATTACHMENT:
            val = "EzsigndocumentAttachment";
            break;
        case eField_eAttachmentDocumenttype::FOLDER:
            val = "Folder";
            break;
        case eField_eAttachmentDocumenttype::FRANCHISEAGENCE:
            val = "Franchiseagence";
            break;
        case eField_eAttachmentDocumenttype::FRANCHISEBROKER:
            val = "Franchisebroker";
            break;
        case eField_eAttachmentDocumenttype::FRANCHISECOMPLAINT:
            val = "Franchisecomplaint";
            break;
        case eField_eAttachmentDocumenttype::FRANCHISEFRANCHISE:
            val = "Franchisefranchise";
            break;
        case eField_eAttachmentDocumenttype::FRANCHISEOFFICE:
            val = "Franchiseoffice";
            break;
        case eField_eAttachmentDocumenttype::GHACQCONTRACT:
            val = "Ghacqcontract";
            break;
        case eField_eAttachmentDocumenttype::INSCRIPTION:
            val = "Inscription";
            break;
        case eField_eAttachmentDocumenttype::INSCRIPTIONNOTAUTHENTICATED:
            val = "Inscriptionnotauthenticated";
            break;
        case eField_eAttachmentDocumenttype::INSCRIPTIONTEMP:
            val = "Inscriptiontemp";
            break;
        case eField_eAttachmentDocumenttype::INVOICE:
            val = "Invoice";
            break;
        case eField_eAttachmentDocumenttype::LEAD:
            val = "Lead";
            break;
        case eField_eAttachmentDocumenttype::MARKETINGFOLLOW:
            val = "Marketingfollow";
            break;
        case eField_eAttachmentDocumenttype::MARKETINGPROGRAM:
            val = "Marketingprogram";
            break;
        case eField_eAttachmentDocumenttype::NOTARY:
            val = "Notary";
            break;
        case eField_eAttachmentDocumenttype::OFFICETAXREPORT:
            val = "Officetaxreport";
            break;
        case eField_eAttachmentDocumenttype::OTHERINCOME:
            val = "Otherincome";
            break;
        case eField_eAttachmentDocumenttype::PAYMENTPREPARATION:
            val = "Paymentpreparation";
            break;
        case eField_eAttachmentDocumenttype::PURCHASE:
            val = "Purchase";
            break;
        case eField_eAttachmentDocumenttype::RECONCILIATION:
            val = "Reconciliation";
            break;
        case eField_eAttachmentDocumenttype::REJECTEDOFFERTOPURCHASE:
            val = "Rejectedoffertopurchase";
            break;
        case eField_eAttachmentDocumenttype::SALARY:
            val = "Salary";
            break;
        case eField_eAttachmentDocumenttype::SUPPLIER:
            val = "Supplier";
            break;
        case eField_eAttachmentDocumenttype::TEMPLATE:
            val = "Template";
            break;
        case eField_eAttachmentDocumenttype::TRANQCONTRACT:
            val = "Tranqcontract";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue Field_eAttachmentDocumenttype::asJsonValue() const {
    
    return QJsonValue(asJson());
}


Field_eAttachmentDocumenttype::eField_eAttachmentDocumenttype Field_eAttachmentDocumenttype::getValue() const {
    return m_value;
}

void Field_eAttachmentDocumenttype::setValue(const Field_eAttachmentDocumenttype::eField_eAttachmentDocumenttype& value){
    m_value = value;
    m_value_isSet = true;
}
bool Field_eAttachmentDocumenttype::isSet() const {
    
    return m_value_isSet;
}

bool Field_eAttachmentDocumenttype::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace Ezmaxapi
