/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "Field_eAttachmentlogType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "Helpers.h"

namespace Ezmaxapi {

Field_eAttachmentlogType::Field_eAttachmentlogType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

Field_eAttachmentlogType::Field_eAttachmentlogType() {
    this->initializeModel();
}

Field_eAttachmentlogType::~Field_eAttachmentlogType() {}

void Field_eAttachmentlogType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eField_eAttachmentlogType::INVALID_VALUE_OPENAPI_GENERATED;
}

void Field_eAttachmentlogType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("AutoValidation", Qt::CaseInsensitive) == 0) {
        m_value = eField_eAttachmentlogType::AUTOVALIDATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CopyFrom", Qt::CaseInsensitive) == 0) {
        m_value = eField_eAttachmentlogType::COPYFROM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CopyTo", Qt::CaseInsensitive) == 0) {
        m_value = eField_eAttachmentlogType::COPYTO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CopyToEzsign", Qt::CaseInsensitive) == 0) {
        m_value = eField_eAttachmentlogType::COPYTOEZSIGN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CreateByEzsign", Qt::CaseInsensitive) == 0) {
        m_value = eField_eAttachmentlogType::CREATEBYEZSIGN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Download", Qt::CaseInsensitive) == 0) {
        m_value = eField_eAttachmentlogType::DOWNLOAD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Deleted", Qt::CaseInsensitive) == 0) {
        m_value = eField_eAttachmentlogType::DELETED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Destroyed", Qt::CaseInsensitive) == 0) {
        m_value = eField_eAttachmentlogType::DESTROYED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Email", Qt::CaseInsensitive) == 0) {
        m_value = eField_eAttachmentlogType::EMAIL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EmailCC", Qt::CaseInsensitive) == 0) {
        m_value = eField_eAttachmentlogType::EMAILCC;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EmailCCI", Qt::CaseInsensitive) == 0) {
        m_value = eField_eAttachmentlogType::EMAILCCI;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Fax", Qt::CaseInsensitive) == 0) {
        m_value = eField_eAttachmentlogType::FAX;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ImportedFromExternalSystem", Qt::CaseInsensitive) == 0) {
        m_value = eField_eAttachmentlogType::IMPORTEDFROMEXTERNALSYSTEM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ImportedFromEZA", Qt::CaseInsensitive) == 0) {
        m_value = eField_eAttachmentlogType::IMPORTEDFROMEZA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ImportedFromFaltour", Qt::CaseInsensitive) == 0) {
        m_value = eField_eAttachmentlogType::IMPORTEDFROMFALTOUR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ImportedFromLonewolf", Qt::CaseInsensitive) == 0) {
        m_value = eField_eAttachmentlogType::IMPORTEDFROMLONEWOLF;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ImportedFromProspects", Qt::CaseInsensitive) == 0) {
        m_value = eField_eAttachmentlogType::IMPORTEDFROMPROSPECTS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Move", Qt::CaseInsensitive) == 0) {
        m_value = eField_eAttachmentlogType::MOVE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("OpenFromEmail", Qt::CaseInsensitive) == 0) {
        m_value = eField_eAttachmentlogType::OPENFROMEMAIL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Purged", Qt::CaseInsensitive) == 0) {
        m_value = eField_eAttachmentlogType::PURGED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Reject", Qt::CaseInsensitive) == 0) {
        m_value = eField_eAttachmentlogType::REJECT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Rename", Qt::CaseInsensitive) == 0) {
        m_value = eField_eAttachmentlogType::RENAME;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Restore", Qt::CaseInsensitive) == 0) {
        m_value = eField_eAttachmentlogType::RESTORE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Scanned", Qt::CaseInsensitive) == 0) {
        m_value = eField_eAttachmentlogType::SCANNED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SendToGED", Qt::CaseInsensitive) == 0) {
        m_value = eField_eAttachmentlogType::SENDTOGED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UnvalidatedBy", Qt::CaseInsensitive) == 0) {
        m_value = eField_eAttachmentlogType::UNVALIDATEDBY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Upload", Qt::CaseInsensitive) == 0) {
        m_value = eField_eAttachmentlogType::UPLOAD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ValidatedBy", Qt::CaseInsensitive) == 0) {
        m_value = eField_eAttachmentlogType::VALIDATEDBY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VetinfoUpload", Qt::CaseInsensitive) == 0) {
        m_value = eField_eAttachmentlogType::VETINFOUPLOAD;
        m_value_isSet = m_value_isValid = true;
    }
}

void Field_eAttachmentlogType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString Field_eAttachmentlogType::asJson() const {
    
    QString val;
    switch (m_value){
        case eField_eAttachmentlogType::AUTOVALIDATION:
            val = "AutoValidation";
            break;
        case eField_eAttachmentlogType::COPYFROM:
            val = "CopyFrom";
            break;
        case eField_eAttachmentlogType::COPYTO:
            val = "CopyTo";
            break;
        case eField_eAttachmentlogType::COPYTOEZSIGN:
            val = "CopyToEzsign";
            break;
        case eField_eAttachmentlogType::CREATEBYEZSIGN:
            val = "CreateByEzsign";
            break;
        case eField_eAttachmentlogType::DOWNLOAD:
            val = "Download";
            break;
        case eField_eAttachmentlogType::DELETED:
            val = "Deleted";
            break;
        case eField_eAttachmentlogType::DESTROYED:
            val = "Destroyed";
            break;
        case eField_eAttachmentlogType::EMAIL:
            val = "Email";
            break;
        case eField_eAttachmentlogType::EMAILCC:
            val = "EmailCC";
            break;
        case eField_eAttachmentlogType::EMAILCCI:
            val = "EmailCCI";
            break;
        case eField_eAttachmentlogType::FAX:
            val = "Fax";
            break;
        case eField_eAttachmentlogType::IMPORTEDFROMEXTERNALSYSTEM:
            val = "ImportedFromExternalSystem";
            break;
        case eField_eAttachmentlogType::IMPORTEDFROMEZA:
            val = "ImportedFromEZA";
            break;
        case eField_eAttachmentlogType::IMPORTEDFROMFALTOUR:
            val = "ImportedFromFaltour";
            break;
        case eField_eAttachmentlogType::IMPORTEDFROMLONEWOLF:
            val = "ImportedFromLonewolf";
            break;
        case eField_eAttachmentlogType::IMPORTEDFROMPROSPECTS:
            val = "ImportedFromProspects";
            break;
        case eField_eAttachmentlogType::MOVE:
            val = "Move";
            break;
        case eField_eAttachmentlogType::OPENFROMEMAIL:
            val = "OpenFromEmail";
            break;
        case eField_eAttachmentlogType::PURGED:
            val = "Purged";
            break;
        case eField_eAttachmentlogType::REJECT:
            val = "Reject";
            break;
        case eField_eAttachmentlogType::RENAME:
            val = "Rename";
            break;
        case eField_eAttachmentlogType::RESTORE:
            val = "Restore";
            break;
        case eField_eAttachmentlogType::SCANNED:
            val = "Scanned";
            break;
        case eField_eAttachmentlogType::SENDTOGED:
            val = "SendToGED";
            break;
        case eField_eAttachmentlogType::UNVALIDATEDBY:
            val = "UnvalidatedBy";
            break;
        case eField_eAttachmentlogType::UPLOAD:
            val = "Upload";
            break;
        case eField_eAttachmentlogType::VALIDATEDBY:
            val = "ValidatedBy";
            break;
        case eField_eAttachmentlogType::VETINFOUPLOAD:
            val = "VetinfoUpload";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue Field_eAttachmentlogType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


Field_eAttachmentlogType::eField_eAttachmentlogType Field_eAttachmentlogType::getValue() const {
    return m_value;
}

void Field_eAttachmentlogType::setValue(const Field_eAttachmentlogType::eField_eAttachmentlogType& value){
    m_value = value;
    m_value_isSet = true;
}
bool Field_eAttachmentlogType::isSet() const {
    
    return m_value_isSet;
}

bool Field_eAttachmentlogType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace Ezmaxapi
