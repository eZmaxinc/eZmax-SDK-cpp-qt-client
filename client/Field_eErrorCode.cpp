/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "Field_eErrorCode.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "Helpers.h"

namespace Ezmaxapi {

Field_eErrorCode::Field_eErrorCode(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

Field_eErrorCode::Field_eErrorCode() {
    this->initializeModel();
}

Field_eErrorCode::~Field_eErrorCode() {}

void Field_eErrorCode::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eField_eErrorCode::INVALID_VALUE_OPENAPI_GENERATED;
}

void Field_eErrorCode::fromJson(QString jsonString) {
    
    if ( jsonString.compare("BADREQUEST", Qt::CaseInsensitive) == 0) {
        m_value = eField_eErrorCode::BADREQUEST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BADREQUEST_CLOCKSKEW", Qt::CaseInsensitive) == 0) {
        m_value = eField_eErrorCode::BADREQUEST_CLOCKSKEW;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNAUTHORIZED_BADAUTH", Qt::CaseInsensitive) == 0) {
        m_value = eField_eErrorCode::UNAUTHORIZED_BADAUTH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNAUTHORIZED_BADMFA", Qt::CaseInsensitive) == 0) {
        m_value = eField_eErrorCode::UNAUTHORIZED_BADMFA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNAUTHORIZED_EXPIRED", Qt::CaseInsensitive) == 0) {
        m_value = eField_eErrorCode::UNAUTHORIZED_EXPIRED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNAUTHORIZED_REQUEST", Qt::CaseInsensitive) == 0) {
        m_value = eField_eErrorCode::UNAUTHORIZED_REQUEST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FORBIDDEN", Qt::CaseInsensitive) == 0) {
        m_value = eField_eErrorCode::FORBIDDEN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FORBIDDEN_CONFIGURATION", Qt::CaseInsensitive) == 0) {
        m_value = eField_eErrorCode::FORBIDDEN_CONFIGURATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FORBIDDEN_MODULE", Qt::CaseInsensitive) == 0) {
        m_value = eField_eErrorCode::FORBIDDEN_MODULE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FORBIDDEN_NOACCESS", Qt::CaseInsensitive) == 0) {
        m_value = eField_eErrorCode::FORBIDDEN_NOACCESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FORBIDDEN_PERMISSION", Qt::CaseInsensitive) == 0) {
        m_value = eField_eErrorCode::FORBIDDEN_PERMISSION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FORBIDDEN_SUBSCRIPTION", Qt::CaseInsensitive) == 0) {
        m_value = eField_eErrorCode::FORBIDDEN_SUBSCRIPTION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FORBIDDEN_USERTYPE", Qt::CaseInsensitive) == 0) {
        m_value = eField_eErrorCode::FORBIDDEN_USERTYPE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FORBIDDEN_USER_ORIGIN_EXTERNAL", Qt::CaseInsensitive) == 0) {
        m_value = eField_eErrorCode::FORBIDDEN_USER_ORIGIN_EXTERNAL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NOTFOUND", Qt::CaseInsensitive) == 0) {
        m_value = eField_eErrorCode::NOTFOUND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NOTFOUND_OBJECT", Qt::CaseInsensitive) == 0) {
        m_value = eField_eErrorCode::NOTFOUND_OBJECT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NOTFOUND_ROUTE", Qt::CaseInsensitive) == 0) {
        m_value = eField_eErrorCode::NOTFOUND_ROUTE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("METHODNOTALLOWED", Qt::CaseInsensitive) == 0) {
        m_value = eField_eErrorCode::METHODNOTALLOWED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NOTACCEPTABLE_CONTENT", Qt::CaseInsensitive) == 0) {
        m_value = eField_eErrorCode::NOTACCEPTABLE_CONTENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NOTACCEPTABLE_LANGUAGE", Qt::CaseInsensitive) == 0) {
        m_value = eField_eErrorCode::NOTACCEPTABLE_LANGUAGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNPROCESSABLEENTITY_ACTIVESESSION_ALREADY_CLONING", Qt::CaseInsensitive) == 0) {
        m_value = eField_eErrorCode::UNPROCESSABLEENTITY_ACTIVESESSION_ALREADY_CLONING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNPROCESSABLEENTITY_CANNOTDELETE", Qt::CaseInsensitive) == 0) {
        m_value = eField_eErrorCode::UNPROCESSABLEENTITY_CANNOTDELETE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNPROCESSABLEENTITY_CANNOTMODIFY", Qt::CaseInsensitive) == 0) {
        m_value = eField_eErrorCode::UNPROCESSABLEENTITY_CANNOTMODIFY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNPROCESSABLEENTITY_CHANGEPASSWORD_INVALID_CURRENT", Qt::CaseInsensitive) == 0) {
        m_value = eField_eErrorCode::UNPROCESSABLEENTITY_CHANGEPASSWORD_INVALID_CURRENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNPROCESSABLEENTITY_CHANGEPASSWORD_SAME", Qt::CaseInsensitive) == 0) {
        m_value = eField_eErrorCode::UNPROCESSABLEENTITY_CHANGEPASSWORD_SAME;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNPROCESSABLEENTITY_DATA_MISSING", Qt::CaseInsensitive) == 0) {
        m_value = eField_eErrorCode::UNPROCESSABLEENTITY_DATA_MISSING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNPROCESSABLEENTITY_DATA_UNIQUE", Qt::CaseInsensitive) == 0) {
        m_value = eField_eErrorCode::UNPROCESSABLEENTITY_DATA_UNIQUE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNPROCESSABLEENTITY_DATA_VALIDATION", Qt::CaseInsensitive) == 0) {
        m_value = eField_eErrorCode::UNPROCESSABLEENTITY_DATA_VALIDATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNPROCESSABLEENTITY_DATA_OUTOFBOUND", Qt::CaseInsensitive) == 0) {
        m_value = eField_eErrorCode::UNPROCESSABLEENTITY_DATA_OUTOFBOUND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNPROCESSABLEENTITY_DOWNLOAD_ERROR", Qt::CaseInsensitive) == 0) {
        m_value = eField_eErrorCode::UNPROCESSABLEENTITY_DOWNLOAD_ERROR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNPROCESSABLEENTITY_EZSIGNFORM_VALIDATION", Qt::CaseInsensitive) == 0) {
        m_value = eField_eErrorCode::UNPROCESSABLEENTITY_EZSIGNFORM_VALIDATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNPROCESSABLEENTITY_EZSIGNSIGNERCONNECTED", Qt::CaseInsensitive) == 0) {
        m_value = eField_eErrorCode::UNPROCESSABLEENTITY_EZSIGNSIGNERCONNECTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNPROCESSABLEENTITY_NOTHINGTODO", Qt::CaseInsensitive) == 0) {
        m_value = eField_eErrorCode::UNPROCESSABLEENTITY_NOTHINGTODO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNPROCESSABLEENTITY_NOTREADY", Qt::CaseInsensitive) == 0) {
        m_value = eField_eErrorCode::UNPROCESSABLEENTITY_NOTREADY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNPROCESSABLEENTITY_PDF_FORM", Qt::CaseInsensitive) == 0) {
        m_value = eField_eErrorCode::UNPROCESSABLEENTITY_PDF_FORM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNPROCESSABLEENTITY_PDF_SIGNATURE", Qt::CaseInsensitive) == 0) {
        m_value = eField_eErrorCode::UNPROCESSABLEENTITY_PDF_SIGNATURE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNPROCESSABLEENTITY_PDF_FORM_AND_SIGNATURE", Qt::CaseInsensitive) == 0) {
        m_value = eField_eErrorCode::UNPROCESSABLEENTITY_PDF_FORM_AND_SIGNATURE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNPROCESSABLEENTITY_PDF_INCOMPATIBLE", Qt::CaseInsensitive) == 0) {
        m_value = eField_eErrorCode::UNPROCESSABLEENTITY_PDF_INCOMPATIBLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNPROCESSABLEENTITY_PDF_PASSWORD", Qt::CaseInsensitive) == 0) {
        m_value = eField_eErrorCode::UNPROCESSABLEENTITY_PDF_PASSWORD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNPROCESSABLEENTITY_PDF_WRONG_PASSWORD", Qt::CaseInsensitive) == 0) {
        m_value = eField_eErrorCode::UNPROCESSABLEENTITY_PDF_WRONG_PASSWORD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNPROCESSABLEENTITY_PDF_REPAIRABLE", Qt::CaseInsensitive) == 0) {
        m_value = eField_eErrorCode::UNPROCESSABLEENTITY_PDF_REPAIRABLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNPROCESSABLEENTITY_PDF_XFA", Qt::CaseInsensitive) == 0) {
        m_value = eField_eErrorCode::UNPROCESSABLEENTITY_PDF_XFA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNPROCESSABLEENTITY_TEMPLATE_MISMATCH", Qt::CaseInsensitive) == 0) {
        m_value = eField_eErrorCode::UNPROCESSABLEENTITY_TEMPLATE_MISMATCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNPROCESSABLEENTITY_UNMODIFIABLE_FIELD", Qt::CaseInsensitive) == 0) {
        m_value = eField_eErrorCode::UNPROCESSABLEENTITY_UNMODIFIABLE_FIELD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNPROCESSABLEENTITY_USER_STAGED", Qt::CaseInsensitive) == 0) {
        m_value = eField_eErrorCode::UNPROCESSABLEENTITY_USER_STAGED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TOOMANYREQUESTS", Qt::CaseInsensitive) == 0) {
        m_value = eField_eErrorCode::TOOMANYREQUESTS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TOOMANYREQUESTS_THIRDPARTY", Qt::CaseInsensitive) == 0) {
        m_value = eField_eErrorCode::TOOMANYREQUESTS_THIRDPARTY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ERROR_INTERNAL", Qt::CaseInsensitive) == 0) {
        m_value = eField_eErrorCode::ERROR_INTERNAL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ERROR_CONFIGURATION", Qt::CaseInsensitive) == 0) {
        m_value = eField_eErrorCode::ERROR_CONFIGURATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ERROR_NOTIMPLEMENTED", Qt::CaseInsensitive) == 0) {
        m_value = eField_eErrorCode::ERROR_NOTIMPLEMENTED;
        m_value_isSet = m_value_isValid = true;
    }
}

void Field_eErrorCode::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString Field_eErrorCode::asJson() const {
    
    QString val;
    switch (m_value){
        case eField_eErrorCode::BADREQUEST:
            val = "BADREQUEST";
            break;
        case eField_eErrorCode::BADREQUEST_CLOCKSKEW:
            val = "BADREQUEST_CLOCKSKEW";
            break;
        case eField_eErrorCode::UNAUTHORIZED_BADAUTH:
            val = "UNAUTHORIZED_BADAUTH";
            break;
        case eField_eErrorCode::UNAUTHORIZED_BADMFA:
            val = "UNAUTHORIZED_BADMFA";
            break;
        case eField_eErrorCode::UNAUTHORIZED_EXPIRED:
            val = "UNAUTHORIZED_EXPIRED";
            break;
        case eField_eErrorCode::UNAUTHORIZED_REQUEST:
            val = "UNAUTHORIZED_REQUEST";
            break;
        case eField_eErrorCode::FORBIDDEN:
            val = "FORBIDDEN";
            break;
        case eField_eErrorCode::FORBIDDEN_CONFIGURATION:
            val = "FORBIDDEN_CONFIGURATION";
            break;
        case eField_eErrorCode::FORBIDDEN_MODULE:
            val = "FORBIDDEN_MODULE";
            break;
        case eField_eErrorCode::FORBIDDEN_NOACCESS:
            val = "FORBIDDEN_NOACCESS";
            break;
        case eField_eErrorCode::FORBIDDEN_PERMISSION:
            val = "FORBIDDEN_PERMISSION";
            break;
        case eField_eErrorCode::FORBIDDEN_SUBSCRIPTION:
            val = "FORBIDDEN_SUBSCRIPTION";
            break;
        case eField_eErrorCode::FORBIDDEN_USERTYPE:
            val = "FORBIDDEN_USERTYPE";
            break;
        case eField_eErrorCode::FORBIDDEN_USER_ORIGIN_EXTERNAL:
            val = "FORBIDDEN_USER_ORIGIN_EXTERNAL";
            break;
        case eField_eErrorCode::NOTFOUND:
            val = "NOTFOUND";
            break;
        case eField_eErrorCode::NOTFOUND_OBJECT:
            val = "NOTFOUND_OBJECT";
            break;
        case eField_eErrorCode::NOTFOUND_ROUTE:
            val = "NOTFOUND_ROUTE";
            break;
        case eField_eErrorCode::METHODNOTALLOWED:
            val = "METHODNOTALLOWED";
            break;
        case eField_eErrorCode::NOTACCEPTABLE_CONTENT:
            val = "NOTACCEPTABLE_CONTENT";
            break;
        case eField_eErrorCode::NOTACCEPTABLE_LANGUAGE:
            val = "NOTACCEPTABLE_LANGUAGE";
            break;
        case eField_eErrorCode::UNPROCESSABLEENTITY_ACTIVESESSION_ALREADY_CLONING:
            val = "UNPROCESSABLEENTITY_ACTIVESESSION_ALREADY_CLONING";
            break;
        case eField_eErrorCode::UNPROCESSABLEENTITY_CANNOTDELETE:
            val = "UNPROCESSABLEENTITY_CANNOTDELETE";
            break;
        case eField_eErrorCode::UNPROCESSABLEENTITY_CANNOTMODIFY:
            val = "UNPROCESSABLEENTITY_CANNOTMODIFY";
            break;
        case eField_eErrorCode::UNPROCESSABLEENTITY_CHANGEPASSWORD_INVALID_CURRENT:
            val = "UNPROCESSABLEENTITY_CHANGEPASSWORD_INVALID_CURRENT";
            break;
        case eField_eErrorCode::UNPROCESSABLEENTITY_CHANGEPASSWORD_SAME:
            val = "UNPROCESSABLEENTITY_CHANGEPASSWORD_SAME";
            break;
        case eField_eErrorCode::UNPROCESSABLEENTITY_DATA_MISSING:
            val = "UNPROCESSABLEENTITY_DATA_MISSING";
            break;
        case eField_eErrorCode::UNPROCESSABLEENTITY_DATA_UNIQUE:
            val = "UNPROCESSABLEENTITY_DATA_UNIQUE";
            break;
        case eField_eErrorCode::UNPROCESSABLEENTITY_DATA_VALIDATION:
            val = "UNPROCESSABLEENTITY_DATA_VALIDATION";
            break;
        case eField_eErrorCode::UNPROCESSABLEENTITY_DATA_OUTOFBOUND:
            val = "UNPROCESSABLEENTITY_DATA_OUTOFBOUND";
            break;
        case eField_eErrorCode::UNPROCESSABLEENTITY_DOWNLOAD_ERROR:
            val = "UNPROCESSABLEENTITY_DOWNLOAD_ERROR";
            break;
        case eField_eErrorCode::UNPROCESSABLEENTITY_EZSIGNFORM_VALIDATION:
            val = "UNPROCESSABLEENTITY_EZSIGNFORM_VALIDATION";
            break;
        case eField_eErrorCode::UNPROCESSABLEENTITY_EZSIGNSIGNERCONNECTED:
            val = "UNPROCESSABLEENTITY_EZSIGNSIGNERCONNECTED";
            break;
        case eField_eErrorCode::UNPROCESSABLEENTITY_NOTHINGTODO:
            val = "UNPROCESSABLEENTITY_NOTHINGTODO";
            break;
        case eField_eErrorCode::UNPROCESSABLEENTITY_NOTREADY:
            val = "UNPROCESSABLEENTITY_NOTREADY";
            break;
        case eField_eErrorCode::UNPROCESSABLEENTITY_PDF_FORM:
            val = "UNPROCESSABLEENTITY_PDF_FORM";
            break;
        case eField_eErrorCode::UNPROCESSABLEENTITY_PDF_SIGNATURE:
            val = "UNPROCESSABLEENTITY_PDF_SIGNATURE";
            break;
        case eField_eErrorCode::UNPROCESSABLEENTITY_PDF_FORM_AND_SIGNATURE:
            val = "UNPROCESSABLEENTITY_PDF_FORM_AND_SIGNATURE";
            break;
        case eField_eErrorCode::UNPROCESSABLEENTITY_PDF_INCOMPATIBLE:
            val = "UNPROCESSABLEENTITY_PDF_INCOMPATIBLE";
            break;
        case eField_eErrorCode::UNPROCESSABLEENTITY_PDF_PASSWORD:
            val = "UNPROCESSABLEENTITY_PDF_PASSWORD";
            break;
        case eField_eErrorCode::UNPROCESSABLEENTITY_PDF_WRONG_PASSWORD:
            val = "UNPROCESSABLEENTITY_PDF_WRONG_PASSWORD";
            break;
        case eField_eErrorCode::UNPROCESSABLEENTITY_PDF_REPAIRABLE:
            val = "UNPROCESSABLEENTITY_PDF_REPAIRABLE";
            break;
        case eField_eErrorCode::UNPROCESSABLEENTITY_PDF_XFA:
            val = "UNPROCESSABLEENTITY_PDF_XFA";
            break;
        case eField_eErrorCode::UNPROCESSABLEENTITY_TEMPLATE_MISMATCH:
            val = "UNPROCESSABLEENTITY_TEMPLATE_MISMATCH";
            break;
        case eField_eErrorCode::UNPROCESSABLEENTITY_UNMODIFIABLE_FIELD:
            val = "UNPROCESSABLEENTITY_UNMODIFIABLE_FIELD";
            break;
        case eField_eErrorCode::UNPROCESSABLEENTITY_USER_STAGED:
            val = "UNPROCESSABLEENTITY_USER_STAGED";
            break;
        case eField_eErrorCode::TOOMANYREQUESTS:
            val = "TOOMANYREQUESTS";
            break;
        case eField_eErrorCode::TOOMANYREQUESTS_THIRDPARTY:
            val = "TOOMANYREQUESTS_THIRDPARTY";
            break;
        case eField_eErrorCode::ERROR_INTERNAL:
            val = "ERROR_INTERNAL";
            break;
        case eField_eErrorCode::ERROR_CONFIGURATION:
            val = "ERROR_CONFIGURATION";
            break;
        case eField_eErrorCode::ERROR_NOTIMPLEMENTED:
            val = "ERROR_NOTIMPLEMENTED";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue Field_eErrorCode::asJsonValue() const {
    
    return QJsonValue(asJson());
}


Field_eErrorCode::eField_eErrorCode Field_eErrorCode::getValue() const {
    return m_value;
}

void Field_eErrorCode::setValue(const Field_eErrorCode::eField_eErrorCode& value){
    m_value = value;
    m_value_isSet = true;
}
bool Field_eErrorCode::isSet() const {
    
    return m_value_isSet;
}

bool Field_eErrorCode::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace Ezmaxapi
