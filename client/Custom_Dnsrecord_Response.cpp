/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "Custom_Dnsrecord_Response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "Helpers.h"

namespace Ezmaxapi {

Custom_Dnsrecord_Response::Custom_Dnsrecord_Response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

Custom_Dnsrecord_Response::Custom_Dnsrecord_Response() {
    this->initializeModel();
}

Custom_Dnsrecord_Response::~Custom_Dnsrecord_Response() {}

void Custom_Dnsrecord_Response::initializeModel() {

    m_e_dnsrecord_type_isSet = false;
    m_e_dnsrecord_type_isValid = false;

    m_e_dnsrecord_validation_isSet = false;
    m_e_dnsrecord_validation_isValid = false;

    m_s_dnsrecord_name_isSet = false;
    m_s_dnsrecord_name_isValid = false;

    m_s_dnsrecord_value_isSet = false;
    m_s_dnsrecord_value_isValid = false;

    m_s_dnsrecord_expectedvalue_isSet = false;
    m_s_dnsrecord_expectedvalue_isValid = false;

    m_b_dnsrecord_must_match_isSet = false;
    m_b_dnsrecord_must_match_isValid = false;
}

void Custom_Dnsrecord_Response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void Custom_Dnsrecord_Response::fromJsonObject(QJsonObject json) {

    m_e_dnsrecord_type_isValid = ::Ezmaxapi::fromJsonValue(m_e_dnsrecord_type, json[QString("eDnsrecordType")]);
    m_e_dnsrecord_type_isSet = !json[QString("eDnsrecordType")].isNull() && m_e_dnsrecord_type_isValid;

    m_e_dnsrecord_validation_isValid = ::Ezmaxapi::fromJsonValue(m_e_dnsrecord_validation, json[QString("eDnsrecordValidation")]);
    m_e_dnsrecord_validation_isSet = !json[QString("eDnsrecordValidation")].isNull() && m_e_dnsrecord_validation_isValid;

    m_s_dnsrecord_name_isValid = ::Ezmaxapi::fromJsonValue(m_s_dnsrecord_name, json[QString("sDnsrecordName")]);
    m_s_dnsrecord_name_isSet = !json[QString("sDnsrecordName")].isNull() && m_s_dnsrecord_name_isValid;

    m_s_dnsrecord_value_isValid = ::Ezmaxapi::fromJsonValue(m_s_dnsrecord_value, json[QString("sDnsrecordValue")]);
    m_s_dnsrecord_value_isSet = !json[QString("sDnsrecordValue")].isNull() && m_s_dnsrecord_value_isValid;

    m_s_dnsrecord_expectedvalue_isValid = ::Ezmaxapi::fromJsonValue(m_s_dnsrecord_expectedvalue, json[QString("sDnsrecordExpectedvalue")]);
    m_s_dnsrecord_expectedvalue_isSet = !json[QString("sDnsrecordExpectedvalue")].isNull() && m_s_dnsrecord_expectedvalue_isValid;

    m_b_dnsrecord_must_match_isValid = ::Ezmaxapi::fromJsonValue(m_b_dnsrecord_must_match, json[QString("bDnsrecordMustMatch")]);
    m_b_dnsrecord_must_match_isSet = !json[QString("bDnsrecordMustMatch")].isNull() && m_b_dnsrecord_must_match_isValid;
}

QString Custom_Dnsrecord_Response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject Custom_Dnsrecord_Response::asJsonObject() const {
    QJsonObject obj;
    if (m_e_dnsrecord_type_isSet) {
        obj.insert(QString("eDnsrecordType"), ::Ezmaxapi::toJsonValue(m_e_dnsrecord_type));
    }
    if (m_e_dnsrecord_validation_isSet) {
        obj.insert(QString("eDnsrecordValidation"), ::Ezmaxapi::toJsonValue(m_e_dnsrecord_validation));
    }
    if (m_s_dnsrecord_name_isSet) {
        obj.insert(QString("sDnsrecordName"), ::Ezmaxapi::toJsonValue(m_s_dnsrecord_name));
    }
    if (m_s_dnsrecord_value_isSet) {
        obj.insert(QString("sDnsrecordValue"), ::Ezmaxapi::toJsonValue(m_s_dnsrecord_value));
    }
    if (m_s_dnsrecord_expectedvalue_isSet) {
        obj.insert(QString("sDnsrecordExpectedvalue"), ::Ezmaxapi::toJsonValue(m_s_dnsrecord_expectedvalue));
    }
    if (m_b_dnsrecord_must_match_isSet) {
        obj.insert(QString("bDnsrecordMustMatch"), ::Ezmaxapi::toJsonValue(m_b_dnsrecord_must_match));
    }
    return obj;
}

QString Custom_Dnsrecord_Response::getEDnsrecordType() const {
    return m_e_dnsrecord_type;
}
void Custom_Dnsrecord_Response::setEDnsrecordType(const QString &e_dnsrecord_type) {
    m_e_dnsrecord_type = e_dnsrecord_type;
    m_e_dnsrecord_type_isSet = true;
}

bool Custom_Dnsrecord_Response::is_e_dnsrecord_type_Set() const{
    return m_e_dnsrecord_type_isSet;
}

bool Custom_Dnsrecord_Response::is_e_dnsrecord_type_Valid() const{
    return m_e_dnsrecord_type_isValid;
}

QString Custom_Dnsrecord_Response::getEDnsrecordValidation() const {
    return m_e_dnsrecord_validation;
}
void Custom_Dnsrecord_Response::setEDnsrecordValidation(const QString &e_dnsrecord_validation) {
    m_e_dnsrecord_validation = e_dnsrecord_validation;
    m_e_dnsrecord_validation_isSet = true;
}

bool Custom_Dnsrecord_Response::is_e_dnsrecord_validation_Set() const{
    return m_e_dnsrecord_validation_isSet;
}

bool Custom_Dnsrecord_Response::is_e_dnsrecord_validation_Valid() const{
    return m_e_dnsrecord_validation_isValid;
}

QString Custom_Dnsrecord_Response::getSDnsrecordName() const {
    return m_s_dnsrecord_name;
}
void Custom_Dnsrecord_Response::setSDnsrecordName(const QString &s_dnsrecord_name) {
    m_s_dnsrecord_name = s_dnsrecord_name;
    m_s_dnsrecord_name_isSet = true;
}

bool Custom_Dnsrecord_Response::is_s_dnsrecord_name_Set() const{
    return m_s_dnsrecord_name_isSet;
}

bool Custom_Dnsrecord_Response::is_s_dnsrecord_name_Valid() const{
    return m_s_dnsrecord_name_isValid;
}

QString Custom_Dnsrecord_Response::getSDnsrecordValue() const {
    return m_s_dnsrecord_value;
}
void Custom_Dnsrecord_Response::setSDnsrecordValue(const QString &s_dnsrecord_value) {
    m_s_dnsrecord_value = s_dnsrecord_value;
    m_s_dnsrecord_value_isSet = true;
}

bool Custom_Dnsrecord_Response::is_s_dnsrecord_value_Set() const{
    return m_s_dnsrecord_value_isSet;
}

bool Custom_Dnsrecord_Response::is_s_dnsrecord_value_Valid() const{
    return m_s_dnsrecord_value_isValid;
}

QString Custom_Dnsrecord_Response::getSDnsrecordExpectedvalue() const {
    return m_s_dnsrecord_expectedvalue;
}
void Custom_Dnsrecord_Response::setSDnsrecordExpectedvalue(const QString &s_dnsrecord_expectedvalue) {
    m_s_dnsrecord_expectedvalue = s_dnsrecord_expectedvalue;
    m_s_dnsrecord_expectedvalue_isSet = true;
}

bool Custom_Dnsrecord_Response::is_s_dnsrecord_expectedvalue_Set() const{
    return m_s_dnsrecord_expectedvalue_isSet;
}

bool Custom_Dnsrecord_Response::is_s_dnsrecord_expectedvalue_Valid() const{
    return m_s_dnsrecord_expectedvalue_isValid;
}

bool Custom_Dnsrecord_Response::isBDnsrecordMustMatch() const {
    return m_b_dnsrecord_must_match;
}
void Custom_Dnsrecord_Response::setBDnsrecordMustMatch(const bool &b_dnsrecord_must_match) {
    m_b_dnsrecord_must_match = b_dnsrecord_must_match;
    m_b_dnsrecord_must_match_isSet = true;
}

bool Custom_Dnsrecord_Response::is_b_dnsrecord_must_match_Set() const{
    return m_b_dnsrecord_must_match_isSet;
}

bool Custom_Dnsrecord_Response::is_b_dnsrecord_must_match_Valid() const{
    return m_b_dnsrecord_must_match_isValid;
}

bool Custom_Dnsrecord_Response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_e_dnsrecord_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_e_dnsrecord_validation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s_dnsrecord_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s_dnsrecord_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s_dnsrecord_expectedvalue_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_b_dnsrecord_must_match_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool Custom_Dnsrecord_Response::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_e_dnsrecord_type_isValid && m_e_dnsrecord_validation_isValid && m_s_dnsrecord_name_isValid && m_b_dnsrecord_must_match_isValid && true;
}

} // namespace Ezmaxapi
