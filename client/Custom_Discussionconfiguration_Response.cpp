/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "Custom_Discussionconfiguration_Response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "Helpers.h"

namespace Ezmaxapi {

Custom_Discussionconfiguration_Response::Custom_Discussionconfiguration_Response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

Custom_Discussionconfiguration_Response::Custom_Discussionconfiguration_Response() {
    this->initializeModel();
}

Custom_Discussionconfiguration_Response::~Custom_Discussionconfiguration_Response() {}

void Custom_Discussionconfiguration_Response::initializeModel() {

    m_b_discussionconfiguration_completehistorywhenadded_isSet = false;
    m_b_discussionconfiguration_completehistorywhenadded_isValid = false;

    m_b_discussionconfiguration_createallowed_isSet = false;
    m_b_discussionconfiguration_createallowed_isValid = false;

    m_b_discussionconfiguration_deleteallowed_isSet = false;
    m_b_discussionconfiguration_deleteallowed_isValid = false;

    m_b_discussionconfiguration_deletediscussionmessageallowed_isSet = false;
    m_b_discussionconfiguration_deletediscussionmessageallowed_isValid = false;

    m_b_discussionconfiguration_editdiscussionmessageallowed_isSet = false;
    m_b_discussionconfiguration_editdiscussionmessageallowed_isValid = false;
}

void Custom_Discussionconfiguration_Response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void Custom_Discussionconfiguration_Response::fromJsonObject(QJsonObject json) {

    m_b_discussionconfiguration_completehistorywhenadded_isValid = ::Ezmaxapi::fromJsonValue(m_b_discussionconfiguration_completehistorywhenadded, json[QString("bDiscussionconfigurationCompletehistorywhenadded")]);
    m_b_discussionconfiguration_completehistorywhenadded_isSet = !json[QString("bDiscussionconfigurationCompletehistorywhenadded")].isNull() && m_b_discussionconfiguration_completehistorywhenadded_isValid;

    m_b_discussionconfiguration_createallowed_isValid = ::Ezmaxapi::fromJsonValue(m_b_discussionconfiguration_createallowed, json[QString("bDiscussionconfigurationCreateallowed")]);
    m_b_discussionconfiguration_createallowed_isSet = !json[QString("bDiscussionconfigurationCreateallowed")].isNull() && m_b_discussionconfiguration_createallowed_isValid;

    m_b_discussionconfiguration_deleteallowed_isValid = ::Ezmaxapi::fromJsonValue(m_b_discussionconfiguration_deleteallowed, json[QString("bDiscussionconfigurationDeleteallowed")]);
    m_b_discussionconfiguration_deleteallowed_isSet = !json[QString("bDiscussionconfigurationDeleteallowed")].isNull() && m_b_discussionconfiguration_deleteallowed_isValid;

    m_b_discussionconfiguration_deletediscussionmessageallowed_isValid = ::Ezmaxapi::fromJsonValue(m_b_discussionconfiguration_deletediscussionmessageallowed, json[QString("bDiscussionconfigurationDeletediscussionmessageallowed")]);
    m_b_discussionconfiguration_deletediscussionmessageallowed_isSet = !json[QString("bDiscussionconfigurationDeletediscussionmessageallowed")].isNull() && m_b_discussionconfiguration_deletediscussionmessageallowed_isValid;

    m_b_discussionconfiguration_editdiscussionmessageallowed_isValid = ::Ezmaxapi::fromJsonValue(m_b_discussionconfiguration_editdiscussionmessageallowed, json[QString("bDiscussionconfigurationEditdiscussionmessageallowed")]);
    m_b_discussionconfiguration_editdiscussionmessageallowed_isSet = !json[QString("bDiscussionconfigurationEditdiscussionmessageallowed")].isNull() && m_b_discussionconfiguration_editdiscussionmessageallowed_isValid;
}

QString Custom_Discussionconfiguration_Response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject Custom_Discussionconfiguration_Response::asJsonObject() const {
    QJsonObject obj;
    if (m_b_discussionconfiguration_completehistorywhenadded_isSet) {
        obj.insert(QString("bDiscussionconfigurationCompletehistorywhenadded"), ::Ezmaxapi::toJsonValue(m_b_discussionconfiguration_completehistorywhenadded));
    }
    if (m_b_discussionconfiguration_createallowed_isSet) {
        obj.insert(QString("bDiscussionconfigurationCreateallowed"), ::Ezmaxapi::toJsonValue(m_b_discussionconfiguration_createallowed));
    }
    if (m_b_discussionconfiguration_deleteallowed_isSet) {
        obj.insert(QString("bDiscussionconfigurationDeleteallowed"), ::Ezmaxapi::toJsonValue(m_b_discussionconfiguration_deleteallowed));
    }
    if (m_b_discussionconfiguration_deletediscussionmessageallowed_isSet) {
        obj.insert(QString("bDiscussionconfigurationDeletediscussionmessageallowed"), ::Ezmaxapi::toJsonValue(m_b_discussionconfiguration_deletediscussionmessageallowed));
    }
    if (m_b_discussionconfiguration_editdiscussionmessageallowed_isSet) {
        obj.insert(QString("bDiscussionconfigurationEditdiscussionmessageallowed"), ::Ezmaxapi::toJsonValue(m_b_discussionconfiguration_editdiscussionmessageallowed));
    }
    return obj;
}

bool Custom_Discussionconfiguration_Response::isBDiscussionconfigurationCompletehistorywhenadded() const {
    return m_b_discussionconfiguration_completehistorywhenadded;
}
void Custom_Discussionconfiguration_Response::setBDiscussionconfigurationCompletehistorywhenadded(const bool &b_discussionconfiguration_completehistorywhenadded) {
    m_b_discussionconfiguration_completehistorywhenadded = b_discussionconfiguration_completehistorywhenadded;
    m_b_discussionconfiguration_completehistorywhenadded_isSet = true;
}

bool Custom_Discussionconfiguration_Response::is_b_discussionconfiguration_completehistorywhenadded_Set() const{
    return m_b_discussionconfiguration_completehistorywhenadded_isSet;
}

bool Custom_Discussionconfiguration_Response::is_b_discussionconfiguration_completehistorywhenadded_Valid() const{
    return m_b_discussionconfiguration_completehistorywhenadded_isValid;
}

bool Custom_Discussionconfiguration_Response::isBDiscussionconfigurationCreateallowed() const {
    return m_b_discussionconfiguration_createallowed;
}
void Custom_Discussionconfiguration_Response::setBDiscussionconfigurationCreateallowed(const bool &b_discussionconfiguration_createallowed) {
    m_b_discussionconfiguration_createallowed = b_discussionconfiguration_createallowed;
    m_b_discussionconfiguration_createallowed_isSet = true;
}

bool Custom_Discussionconfiguration_Response::is_b_discussionconfiguration_createallowed_Set() const{
    return m_b_discussionconfiguration_createallowed_isSet;
}

bool Custom_Discussionconfiguration_Response::is_b_discussionconfiguration_createallowed_Valid() const{
    return m_b_discussionconfiguration_createallowed_isValid;
}

bool Custom_Discussionconfiguration_Response::isBDiscussionconfigurationDeleteallowed() const {
    return m_b_discussionconfiguration_deleteallowed;
}
void Custom_Discussionconfiguration_Response::setBDiscussionconfigurationDeleteallowed(const bool &b_discussionconfiguration_deleteallowed) {
    m_b_discussionconfiguration_deleteallowed = b_discussionconfiguration_deleteallowed;
    m_b_discussionconfiguration_deleteallowed_isSet = true;
}

bool Custom_Discussionconfiguration_Response::is_b_discussionconfiguration_deleteallowed_Set() const{
    return m_b_discussionconfiguration_deleteallowed_isSet;
}

bool Custom_Discussionconfiguration_Response::is_b_discussionconfiguration_deleteallowed_Valid() const{
    return m_b_discussionconfiguration_deleteallowed_isValid;
}

bool Custom_Discussionconfiguration_Response::isBDiscussionconfigurationDeletediscussionmessageallowed() const {
    return m_b_discussionconfiguration_deletediscussionmessageallowed;
}
void Custom_Discussionconfiguration_Response::setBDiscussionconfigurationDeletediscussionmessageallowed(const bool &b_discussionconfiguration_deletediscussionmessageallowed) {
    m_b_discussionconfiguration_deletediscussionmessageallowed = b_discussionconfiguration_deletediscussionmessageallowed;
    m_b_discussionconfiguration_deletediscussionmessageallowed_isSet = true;
}

bool Custom_Discussionconfiguration_Response::is_b_discussionconfiguration_deletediscussionmessageallowed_Set() const{
    return m_b_discussionconfiguration_deletediscussionmessageallowed_isSet;
}

bool Custom_Discussionconfiguration_Response::is_b_discussionconfiguration_deletediscussionmessageallowed_Valid() const{
    return m_b_discussionconfiguration_deletediscussionmessageallowed_isValid;
}

bool Custom_Discussionconfiguration_Response::isBDiscussionconfigurationEditdiscussionmessageallowed() const {
    return m_b_discussionconfiguration_editdiscussionmessageallowed;
}
void Custom_Discussionconfiguration_Response::setBDiscussionconfigurationEditdiscussionmessageallowed(const bool &b_discussionconfiguration_editdiscussionmessageallowed) {
    m_b_discussionconfiguration_editdiscussionmessageallowed = b_discussionconfiguration_editdiscussionmessageallowed;
    m_b_discussionconfiguration_editdiscussionmessageallowed_isSet = true;
}

bool Custom_Discussionconfiguration_Response::is_b_discussionconfiguration_editdiscussionmessageallowed_Set() const{
    return m_b_discussionconfiguration_editdiscussionmessageallowed_isSet;
}

bool Custom_Discussionconfiguration_Response::is_b_discussionconfiguration_editdiscussionmessageallowed_Valid() const{
    return m_b_discussionconfiguration_editdiscussionmessageallowed_isValid;
}

bool Custom_Discussionconfiguration_Response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_b_discussionconfiguration_completehistorywhenadded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_b_discussionconfiguration_createallowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_b_discussionconfiguration_deleteallowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_b_discussionconfiguration_deletediscussionmessageallowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_b_discussionconfiguration_editdiscussionmessageallowed_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool Custom_Discussionconfiguration_Response::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_b_discussionconfiguration_completehistorywhenadded_isValid && m_b_discussionconfiguration_createallowed_isValid && m_b_discussionconfiguration_deleteallowed_isValid && m_b_discussionconfiguration_deletediscussionmessageallowed_isValid && m_b_discussionconfiguration_editdiscussionmessageallowed_isValid && true;
}

} // namespace Ezmaxapi
