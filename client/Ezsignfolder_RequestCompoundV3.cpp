/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "Ezsignfolder_RequestCompoundV3.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "Helpers.h"

namespace Ezmaxapi {

Ezsignfolder_RequestCompoundV3::Ezsignfolder_RequestCompoundV3(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

Ezsignfolder_RequestCompoundV3::Ezsignfolder_RequestCompoundV3() {
    this->initializeModel();
}

Ezsignfolder_RequestCompoundV3::~Ezsignfolder_RequestCompoundV3() {}

void Ezsignfolder_RequestCompoundV3::initializeModel() {

    m_pki_ezsignfolder_id_isSet = false;
    m_pki_ezsignfolder_id_isValid = false;

    m_fki_ezsignfoldertype_id_isSet = false;
    m_fki_ezsignfoldertype_id_isValid = false;

    m_fki_timezone_id_isSet = false;
    m_fki_timezone_id_isValid = false;

    m_fki_ezsigntsarequirement_id_isSet = false;
    m_fki_ezsigntsarequirement_id_isValid = false;

    m_e_ezsignfolder_documentdependency_isSet = false;
    m_e_ezsignfolder_documentdependency_isValid = false;

    m_s_ezsignfolder_description_isSet = false;
    m_s_ezsignfolder_description_isValid = false;

    m_t_ezsignfolder_note_isSet = false;
    m_t_ezsignfolder_note_isValid = false;

    m_t_ezsignfolder_message_isSet = false;
    m_t_ezsignfolder_message_isValid = false;

    m_i_ezsignfolder_sendreminderfirstdays_isSet = false;
    m_i_ezsignfolder_sendreminderfirstdays_isValid = false;

    m_i_ezsignfolder_sendreminderotherdays_isSet = false;
    m_i_ezsignfolder_sendreminderotherdays_isValid = false;

    m_s_ezsignfolder_externalid_isSet = false;
    m_s_ezsignfolder_externalid_isValid = false;
}

void Ezsignfolder_RequestCompoundV3::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void Ezsignfolder_RequestCompoundV3::fromJsonObject(QJsonObject json) {

    m_pki_ezsignfolder_id_isValid = ::Ezmaxapi::fromJsonValue(m_pki_ezsignfolder_id, json[QString("pkiEzsignfolderID")]);
    m_pki_ezsignfolder_id_isSet = !json[QString("pkiEzsignfolderID")].isNull() && m_pki_ezsignfolder_id_isValid;

    m_fki_ezsignfoldertype_id_isValid = ::Ezmaxapi::fromJsonValue(m_fki_ezsignfoldertype_id, json[QString("fkiEzsignfoldertypeID")]);
    m_fki_ezsignfoldertype_id_isSet = !json[QString("fkiEzsignfoldertypeID")].isNull() && m_fki_ezsignfoldertype_id_isValid;

    m_fki_timezone_id_isValid = ::Ezmaxapi::fromJsonValue(m_fki_timezone_id, json[QString("fkiTimezoneID")]);
    m_fki_timezone_id_isSet = !json[QString("fkiTimezoneID")].isNull() && m_fki_timezone_id_isValid;

    m_fki_ezsigntsarequirement_id_isValid = ::Ezmaxapi::fromJsonValue(m_fki_ezsigntsarequirement_id, json[QString("fkiEzsigntsarequirementID")]);
    m_fki_ezsigntsarequirement_id_isSet = !json[QString("fkiEzsigntsarequirementID")].isNull() && m_fki_ezsigntsarequirement_id_isValid;

    m_e_ezsignfolder_documentdependency_isValid = ::Ezmaxapi::fromJsonValue(m_e_ezsignfolder_documentdependency, json[QString("eEzsignfolderDocumentdependency")]);
    m_e_ezsignfolder_documentdependency_isSet = !json[QString("eEzsignfolderDocumentdependency")].isNull() && m_e_ezsignfolder_documentdependency_isValid;

    m_s_ezsignfolder_description_isValid = ::Ezmaxapi::fromJsonValue(m_s_ezsignfolder_description, json[QString("sEzsignfolderDescription")]);
    m_s_ezsignfolder_description_isSet = !json[QString("sEzsignfolderDescription")].isNull() && m_s_ezsignfolder_description_isValid;

    m_t_ezsignfolder_note_isValid = ::Ezmaxapi::fromJsonValue(m_t_ezsignfolder_note, json[QString("tEzsignfolderNote")]);
    m_t_ezsignfolder_note_isSet = !json[QString("tEzsignfolderNote")].isNull() && m_t_ezsignfolder_note_isValid;

    m_t_ezsignfolder_message_isValid = ::Ezmaxapi::fromJsonValue(m_t_ezsignfolder_message, json[QString("tEzsignfolderMessage")]);
    m_t_ezsignfolder_message_isSet = !json[QString("tEzsignfolderMessage")].isNull() && m_t_ezsignfolder_message_isValid;

    m_i_ezsignfolder_sendreminderfirstdays_isValid = ::Ezmaxapi::fromJsonValue(m_i_ezsignfolder_sendreminderfirstdays, json[QString("iEzsignfolderSendreminderfirstdays")]);
    m_i_ezsignfolder_sendreminderfirstdays_isSet = !json[QString("iEzsignfolderSendreminderfirstdays")].isNull() && m_i_ezsignfolder_sendreminderfirstdays_isValid;

    m_i_ezsignfolder_sendreminderotherdays_isValid = ::Ezmaxapi::fromJsonValue(m_i_ezsignfolder_sendreminderotherdays, json[QString("iEzsignfolderSendreminderotherdays")]);
    m_i_ezsignfolder_sendreminderotherdays_isSet = !json[QString("iEzsignfolderSendreminderotherdays")].isNull() && m_i_ezsignfolder_sendreminderotherdays_isValid;

    m_s_ezsignfolder_externalid_isValid = ::Ezmaxapi::fromJsonValue(m_s_ezsignfolder_externalid, json[QString("sEzsignfolderExternalid")]);
    m_s_ezsignfolder_externalid_isSet = !json[QString("sEzsignfolderExternalid")].isNull() && m_s_ezsignfolder_externalid_isValid;
}

QString Ezsignfolder_RequestCompoundV3::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject Ezsignfolder_RequestCompoundV3::asJsonObject() const {
    QJsonObject obj;
    if (m_pki_ezsignfolder_id_isSet) {
        obj.insert(QString("pkiEzsignfolderID"), ::Ezmaxapi::toJsonValue(m_pki_ezsignfolder_id));
    }
    if (m_fki_ezsignfoldertype_id_isSet) {
        obj.insert(QString("fkiEzsignfoldertypeID"), ::Ezmaxapi::toJsonValue(m_fki_ezsignfoldertype_id));
    }
    if (m_fki_timezone_id_isSet) {
        obj.insert(QString("fkiTimezoneID"), ::Ezmaxapi::toJsonValue(m_fki_timezone_id));
    }
    if (m_fki_ezsigntsarequirement_id_isSet) {
        obj.insert(QString("fkiEzsigntsarequirementID"), ::Ezmaxapi::toJsonValue(m_fki_ezsigntsarequirement_id));
    }
    if (m_e_ezsignfolder_documentdependency.isSet()) {
        obj.insert(QString("eEzsignfolderDocumentdependency"), ::Ezmaxapi::toJsonValue(m_e_ezsignfolder_documentdependency));
    }
    if (m_s_ezsignfolder_description_isSet) {
        obj.insert(QString("sEzsignfolderDescription"), ::Ezmaxapi::toJsonValue(m_s_ezsignfolder_description));
    }
    if (m_t_ezsignfolder_note_isSet) {
        obj.insert(QString("tEzsignfolderNote"), ::Ezmaxapi::toJsonValue(m_t_ezsignfolder_note));
    }
    if (m_t_ezsignfolder_message_isSet) {
        obj.insert(QString("tEzsignfolderMessage"), ::Ezmaxapi::toJsonValue(m_t_ezsignfolder_message));
    }
    if (m_i_ezsignfolder_sendreminderfirstdays_isSet) {
        obj.insert(QString("iEzsignfolderSendreminderfirstdays"), ::Ezmaxapi::toJsonValue(m_i_ezsignfolder_sendreminderfirstdays));
    }
    if (m_i_ezsignfolder_sendreminderotherdays_isSet) {
        obj.insert(QString("iEzsignfolderSendreminderotherdays"), ::Ezmaxapi::toJsonValue(m_i_ezsignfolder_sendreminderotherdays));
    }
    if (m_s_ezsignfolder_externalid_isSet) {
        obj.insert(QString("sEzsignfolderExternalid"), ::Ezmaxapi::toJsonValue(m_s_ezsignfolder_externalid));
    }
    return obj;
}

qint32 Ezsignfolder_RequestCompoundV3::getPkiEzsignfolderId() const {
    return m_pki_ezsignfolder_id;
}
void Ezsignfolder_RequestCompoundV3::setPkiEzsignfolderId(const qint32 &pki_ezsignfolder_id) {
    m_pki_ezsignfolder_id = pki_ezsignfolder_id;
    m_pki_ezsignfolder_id_isSet = true;
}

bool Ezsignfolder_RequestCompoundV3::is_pki_ezsignfolder_id_Set() const{
    return m_pki_ezsignfolder_id_isSet;
}

bool Ezsignfolder_RequestCompoundV3::is_pki_ezsignfolder_id_Valid() const{
    return m_pki_ezsignfolder_id_isValid;
}

qint32 Ezsignfolder_RequestCompoundV3::getFkiEzsignfoldertypeId() const {
    return m_fki_ezsignfoldertype_id;
}
void Ezsignfolder_RequestCompoundV3::setFkiEzsignfoldertypeId(const qint32 &fki_ezsignfoldertype_id) {
    m_fki_ezsignfoldertype_id = fki_ezsignfoldertype_id;
    m_fki_ezsignfoldertype_id_isSet = true;
}

bool Ezsignfolder_RequestCompoundV3::is_fki_ezsignfoldertype_id_Set() const{
    return m_fki_ezsignfoldertype_id_isSet;
}

bool Ezsignfolder_RequestCompoundV3::is_fki_ezsignfoldertype_id_Valid() const{
    return m_fki_ezsignfoldertype_id_isValid;
}

qint32 Ezsignfolder_RequestCompoundV3::getFkiTimezoneId() const {
    return m_fki_timezone_id;
}
void Ezsignfolder_RequestCompoundV3::setFkiTimezoneId(const qint32 &fki_timezone_id) {
    m_fki_timezone_id = fki_timezone_id;
    m_fki_timezone_id_isSet = true;
}

bool Ezsignfolder_RequestCompoundV3::is_fki_timezone_id_Set() const{
    return m_fki_timezone_id_isSet;
}

bool Ezsignfolder_RequestCompoundV3::is_fki_timezone_id_Valid() const{
    return m_fki_timezone_id_isValid;
}

qint32 Ezsignfolder_RequestCompoundV3::getFkiEzsigntsarequirementId() const {
    return m_fki_ezsigntsarequirement_id;
}
void Ezsignfolder_RequestCompoundV3::setFkiEzsigntsarequirementId(const qint32 &fki_ezsigntsarequirement_id) {
    m_fki_ezsigntsarequirement_id = fki_ezsigntsarequirement_id;
    m_fki_ezsigntsarequirement_id_isSet = true;
}

bool Ezsignfolder_RequestCompoundV3::is_fki_ezsigntsarequirement_id_Set() const{
    return m_fki_ezsigntsarequirement_id_isSet;
}

bool Ezsignfolder_RequestCompoundV3::is_fki_ezsigntsarequirement_id_Valid() const{
    return m_fki_ezsigntsarequirement_id_isValid;
}

Field_eEzsignfolderDocumentdependency Ezsignfolder_RequestCompoundV3::getEEzsignfolderDocumentdependency() const {
    return m_e_ezsignfolder_documentdependency;
}
void Ezsignfolder_RequestCompoundV3::setEEzsignfolderDocumentdependency(const Field_eEzsignfolderDocumentdependency &e_ezsignfolder_documentdependency) {
    m_e_ezsignfolder_documentdependency = e_ezsignfolder_documentdependency;
    m_e_ezsignfolder_documentdependency_isSet = true;
}

bool Ezsignfolder_RequestCompoundV3::is_e_ezsignfolder_documentdependency_Set() const{
    return m_e_ezsignfolder_documentdependency_isSet;
}

bool Ezsignfolder_RequestCompoundV3::is_e_ezsignfolder_documentdependency_Valid() const{
    return m_e_ezsignfolder_documentdependency_isValid;
}

QString Ezsignfolder_RequestCompoundV3::getSEzsignfolderDescription() const {
    return m_s_ezsignfolder_description;
}
void Ezsignfolder_RequestCompoundV3::setSEzsignfolderDescription(const QString &s_ezsignfolder_description) {
    m_s_ezsignfolder_description = s_ezsignfolder_description;
    m_s_ezsignfolder_description_isSet = true;
}

bool Ezsignfolder_RequestCompoundV3::is_s_ezsignfolder_description_Set() const{
    return m_s_ezsignfolder_description_isSet;
}

bool Ezsignfolder_RequestCompoundV3::is_s_ezsignfolder_description_Valid() const{
    return m_s_ezsignfolder_description_isValid;
}

QString Ezsignfolder_RequestCompoundV3::getTEzsignfolderNote() const {
    return m_t_ezsignfolder_note;
}
void Ezsignfolder_RequestCompoundV3::setTEzsignfolderNote(const QString &t_ezsignfolder_note) {
    m_t_ezsignfolder_note = t_ezsignfolder_note;
    m_t_ezsignfolder_note_isSet = true;
}

bool Ezsignfolder_RequestCompoundV3::is_t_ezsignfolder_note_Set() const{
    return m_t_ezsignfolder_note_isSet;
}

bool Ezsignfolder_RequestCompoundV3::is_t_ezsignfolder_note_Valid() const{
    return m_t_ezsignfolder_note_isValid;
}

QString Ezsignfolder_RequestCompoundV3::getTEzsignfolderMessage() const {
    return m_t_ezsignfolder_message;
}
void Ezsignfolder_RequestCompoundV3::setTEzsignfolderMessage(const QString &t_ezsignfolder_message) {
    m_t_ezsignfolder_message = t_ezsignfolder_message;
    m_t_ezsignfolder_message_isSet = true;
}

bool Ezsignfolder_RequestCompoundV3::is_t_ezsignfolder_message_Set() const{
    return m_t_ezsignfolder_message_isSet;
}

bool Ezsignfolder_RequestCompoundV3::is_t_ezsignfolder_message_Valid() const{
    return m_t_ezsignfolder_message_isValid;
}

qint32 Ezsignfolder_RequestCompoundV3::getIEzsignfolderSendreminderfirstdays() const {
    return m_i_ezsignfolder_sendreminderfirstdays;
}
void Ezsignfolder_RequestCompoundV3::setIEzsignfolderSendreminderfirstdays(const qint32 &i_ezsignfolder_sendreminderfirstdays) {
    m_i_ezsignfolder_sendreminderfirstdays = i_ezsignfolder_sendreminderfirstdays;
    m_i_ezsignfolder_sendreminderfirstdays_isSet = true;
}

bool Ezsignfolder_RequestCompoundV3::is_i_ezsignfolder_sendreminderfirstdays_Set() const{
    return m_i_ezsignfolder_sendreminderfirstdays_isSet;
}

bool Ezsignfolder_RequestCompoundV3::is_i_ezsignfolder_sendreminderfirstdays_Valid() const{
    return m_i_ezsignfolder_sendreminderfirstdays_isValid;
}

qint32 Ezsignfolder_RequestCompoundV3::getIEzsignfolderSendreminderotherdays() const {
    return m_i_ezsignfolder_sendreminderotherdays;
}
void Ezsignfolder_RequestCompoundV3::setIEzsignfolderSendreminderotherdays(const qint32 &i_ezsignfolder_sendreminderotherdays) {
    m_i_ezsignfolder_sendreminderotherdays = i_ezsignfolder_sendreminderotherdays;
    m_i_ezsignfolder_sendreminderotherdays_isSet = true;
}

bool Ezsignfolder_RequestCompoundV3::is_i_ezsignfolder_sendreminderotherdays_Set() const{
    return m_i_ezsignfolder_sendreminderotherdays_isSet;
}

bool Ezsignfolder_RequestCompoundV3::is_i_ezsignfolder_sendreminderotherdays_Valid() const{
    return m_i_ezsignfolder_sendreminderotherdays_isValid;
}

QString Ezsignfolder_RequestCompoundV3::getSEzsignfolderExternalid() const {
    return m_s_ezsignfolder_externalid;
}
void Ezsignfolder_RequestCompoundV3::setSEzsignfolderExternalid(const QString &s_ezsignfolder_externalid) {
    m_s_ezsignfolder_externalid = s_ezsignfolder_externalid;
    m_s_ezsignfolder_externalid_isSet = true;
}

bool Ezsignfolder_RequestCompoundV3::is_s_ezsignfolder_externalid_Set() const{
    return m_s_ezsignfolder_externalid_isSet;
}

bool Ezsignfolder_RequestCompoundV3::is_s_ezsignfolder_externalid_Valid() const{
    return m_s_ezsignfolder_externalid_isValid;
}

bool Ezsignfolder_RequestCompoundV3::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_pki_ezsignfolder_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fki_ezsignfoldertype_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fki_timezone_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fki_ezsigntsarequirement_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_e_ezsignfolder_documentdependency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_s_ezsignfolder_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_t_ezsignfolder_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_t_ezsignfolder_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_i_ezsignfolder_sendreminderfirstdays_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_i_ezsignfolder_sendreminderotherdays_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s_ezsignfolder_externalid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool Ezsignfolder_RequestCompoundV3::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_fki_ezsignfoldertype_id_isValid && m_s_ezsignfolder_description_isValid && m_i_ezsignfolder_sendreminderfirstdays_isValid && m_i_ezsignfolder_sendreminderotherdays_isValid && true;
}

} // namespace Ezmaxapi
