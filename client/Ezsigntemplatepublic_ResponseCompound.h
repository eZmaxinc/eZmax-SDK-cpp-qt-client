/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Ezsigntemplatepublic_ResponseCompound.h
 *
 * A Ezsigntemplatepublic Object
 */

#ifndef Ezsigntemplatepublic_ResponseCompound_H
#define Ezsigntemplatepublic_ResponseCompound_H

#include <QJsonObject>

#include "Common_Audit.h"
#include "Custom_Ezsignfolderezsigntemplatepublic_Response.h"
#include "Field_eEzsigntemplatepublicLimittype.h"
#include <QList>
#include <QString>

#include "Enum.h"
#include "Object.h"

namespace Ezmaxapi {
class Common_Audit;
class Custom_Ezsignfolderezsigntemplatepublic_Response;

class Ezsigntemplatepublic_ResponseCompound : public Object {
public:
    Ezsigntemplatepublic_ResponseCompound();
    Ezsigntemplatepublic_ResponseCompound(QString json);
    ~Ezsigntemplatepublic_ResponseCompound() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getPkiEzsigntemplatepublicId() const;
    void setPkiEzsigntemplatepublicId(const qint32 &pki_ezsigntemplatepublic_id);
    bool is_pki_ezsigntemplatepublic_id_Set() const;
    bool is_pki_ezsigntemplatepublic_id_Valid() const;

    qint32 getFkiEzsignfoldertypeId() const;
    void setFkiEzsignfoldertypeId(const qint32 &fki_ezsignfoldertype_id);
    bool is_fki_ezsignfoldertype_id_Set() const;
    bool is_fki_ezsignfoldertype_id_Valid() const;

    QString getSEzsignfoldertypeNameX() const;
    void setSEzsignfoldertypeNameX(const QString &s_ezsignfoldertype_name_x);
    bool is_s_ezsignfoldertype_name_x_Set() const;
    bool is_s_ezsignfoldertype_name_x_Valid() const;

    qint32 getFkiUserlogintypeId() const;
    void setFkiUserlogintypeId(const qint32 &fki_userlogintype_id);
    bool is_fki_userlogintype_id_Set() const;
    bool is_fki_userlogintype_id_Valid() const;

    QString getSUserlogintypeDescriptionX() const;
    void setSUserlogintypeDescriptionX(const QString &s_userlogintype_description_x);
    bool is_s_userlogintype_description_x_Set() const;
    bool is_s_userlogintype_description_x_Valid() const;

    qint32 getFkiEzsigntemplateId() const;
    void setFkiEzsigntemplateId(const qint32 &fki_ezsigntemplate_id);
    bool is_fki_ezsigntemplate_id_Set() const;
    bool is_fki_ezsigntemplate_id_Valid() const;

    qint32 getFkiEzsigntemplatepackageId() const;
    void setFkiEzsigntemplatepackageId(const qint32 &fki_ezsigntemplatepackage_id);
    bool is_fki_ezsigntemplatepackage_id_Set() const;
    bool is_fki_ezsigntemplatepackage_id_Valid() const;

    QString getSEzsigntemplatepublicDescription() const;
    void setSEzsigntemplatepublicDescription(const QString &s_ezsigntemplatepublic_description);
    bool is_s_ezsigntemplatepublic_description_Set() const;
    bool is_s_ezsigntemplatepublic_description_Valid() const;

    QString getSEzsigntemplatepublicReferenceid() const;
    void setSEzsigntemplatepublicReferenceid(const QString &s_ezsigntemplatepublic_referenceid);
    bool is_s_ezsigntemplatepublic_referenceid_Set() const;
    bool is_s_ezsigntemplatepublic_referenceid_Valid() const;

    bool isBEzsigntemplatepublicIsactive() const;
    void setBEzsigntemplatepublicIsactive(const bool &b_ezsigntemplatepublic_isactive);
    bool is_b_ezsigntemplatepublic_isactive_Set() const;
    bool is_b_ezsigntemplatepublic_isactive_Valid() const;

    QString getTEzsigntemplatepublicNote() const;
    void setTEzsigntemplatepublicNote(const QString &t_ezsigntemplatepublic_note);
    bool is_t_ezsigntemplatepublic_note_Set() const;
    bool is_t_ezsigntemplatepublic_note_Valid() const;

    Field_eEzsigntemplatepublicLimittype getEEzsigntemplatepublicLimittype() const;
    void setEEzsigntemplatepublicLimittype(const Field_eEzsigntemplatepublicLimittype &e_ezsigntemplatepublic_limittype);
    bool is_e_ezsigntemplatepublic_limittype_Set() const;
    bool is_e_ezsigntemplatepublic_limittype_Valid() const;

    qint32 getIEzsigntemplatepublicLimit() const;
    void setIEzsigntemplatepublicLimit(const qint32 &i_ezsigntemplatepublic_limit);
    bool is_i_ezsigntemplatepublic_limit_Set() const;
    bool is_i_ezsigntemplatepublic_limit_Valid() const;

    qint32 getIEzsigntemplatepublicLimitexceeded() const;
    void setIEzsigntemplatepublicLimitexceeded(const qint32 &i_ezsigntemplatepublic_limitexceeded);
    bool is_i_ezsigntemplatepublic_limitexceeded_Set() const;
    bool is_i_ezsigntemplatepublic_limitexceeded_Valid() const;

    QString getDtEzsigntemplatepublicLimitexceededsince() const;
    void setDtEzsigntemplatepublicLimitexceededsince(const QString &dt_ezsigntemplatepublic_limitexceededsince);
    bool is_dt_ezsigntemplatepublic_limitexceededsince_Set() const;
    bool is_dt_ezsigntemplatepublic_limitexceededsince_Valid() const;

    QString getSEzsigntemplatepublicUrl() const;
    void setSEzsigntemplatepublicUrl(const QString &s_ezsigntemplatepublic_url);
    bool is_s_ezsigntemplatepublic_url_Set() const;
    bool is_s_ezsigntemplatepublic_url_Valid() const;

    QString getSEzsigntemplatepublicEzsigntemplatedescription() const;
    void setSEzsigntemplatepublicEzsigntemplatedescription(const QString &s_ezsigntemplatepublic_ezsigntemplatedescription);
    bool is_s_ezsigntemplatepublic_ezsigntemplatedescription_Set() const;
    bool is_s_ezsigntemplatepublic_ezsigntemplatedescription_Valid() const;

    Common_Audit getObjAudit() const;
    void setObjAudit(const Common_Audit &obj_audit);
    bool is_obj_audit_Set() const;
    bool is_obj_audit_Valid() const;

    QList<Custom_Ezsignfolderezsigntemplatepublic_Response> getAObjEzsignfolderezsigntemplatepublic() const;
    void setAObjEzsignfolderezsigntemplatepublic(const QList<Custom_Ezsignfolderezsigntemplatepublic_Response> &a_obj_ezsignfolderezsigntemplatepublic);
    bool is_a_obj_ezsignfolderezsigntemplatepublic_Set() const;
    bool is_a_obj_ezsignfolderezsigntemplatepublic_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_pki_ezsigntemplatepublic_id;
    bool m_pki_ezsigntemplatepublic_id_isSet;
    bool m_pki_ezsigntemplatepublic_id_isValid;

    qint32 m_fki_ezsignfoldertype_id;
    bool m_fki_ezsignfoldertype_id_isSet;
    bool m_fki_ezsignfoldertype_id_isValid;

    QString m_s_ezsignfoldertype_name_x;
    bool m_s_ezsignfoldertype_name_x_isSet;
    bool m_s_ezsignfoldertype_name_x_isValid;

    qint32 m_fki_userlogintype_id;
    bool m_fki_userlogintype_id_isSet;
    bool m_fki_userlogintype_id_isValid;

    QString m_s_userlogintype_description_x;
    bool m_s_userlogintype_description_x_isSet;
    bool m_s_userlogintype_description_x_isValid;

    qint32 m_fki_ezsigntemplate_id;
    bool m_fki_ezsigntemplate_id_isSet;
    bool m_fki_ezsigntemplate_id_isValid;

    qint32 m_fki_ezsigntemplatepackage_id;
    bool m_fki_ezsigntemplatepackage_id_isSet;
    bool m_fki_ezsigntemplatepackage_id_isValid;

    QString m_s_ezsigntemplatepublic_description;
    bool m_s_ezsigntemplatepublic_description_isSet;
    bool m_s_ezsigntemplatepublic_description_isValid;

    QString m_s_ezsigntemplatepublic_referenceid;
    bool m_s_ezsigntemplatepublic_referenceid_isSet;
    bool m_s_ezsigntemplatepublic_referenceid_isValid;

    bool m_b_ezsigntemplatepublic_isactive;
    bool m_b_ezsigntemplatepublic_isactive_isSet;
    bool m_b_ezsigntemplatepublic_isactive_isValid;

    QString m_t_ezsigntemplatepublic_note;
    bool m_t_ezsigntemplatepublic_note_isSet;
    bool m_t_ezsigntemplatepublic_note_isValid;

    Field_eEzsigntemplatepublicLimittype m_e_ezsigntemplatepublic_limittype;
    bool m_e_ezsigntemplatepublic_limittype_isSet;
    bool m_e_ezsigntemplatepublic_limittype_isValid;

    qint32 m_i_ezsigntemplatepublic_limit;
    bool m_i_ezsigntemplatepublic_limit_isSet;
    bool m_i_ezsigntemplatepublic_limit_isValid;

    qint32 m_i_ezsigntemplatepublic_limitexceeded;
    bool m_i_ezsigntemplatepublic_limitexceeded_isSet;
    bool m_i_ezsigntemplatepublic_limitexceeded_isValid;

    QString m_dt_ezsigntemplatepublic_limitexceededsince;
    bool m_dt_ezsigntemplatepublic_limitexceededsince_isSet;
    bool m_dt_ezsigntemplatepublic_limitexceededsince_isValid;

    QString m_s_ezsigntemplatepublic_url;
    bool m_s_ezsigntemplatepublic_url_isSet;
    bool m_s_ezsigntemplatepublic_url_isValid;

    QString m_s_ezsigntemplatepublic_ezsigntemplatedescription;
    bool m_s_ezsigntemplatepublic_ezsigntemplatedescription_isSet;
    bool m_s_ezsigntemplatepublic_ezsigntemplatedescription_isValid;

    Common_Audit m_obj_audit;
    bool m_obj_audit_isSet;
    bool m_obj_audit_isValid;

    QList<Custom_Ezsignfolderezsigntemplatepublic_Response> m_a_obj_ezsignfolderezsigntemplatepublic;
    bool m_a_obj_ezsignfolderezsigntemplatepublic_isSet;
    bool m_a_obj_ezsignfolderezsigntemplatepublic_isValid;
};

} // namespace Ezmaxapi

Q_DECLARE_METATYPE(Ezmaxapi::Ezsigntemplatepublic_ResponseCompound)

#endif // Ezsigntemplatepublic_ResponseCompound_H
