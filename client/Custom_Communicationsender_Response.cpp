/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "Custom_Communicationsender_Response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "Helpers.h"

namespace Ezmaxapi {

Custom_Communicationsender_Response::Custom_Communicationsender_Response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

Custom_Communicationsender_Response::Custom_Communicationsender_Response() {
    this->initializeModel();
}

Custom_Communicationsender_Response::~Custom_Communicationsender_Response() {}

void Custom_Communicationsender_Response::initializeModel() {

    m_fki_agent_id_isSet = false;
    m_fki_agent_id_isValid = false;

    m_fki_broker_id_isSet = false;
    m_fki_broker_id_isValid = false;

    m_fki_user_id_isSet = false;
    m_fki_user_id_isValid = false;

    m_fki_mailboxshared_id_isSet = false;
    m_fki_mailboxshared_id_isValid = false;

    m_e_communicationsender_objecttype_isSet = false;
    m_e_communicationsender_objecttype_isValid = false;

    m_obj_contact_name_isSet = false;
    m_obj_contact_name_isValid = false;

    m_s_email_address_isSet = false;
    m_s_email_address_isValid = false;

    m_s_phone_e164_isSet = false;
    m_s_phone_e164_isValid = false;
}

void Custom_Communicationsender_Response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void Custom_Communicationsender_Response::fromJsonObject(QJsonObject json) {

    m_fki_agent_id_isValid = ::Ezmaxapi::fromJsonValue(m_fki_agent_id, json[QString("fkiAgentID")]);
    m_fki_agent_id_isSet = !json[QString("fkiAgentID")].isNull() && m_fki_agent_id_isValid;

    m_fki_broker_id_isValid = ::Ezmaxapi::fromJsonValue(m_fki_broker_id, json[QString("fkiBrokerID")]);
    m_fki_broker_id_isSet = !json[QString("fkiBrokerID")].isNull() && m_fki_broker_id_isValid;

    m_fki_user_id_isValid = ::Ezmaxapi::fromJsonValue(m_fki_user_id, json[QString("fkiUserID")]);
    m_fki_user_id_isSet = !json[QString("fkiUserID")].isNull() && m_fki_user_id_isValid;

    m_fki_mailboxshared_id_isValid = ::Ezmaxapi::fromJsonValue(m_fki_mailboxshared_id, json[QString("fkiMailboxsharedID")]);
    m_fki_mailboxshared_id_isSet = !json[QString("fkiMailboxsharedID")].isNull() && m_fki_mailboxshared_id_isValid;

    m_e_communicationsender_objecttype_isValid = ::Ezmaxapi::fromJsonValue(m_e_communicationsender_objecttype, json[QString("eCommunicationsenderObjecttype")]);
    m_e_communicationsender_objecttype_isSet = !json[QString("eCommunicationsenderObjecttype")].isNull() && m_e_communicationsender_objecttype_isValid;

    m_obj_contact_name_isValid = ::Ezmaxapi::fromJsonValue(m_obj_contact_name, json[QString("objContactName")]);
    m_obj_contact_name_isSet = !json[QString("objContactName")].isNull() && m_obj_contact_name_isValid;

    m_s_email_address_isValid = ::Ezmaxapi::fromJsonValue(m_s_email_address, json[QString("sEmailAddress")]);
    m_s_email_address_isSet = !json[QString("sEmailAddress")].isNull() && m_s_email_address_isValid;

    m_s_phone_e164_isValid = ::Ezmaxapi::fromJsonValue(m_s_phone_e164, json[QString("sPhoneE164")]);
    m_s_phone_e164_isSet = !json[QString("sPhoneE164")].isNull() && m_s_phone_e164_isValid;
}

QString Custom_Communicationsender_Response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject Custom_Communicationsender_Response::asJsonObject() const {
    QJsonObject obj;
    if (m_fki_agent_id_isSet) {
        obj.insert(QString("fkiAgentID"), ::Ezmaxapi::toJsonValue(m_fki_agent_id));
    }
    if (m_fki_broker_id_isSet) {
        obj.insert(QString("fkiBrokerID"), ::Ezmaxapi::toJsonValue(m_fki_broker_id));
    }
    if (m_fki_user_id_isSet) {
        obj.insert(QString("fkiUserID"), ::Ezmaxapi::toJsonValue(m_fki_user_id));
    }
    if (m_fki_mailboxshared_id_isSet) {
        obj.insert(QString("fkiMailboxsharedID"), ::Ezmaxapi::toJsonValue(m_fki_mailboxshared_id));
    }
    if (m_e_communicationsender_objecttype_isSet) {
        obj.insert(QString("eCommunicationsenderObjecttype"), ::Ezmaxapi::toJsonValue(m_e_communicationsender_objecttype));
    }
    if (m_obj_contact_name.isSet()) {
        obj.insert(QString("objContactName"), ::Ezmaxapi::toJsonValue(m_obj_contact_name));
    }
    if (m_s_email_address_isSet) {
        obj.insert(QString("sEmailAddress"), ::Ezmaxapi::toJsonValue(m_s_email_address));
    }
    if (m_s_phone_e164_isSet) {
        obj.insert(QString("sPhoneE164"), ::Ezmaxapi::toJsonValue(m_s_phone_e164));
    }
    return obj;
}

qint32 Custom_Communicationsender_Response::getFkiAgentId() const {
    return m_fki_agent_id;
}
void Custom_Communicationsender_Response::setFkiAgentId(const qint32 &fki_agent_id) {
    m_fki_agent_id = fki_agent_id;
    m_fki_agent_id_isSet = true;
}

bool Custom_Communicationsender_Response::is_fki_agent_id_Set() const{
    return m_fki_agent_id_isSet;
}

bool Custom_Communicationsender_Response::is_fki_agent_id_Valid() const{
    return m_fki_agent_id_isValid;
}

qint32 Custom_Communicationsender_Response::getFkiBrokerId() const {
    return m_fki_broker_id;
}
void Custom_Communicationsender_Response::setFkiBrokerId(const qint32 &fki_broker_id) {
    m_fki_broker_id = fki_broker_id;
    m_fki_broker_id_isSet = true;
}

bool Custom_Communicationsender_Response::is_fki_broker_id_Set() const{
    return m_fki_broker_id_isSet;
}

bool Custom_Communicationsender_Response::is_fki_broker_id_Valid() const{
    return m_fki_broker_id_isValid;
}

qint32 Custom_Communicationsender_Response::getFkiUserId() const {
    return m_fki_user_id;
}
void Custom_Communicationsender_Response::setFkiUserId(const qint32 &fki_user_id) {
    m_fki_user_id = fki_user_id;
    m_fki_user_id_isSet = true;
}

bool Custom_Communicationsender_Response::is_fki_user_id_Set() const{
    return m_fki_user_id_isSet;
}

bool Custom_Communicationsender_Response::is_fki_user_id_Valid() const{
    return m_fki_user_id_isValid;
}

qint32 Custom_Communicationsender_Response::getFkiMailboxsharedId() const {
    return m_fki_mailboxshared_id;
}
void Custom_Communicationsender_Response::setFkiMailboxsharedId(const qint32 &fki_mailboxshared_id) {
    m_fki_mailboxshared_id = fki_mailboxshared_id;
    m_fki_mailboxshared_id_isSet = true;
}

bool Custom_Communicationsender_Response::is_fki_mailboxshared_id_Set() const{
    return m_fki_mailboxshared_id_isSet;
}

bool Custom_Communicationsender_Response::is_fki_mailboxshared_id_Valid() const{
    return m_fki_mailboxshared_id_isValid;
}

QString Custom_Communicationsender_Response::getECommunicationsenderObjecttype() const {
    return m_e_communicationsender_objecttype;
}
void Custom_Communicationsender_Response::setECommunicationsenderObjecttype(const QString &e_communicationsender_objecttype) {
    m_e_communicationsender_objecttype = e_communicationsender_objecttype;
    m_e_communicationsender_objecttype_isSet = true;
}

bool Custom_Communicationsender_Response::is_e_communicationsender_objecttype_Set() const{
    return m_e_communicationsender_objecttype_isSet;
}

bool Custom_Communicationsender_Response::is_e_communicationsender_objecttype_Valid() const{
    return m_e_communicationsender_objecttype_isValid;
}

Custom_ContactName_Response Custom_Communicationsender_Response::getObjContactName() const {
    return m_obj_contact_name;
}
void Custom_Communicationsender_Response::setObjContactName(const Custom_ContactName_Response &obj_contact_name) {
    m_obj_contact_name = obj_contact_name;
    m_obj_contact_name_isSet = true;
}

bool Custom_Communicationsender_Response::is_obj_contact_name_Set() const{
    return m_obj_contact_name_isSet;
}

bool Custom_Communicationsender_Response::is_obj_contact_name_Valid() const{
    return m_obj_contact_name_isValid;
}

QString Custom_Communicationsender_Response::getSEmailAddress() const {
    return m_s_email_address;
}
void Custom_Communicationsender_Response::setSEmailAddress(const QString &s_email_address) {
    m_s_email_address = s_email_address;
    m_s_email_address_isSet = true;
}

bool Custom_Communicationsender_Response::is_s_email_address_Set() const{
    return m_s_email_address_isSet;
}

bool Custom_Communicationsender_Response::is_s_email_address_Valid() const{
    return m_s_email_address_isValid;
}

QString Custom_Communicationsender_Response::getSPhoneE164() const {
    return m_s_phone_e164;
}
void Custom_Communicationsender_Response::setSPhoneE164(const QString &s_phone_e164) {
    m_s_phone_e164 = s_phone_e164;
    m_s_phone_e164_isSet = true;
}

bool Custom_Communicationsender_Response::is_s_phone_e164_Set() const{
    return m_s_phone_e164_isSet;
}

bool Custom_Communicationsender_Response::is_s_phone_e164_Valid() const{
    return m_s_phone_e164_isValid;
}

bool Custom_Communicationsender_Response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_fki_agent_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fki_broker_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fki_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fki_mailboxshared_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_e_communicationsender_objecttype_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_obj_contact_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_s_email_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s_phone_e164_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool Custom_Communicationsender_Response::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_e_communicationsender_objecttype_isValid && m_obj_contact_name_isValid && true;
}

} // namespace Ezmaxapi
