/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "Paymentgateway_Response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "Helpers.h"

namespace Ezmaxapi {

Paymentgateway_Response::Paymentgateway_Response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

Paymentgateway_Response::Paymentgateway_Response() {
    this->initializeModel();
}

Paymentgateway_Response::~Paymentgateway_Response() {}

void Paymentgateway_Response::initializeModel() {

    m_pki_paymentgateway_id_isSet = false;
    m_pki_paymentgateway_id_isValid = false;

    m_fki_creditcardmerchant_id_isSet = false;
    m_fki_creditcardmerchant_id_isValid = false;

    m_s_creditcardmerchant_description_isSet = false;
    m_s_creditcardmerchant_description_isValid = false;

    m_e_paymentgateway_processor_isSet = false;
    m_e_paymentgateway_processor_isValid = false;

    m_obj_paymentgateway_description_isSet = false;
    m_obj_paymentgateway_description_isValid = false;

    m_obj_creditcardmerchant_isSet = false;
    m_obj_creditcardmerchant_isValid = false;
}

void Paymentgateway_Response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void Paymentgateway_Response::fromJsonObject(QJsonObject json) {

    m_pki_paymentgateway_id_isValid = ::Ezmaxapi::fromJsonValue(m_pki_paymentgateway_id, json[QString("pkiPaymentgatewayID")]);
    m_pki_paymentgateway_id_isSet = !json[QString("pkiPaymentgatewayID")].isNull() && m_pki_paymentgateway_id_isValid;

    m_fki_creditcardmerchant_id_isValid = ::Ezmaxapi::fromJsonValue(m_fki_creditcardmerchant_id, json[QString("fkiCreditcardmerchantID")]);
    m_fki_creditcardmerchant_id_isSet = !json[QString("fkiCreditcardmerchantID")].isNull() && m_fki_creditcardmerchant_id_isValid;

    m_s_creditcardmerchant_description_isValid = ::Ezmaxapi::fromJsonValue(m_s_creditcardmerchant_description, json[QString("sCreditcardmerchantDescription")]);
    m_s_creditcardmerchant_description_isSet = !json[QString("sCreditcardmerchantDescription")].isNull() && m_s_creditcardmerchant_description_isValid;

    m_e_paymentgateway_processor_isValid = ::Ezmaxapi::fromJsonValue(m_e_paymentgateway_processor, json[QString("ePaymentgatewayProcessor")]);
    m_e_paymentgateway_processor_isSet = !json[QString("ePaymentgatewayProcessor")].isNull() && m_e_paymentgateway_processor_isValid;

    m_obj_paymentgateway_description_isValid = ::Ezmaxapi::fromJsonValue(m_obj_paymentgateway_description, json[QString("objPaymentgatewayDescription")]);
    m_obj_paymentgateway_description_isSet = !json[QString("objPaymentgatewayDescription")].isNull() && m_obj_paymentgateway_description_isValid;

    m_obj_creditcardmerchant_isValid = ::Ezmaxapi::fromJsonValue(m_obj_creditcardmerchant, json[QString("objCreditcardmerchant")]);
    m_obj_creditcardmerchant_isSet = !json[QString("objCreditcardmerchant")].isNull() && m_obj_creditcardmerchant_isValid;
}

QString Paymentgateway_Response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject Paymentgateway_Response::asJsonObject() const {
    QJsonObject obj;
    if (m_pki_paymentgateway_id_isSet) {
        obj.insert(QString("pkiPaymentgatewayID"), ::Ezmaxapi::toJsonValue(m_pki_paymentgateway_id));
    }
    if (m_fki_creditcardmerchant_id_isSet) {
        obj.insert(QString("fkiCreditcardmerchantID"), ::Ezmaxapi::toJsonValue(m_fki_creditcardmerchant_id));
    }
    if (m_s_creditcardmerchant_description_isSet) {
        obj.insert(QString("sCreditcardmerchantDescription"), ::Ezmaxapi::toJsonValue(m_s_creditcardmerchant_description));
    }
    if (m_e_paymentgateway_processor.isSet()) {
        obj.insert(QString("ePaymentgatewayProcessor"), ::Ezmaxapi::toJsonValue(m_e_paymentgateway_processor));
    }
    if (m_obj_paymentgateway_description.isSet()) {
        obj.insert(QString("objPaymentgatewayDescription"), ::Ezmaxapi::toJsonValue(m_obj_paymentgateway_description));
    }
    if (m_obj_creditcardmerchant.isSet()) {
        obj.insert(QString("objCreditcardmerchant"), ::Ezmaxapi::toJsonValue(m_obj_creditcardmerchant));
    }
    return obj;
}

qint32 Paymentgateway_Response::getPkiPaymentgatewayId() const {
    return m_pki_paymentgateway_id;
}
void Paymentgateway_Response::setPkiPaymentgatewayId(const qint32 &pki_paymentgateway_id) {
    m_pki_paymentgateway_id = pki_paymentgateway_id;
    m_pki_paymentgateway_id_isSet = true;
}

bool Paymentgateway_Response::is_pki_paymentgateway_id_Set() const{
    return m_pki_paymentgateway_id_isSet;
}

bool Paymentgateway_Response::is_pki_paymentgateway_id_Valid() const{
    return m_pki_paymentgateway_id_isValid;
}

qint32 Paymentgateway_Response::getFkiCreditcardmerchantId() const {
    return m_fki_creditcardmerchant_id;
}
void Paymentgateway_Response::setFkiCreditcardmerchantId(const qint32 &fki_creditcardmerchant_id) {
    m_fki_creditcardmerchant_id = fki_creditcardmerchant_id;
    m_fki_creditcardmerchant_id_isSet = true;
}

bool Paymentgateway_Response::is_fki_creditcardmerchant_id_Set() const{
    return m_fki_creditcardmerchant_id_isSet;
}

bool Paymentgateway_Response::is_fki_creditcardmerchant_id_Valid() const{
    return m_fki_creditcardmerchant_id_isValid;
}

QString Paymentgateway_Response::getSCreditcardmerchantDescription() const {
    return m_s_creditcardmerchant_description;
}
void Paymentgateway_Response::setSCreditcardmerchantDescription(const QString &s_creditcardmerchant_description) {
    m_s_creditcardmerchant_description = s_creditcardmerchant_description;
    m_s_creditcardmerchant_description_isSet = true;
}

bool Paymentgateway_Response::is_s_creditcardmerchant_description_Set() const{
    return m_s_creditcardmerchant_description_isSet;
}

bool Paymentgateway_Response::is_s_creditcardmerchant_description_Valid() const{
    return m_s_creditcardmerchant_description_isValid;
}

Field_ePaymentgatewayProcessor Paymentgateway_Response::getEPaymentgatewayProcessor() const {
    return m_e_paymentgateway_processor;
}
void Paymentgateway_Response::setEPaymentgatewayProcessor(const Field_ePaymentgatewayProcessor &e_paymentgateway_processor) {
    m_e_paymentgateway_processor = e_paymentgateway_processor;
    m_e_paymentgateway_processor_isSet = true;
}

bool Paymentgateway_Response::is_e_paymentgateway_processor_Set() const{
    return m_e_paymentgateway_processor_isSet;
}

bool Paymentgateway_Response::is_e_paymentgateway_processor_Valid() const{
    return m_e_paymentgateway_processor_isValid;
}

Multilingual_PaymentgatewayDescription Paymentgateway_Response::getObjPaymentgatewayDescription() const {
    return m_obj_paymentgateway_description;
}
void Paymentgateway_Response::setObjPaymentgatewayDescription(const Multilingual_PaymentgatewayDescription &obj_paymentgateway_description) {
    m_obj_paymentgateway_description = obj_paymentgateway_description;
    m_obj_paymentgateway_description_isSet = true;
}

bool Paymentgateway_Response::is_obj_paymentgateway_description_Set() const{
    return m_obj_paymentgateway_description_isSet;
}

bool Paymentgateway_Response::is_obj_paymentgateway_description_Valid() const{
    return m_obj_paymentgateway_description_isValid;
}

Creditcardmerchant_ResponseCompound Paymentgateway_Response::getObjCreditcardmerchant() const {
    return m_obj_creditcardmerchant;
}
void Paymentgateway_Response::setObjCreditcardmerchant(const Creditcardmerchant_ResponseCompound &obj_creditcardmerchant) {
    m_obj_creditcardmerchant = obj_creditcardmerchant;
    m_obj_creditcardmerchant_isSet = true;
}

bool Paymentgateway_Response::is_obj_creditcardmerchant_Set() const{
    return m_obj_creditcardmerchant_isSet;
}

bool Paymentgateway_Response::is_obj_creditcardmerchant_Valid() const{
    return m_obj_creditcardmerchant_isValid;
}

bool Paymentgateway_Response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_pki_paymentgateway_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fki_creditcardmerchant_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s_creditcardmerchant_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_e_paymentgateway_processor.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_obj_paymentgateway_description.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_obj_creditcardmerchant.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool Paymentgateway_Response::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_pki_paymentgateway_id_isValid && m_e_paymentgateway_processor_isValid && m_obj_paymentgateway_description_isValid && true;
}

} // namespace Ezmaxapi
