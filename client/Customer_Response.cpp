/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "Customer_Response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "Helpers.h"

namespace Ezmaxapi {

Customer_Response::Customer_Response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

Customer_Response::Customer_Response() {
    this->initializeModel();
}

Customer_Response::~Customer_Response() {}

void Customer_Response::initializeModel() {

    m_pki_customer_id_isSet = false;
    m_pki_customer_id_isValid = false;

    m_fki_company_id_isSet = false;
    m_fki_company_id_isValid = false;

    m_fki_customergroup_id_isSet = false;
    m_fki_customergroup_id_isValid = false;

    m_s_customer_name_isSet = false;
    m_s_customer_name_isValid = false;

    m_fki_contactinformations_id_isSet = false;
    m_fki_contactinformations_id_isValid = false;

    m_fki_contactcontainer_id_isSet = false;
    m_fki_contactcontainer_id_isValid = false;

    m_fki_image_id_isSet = false;
    m_fki_image_id_isValid = false;

    m_fki_glaccountcontainer_id_isSet = false;
    m_fki_glaccountcontainer_id_isValid = false;

    m_fki_language_id_isSet = false;
    m_fki_language_id_isValid = false;

    m_fki_department_id_isSet = false;
    m_fki_department_id_isValid = false;

    m_fki_paymentmethod_id_isSet = false;
    m_fki_paymentmethod_id_isValid = false;

    m_fki_electronicfundstransferbankaccount_id_isSet = false;
    m_fki_electronicfundstransferbankaccount_id_isValid = false;

    m_fki_electronicfundstransferbankaccount_id_directdebit_isSet = false;
    m_fki_electronicfundstransferbankaccount_id_directdebit_isValid = false;

    m_fki_sendingmethod_id_isSet = false;
    m_fki_sendingmethod_id_isValid = false;

    m_fki_taxassignment_id_isSet = false;
    m_fki_taxassignment_id_isValid = false;

    m_fki_attendancestatus_id_isSet = false;
    m_fki_attendancestatus_id_isValid = false;

    m_fki_agent_id_variableexpensechargeto_isSet = false;
    m_fki_agent_id_variableexpensechargeto_isValid = false;

    m_fki_broker_id_variableexpensechargeto_isSet = false;
    m_fki_broker_id_variableexpensechargeto_isValid = false;

    m_fki_customer_id_variableexpensechargeto_isSet = false;
    m_fki_customer_id_variableexpensechargeto_isValid = false;

    m_fki_glaccountcontainer_id_variableexpensechargeto_isSet = false;
    m_fki_glaccountcontainer_id_variableexpensechargeto_isValid = false;

    m_fki_agent_id_supplychargechargeto_isSet = false;
    m_fki_agent_id_supplychargechargeto_isValid = false;

    m_fki_broker_id_supplychargechargeto_isSet = false;
    m_fki_broker_id_supplychargechargeto_isValid = false;

    m_fki_customer_id_supplychargechargeto_isSet = false;
    m_fki_customer_id_supplychargechargeto_isValid = false;

    m_fki_glaccountcontainer_id_supplychargechargeto_isSet = false;
    m_fki_glaccountcontainer_id_supplychargechargeto_isValid = false;

    m_fki_invoicealternatelogo_id_isSet = false;
    m_fki_invoicealternatelogo_id_isValid = false;

    m_fki_synchronizationlinkserver_id_isSet = false;
    m_fki_synchronizationlinkserver_id_isValid = false;

    m_efki_user_id_isSet = false;
    m_efki_user_id_isValid = false;

    m_efks_customer_code_isSet = false;
    m_efks_customer_code_isValid = false;

    m_s_customer_code_isSet = false;
    m_s_customer_code_isValid = false;

    m_d_customer_fulltimeequivalent_isSet = false;
    m_d_customer_fulltimeequivalent_isValid = false;

    m_i_customer_photocopiercode_isSet = false;
    m_i_customer_photocopiercode_isValid = false;

    m_i_customer_longdistancecode_isSet = false;
    m_i_customer_longdistancecode_isValid = false;

    m_i_customer_timewindowstart_isSet = false;
    m_i_customer_timewindowstart_isValid = false;

    m_i_customer_timewindowend_isSet = false;
    m_i_customer_timewindowend_isValid = false;

    m_d_customer_minimumchargeableinterests_isSet = false;
    m_d_customer_minimumchargeableinterests_isValid = false;

    m_dt_customer_birthdate_isSet = false;
    m_dt_customer_birthdate_isValid = false;

    m_dt_customer_transfer_isSet = false;
    m_dt_customer_transfer_isValid = false;

    m_dt_customer_transferappointment_isSet = false;
    m_dt_customer_transferappointment_isValid = false;

    m_dt_customer_transfersurvey_isSet = false;
    m_dt_customer_transfersurvey_isValid = false;

    m_b_customer_isactive_isSet = false;
    m_b_customer_isactive_isValid = false;

    m_b_customer_variableexpensefinanced_isSet = false;
    m_b_customer_variableexpensefinanced_isValid = false;

    m_b_customer_variableexpensefinancedtaxes_isSet = false;
    m_b_customer_variableexpensefinancedtaxes_isValid = false;

    m_b_customer_supplychargefinanced_isSet = false;
    m_b_customer_supplychargefinanced_isValid = false;

    m_b_customer_supplychargefinancedtaxes_isSet = false;
    m_b_customer_supplychargefinancedtaxes_isValid = false;

    m_b_customer_attendance_isSet = false;
    m_b_customer_attendance_isValid = false;

    m_e_customer_type_isSet = false;
    m_e_customer_type_isValid = false;

    m_e_customer_marketingcorrespondence_isSet = false;
    m_e_customer_marketingcorrespondence_isValid = false;

    m_b_customer_blackcopycarbon_isSet = false;
    m_b_customer_blackcopycarbon_isValid = false;

    m_b_customer_unsubscribeinfo_isSet = false;
    m_b_customer_unsubscribeinfo_isValid = false;

    m_t_customer_comment_isSet = false;
    m_t_customer_comment_isValid = false;

    m_importid_isSet = false;
    m_importid_isValid = false;
}

void Customer_Response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void Customer_Response::fromJsonObject(QJsonObject json) {

    m_pki_customer_id_isValid = ::Ezmaxapi::fromJsonValue(m_pki_customer_id, json[QString("pkiCustomerID")]);
    m_pki_customer_id_isSet = !json[QString("pkiCustomerID")].isNull() && m_pki_customer_id_isValid;

    m_fki_company_id_isValid = ::Ezmaxapi::fromJsonValue(m_fki_company_id, json[QString("fkiCompanyID")]);
    m_fki_company_id_isSet = !json[QString("fkiCompanyID")].isNull() && m_fki_company_id_isValid;

    m_fki_customergroup_id_isValid = ::Ezmaxapi::fromJsonValue(m_fki_customergroup_id, json[QString("fkiCustomergroupID")]);
    m_fki_customergroup_id_isSet = !json[QString("fkiCustomergroupID")].isNull() && m_fki_customergroup_id_isValid;

    m_s_customer_name_isValid = ::Ezmaxapi::fromJsonValue(m_s_customer_name, json[QString("sCustomerName")]);
    m_s_customer_name_isSet = !json[QString("sCustomerName")].isNull() && m_s_customer_name_isValid;

    m_fki_contactinformations_id_isValid = ::Ezmaxapi::fromJsonValue(m_fki_contactinformations_id, json[QString("fkiContactinformationsID")]);
    m_fki_contactinformations_id_isSet = !json[QString("fkiContactinformationsID")].isNull() && m_fki_contactinformations_id_isValid;

    m_fki_contactcontainer_id_isValid = ::Ezmaxapi::fromJsonValue(m_fki_contactcontainer_id, json[QString("fkiContactcontainerID")]);
    m_fki_contactcontainer_id_isSet = !json[QString("fkiContactcontainerID")].isNull() && m_fki_contactcontainer_id_isValid;

    m_fki_image_id_isValid = ::Ezmaxapi::fromJsonValue(m_fki_image_id, json[QString("fkiImageID")]);
    m_fki_image_id_isSet = !json[QString("fkiImageID")].isNull() && m_fki_image_id_isValid;

    m_fki_glaccountcontainer_id_isValid = ::Ezmaxapi::fromJsonValue(m_fki_glaccountcontainer_id, json[QString("fkiGlaccountcontainerID")]);
    m_fki_glaccountcontainer_id_isSet = !json[QString("fkiGlaccountcontainerID")].isNull() && m_fki_glaccountcontainer_id_isValid;

    m_fki_language_id_isValid = ::Ezmaxapi::fromJsonValue(m_fki_language_id, json[QString("fkiLanguageID")]);
    m_fki_language_id_isSet = !json[QString("fkiLanguageID")].isNull() && m_fki_language_id_isValid;

    m_fki_department_id_isValid = ::Ezmaxapi::fromJsonValue(m_fki_department_id, json[QString("fkiDepartmentID")]);
    m_fki_department_id_isSet = !json[QString("fkiDepartmentID")].isNull() && m_fki_department_id_isValid;

    m_fki_paymentmethod_id_isValid = ::Ezmaxapi::fromJsonValue(m_fki_paymentmethod_id, json[QString("fkiPaymentmethodID")]);
    m_fki_paymentmethod_id_isSet = !json[QString("fkiPaymentmethodID")].isNull() && m_fki_paymentmethod_id_isValid;

    m_fki_electronicfundstransferbankaccount_id_isValid = ::Ezmaxapi::fromJsonValue(m_fki_electronicfundstransferbankaccount_id, json[QString("fkiElectronicfundstransferbankaccountID")]);
    m_fki_electronicfundstransferbankaccount_id_isSet = !json[QString("fkiElectronicfundstransferbankaccountID")].isNull() && m_fki_electronicfundstransferbankaccount_id_isValid;

    m_fki_electronicfundstransferbankaccount_id_directdebit_isValid = ::Ezmaxapi::fromJsonValue(m_fki_electronicfundstransferbankaccount_id_directdebit, json[QString("fkiElectronicfundstransferbankaccountIDDirectdebit")]);
    m_fki_electronicfundstransferbankaccount_id_directdebit_isSet = !json[QString("fkiElectronicfundstransferbankaccountIDDirectdebit")].isNull() && m_fki_electronicfundstransferbankaccount_id_directdebit_isValid;

    m_fki_sendingmethod_id_isValid = ::Ezmaxapi::fromJsonValue(m_fki_sendingmethod_id, json[QString("fkiSendingmethodID")]);
    m_fki_sendingmethod_id_isSet = !json[QString("fkiSendingmethodID")].isNull() && m_fki_sendingmethod_id_isValid;

    m_fki_taxassignment_id_isValid = ::Ezmaxapi::fromJsonValue(m_fki_taxassignment_id, json[QString("fkiTaxassignmentID")]);
    m_fki_taxassignment_id_isSet = !json[QString("fkiTaxassignmentID")].isNull() && m_fki_taxassignment_id_isValid;

    m_fki_attendancestatus_id_isValid = ::Ezmaxapi::fromJsonValue(m_fki_attendancestatus_id, json[QString("fkiAttendancestatusID")]);
    m_fki_attendancestatus_id_isSet = !json[QString("fkiAttendancestatusID")].isNull() && m_fki_attendancestatus_id_isValid;

    m_fki_agent_id_variableexpensechargeto_isValid = ::Ezmaxapi::fromJsonValue(m_fki_agent_id_variableexpensechargeto, json[QString("fkiAgentIDVariableexpensechargeto")]);
    m_fki_agent_id_variableexpensechargeto_isSet = !json[QString("fkiAgentIDVariableexpensechargeto")].isNull() && m_fki_agent_id_variableexpensechargeto_isValid;

    m_fki_broker_id_variableexpensechargeto_isValid = ::Ezmaxapi::fromJsonValue(m_fki_broker_id_variableexpensechargeto, json[QString("fkiBrokerIDVariableexpensechargeto")]);
    m_fki_broker_id_variableexpensechargeto_isSet = !json[QString("fkiBrokerIDVariableexpensechargeto")].isNull() && m_fki_broker_id_variableexpensechargeto_isValid;

    m_fki_customer_id_variableexpensechargeto_isValid = ::Ezmaxapi::fromJsonValue(m_fki_customer_id_variableexpensechargeto, json[QString("fkiCustomerIDVariableexpensechargeto")]);
    m_fki_customer_id_variableexpensechargeto_isSet = !json[QString("fkiCustomerIDVariableexpensechargeto")].isNull() && m_fki_customer_id_variableexpensechargeto_isValid;

    m_fki_glaccountcontainer_id_variableexpensechargeto_isValid = ::Ezmaxapi::fromJsonValue(m_fki_glaccountcontainer_id_variableexpensechargeto, json[QString("fkiGlaccountcontainerIDVariableexpensechargeto")]);
    m_fki_glaccountcontainer_id_variableexpensechargeto_isSet = !json[QString("fkiGlaccountcontainerIDVariableexpensechargeto")].isNull() && m_fki_glaccountcontainer_id_variableexpensechargeto_isValid;

    m_fki_agent_id_supplychargechargeto_isValid = ::Ezmaxapi::fromJsonValue(m_fki_agent_id_supplychargechargeto, json[QString("fkiAgentIDSupplychargechargeto")]);
    m_fki_agent_id_supplychargechargeto_isSet = !json[QString("fkiAgentIDSupplychargechargeto")].isNull() && m_fki_agent_id_supplychargechargeto_isValid;

    m_fki_broker_id_supplychargechargeto_isValid = ::Ezmaxapi::fromJsonValue(m_fki_broker_id_supplychargechargeto, json[QString("fkiBrokerIDSupplychargechargeto")]);
    m_fki_broker_id_supplychargechargeto_isSet = !json[QString("fkiBrokerIDSupplychargechargeto")].isNull() && m_fki_broker_id_supplychargechargeto_isValid;

    m_fki_customer_id_supplychargechargeto_isValid = ::Ezmaxapi::fromJsonValue(m_fki_customer_id_supplychargechargeto, json[QString("fkiCustomerIDSupplychargechargeto")]);
    m_fki_customer_id_supplychargechargeto_isSet = !json[QString("fkiCustomerIDSupplychargechargeto")].isNull() && m_fki_customer_id_supplychargechargeto_isValid;

    m_fki_glaccountcontainer_id_supplychargechargeto_isValid = ::Ezmaxapi::fromJsonValue(m_fki_glaccountcontainer_id_supplychargechargeto, json[QString("fkiGlaccountcontainerIDSupplychargechargeto")]);
    m_fki_glaccountcontainer_id_supplychargechargeto_isSet = !json[QString("fkiGlaccountcontainerIDSupplychargechargeto")].isNull() && m_fki_glaccountcontainer_id_supplychargechargeto_isValid;

    m_fki_invoicealternatelogo_id_isValid = ::Ezmaxapi::fromJsonValue(m_fki_invoicealternatelogo_id, json[QString("fkiInvoicealternatelogoID")]);
    m_fki_invoicealternatelogo_id_isSet = !json[QString("fkiInvoicealternatelogoID")].isNull() && m_fki_invoicealternatelogo_id_isValid;

    m_fki_synchronizationlinkserver_id_isValid = ::Ezmaxapi::fromJsonValue(m_fki_synchronizationlinkserver_id, json[QString("fkiSynchronizationlinkserverID")]);
    m_fki_synchronizationlinkserver_id_isSet = !json[QString("fkiSynchronizationlinkserverID")].isNull() && m_fki_synchronizationlinkserver_id_isValid;

    m_efki_user_id_isValid = ::Ezmaxapi::fromJsonValue(m_efki_user_id, json[QString("efkiUserID")]);
    m_efki_user_id_isSet = !json[QString("efkiUserID")].isNull() && m_efki_user_id_isValid;

    m_efks_customer_code_isValid = ::Ezmaxapi::fromJsonValue(m_efks_customer_code, json[QString("efksCustomerCode")]);
    m_efks_customer_code_isSet = !json[QString("efksCustomerCode")].isNull() && m_efks_customer_code_isValid;

    m_s_customer_code_isValid = ::Ezmaxapi::fromJsonValue(m_s_customer_code, json[QString("sCustomerCode")]);
    m_s_customer_code_isSet = !json[QString("sCustomerCode")].isNull() && m_s_customer_code_isValid;

    m_d_customer_fulltimeequivalent_isValid = ::Ezmaxapi::fromJsonValue(m_d_customer_fulltimeequivalent, json[QString("dCustomerFulltimeequivalent")]);
    m_d_customer_fulltimeequivalent_isSet = !json[QString("dCustomerFulltimeequivalent")].isNull() && m_d_customer_fulltimeequivalent_isValid;

    m_i_customer_photocopiercode_isValid = ::Ezmaxapi::fromJsonValue(m_i_customer_photocopiercode, json[QString("iCustomerPhotocopiercode")]);
    m_i_customer_photocopiercode_isSet = !json[QString("iCustomerPhotocopiercode")].isNull() && m_i_customer_photocopiercode_isValid;

    m_i_customer_longdistancecode_isValid = ::Ezmaxapi::fromJsonValue(m_i_customer_longdistancecode, json[QString("iCustomerLongdistancecode")]);
    m_i_customer_longdistancecode_isSet = !json[QString("iCustomerLongdistancecode")].isNull() && m_i_customer_longdistancecode_isValid;

    m_i_customer_timewindowstart_isValid = ::Ezmaxapi::fromJsonValue(m_i_customer_timewindowstart, json[QString("iCustomerTimewindowstart")]);
    m_i_customer_timewindowstart_isSet = !json[QString("iCustomerTimewindowstart")].isNull() && m_i_customer_timewindowstart_isValid;

    m_i_customer_timewindowend_isValid = ::Ezmaxapi::fromJsonValue(m_i_customer_timewindowend, json[QString("iCustomerTimewindowend")]);
    m_i_customer_timewindowend_isSet = !json[QString("iCustomerTimewindowend")].isNull() && m_i_customer_timewindowend_isValid;

    m_d_customer_minimumchargeableinterests_isValid = ::Ezmaxapi::fromJsonValue(m_d_customer_minimumchargeableinterests, json[QString("dCustomerMinimumchargeableinterests")]);
    m_d_customer_minimumchargeableinterests_isSet = !json[QString("dCustomerMinimumchargeableinterests")].isNull() && m_d_customer_minimumchargeableinterests_isValid;

    m_dt_customer_birthdate_isValid = ::Ezmaxapi::fromJsonValue(m_dt_customer_birthdate, json[QString("dtCustomerBirthdate")]);
    m_dt_customer_birthdate_isSet = !json[QString("dtCustomerBirthdate")].isNull() && m_dt_customer_birthdate_isValid;

    m_dt_customer_transfer_isValid = ::Ezmaxapi::fromJsonValue(m_dt_customer_transfer, json[QString("dtCustomerTransfer")]);
    m_dt_customer_transfer_isSet = !json[QString("dtCustomerTransfer")].isNull() && m_dt_customer_transfer_isValid;

    m_dt_customer_transferappointment_isValid = ::Ezmaxapi::fromJsonValue(m_dt_customer_transferappointment, json[QString("dtCustomerTransferappointment")]);
    m_dt_customer_transferappointment_isSet = !json[QString("dtCustomerTransferappointment")].isNull() && m_dt_customer_transferappointment_isValid;

    m_dt_customer_transfersurvey_isValid = ::Ezmaxapi::fromJsonValue(m_dt_customer_transfersurvey, json[QString("dtCustomerTransfersurvey")]);
    m_dt_customer_transfersurvey_isSet = !json[QString("dtCustomerTransfersurvey")].isNull() && m_dt_customer_transfersurvey_isValid;

    m_b_customer_isactive_isValid = ::Ezmaxapi::fromJsonValue(m_b_customer_isactive, json[QString("bCustomerIsactive")]);
    m_b_customer_isactive_isSet = !json[QString("bCustomerIsactive")].isNull() && m_b_customer_isactive_isValid;

    m_b_customer_variableexpensefinanced_isValid = ::Ezmaxapi::fromJsonValue(m_b_customer_variableexpensefinanced, json[QString("bCustomerVariableexpensefinanced")]);
    m_b_customer_variableexpensefinanced_isSet = !json[QString("bCustomerVariableexpensefinanced")].isNull() && m_b_customer_variableexpensefinanced_isValid;

    m_b_customer_variableexpensefinancedtaxes_isValid = ::Ezmaxapi::fromJsonValue(m_b_customer_variableexpensefinancedtaxes, json[QString("bCustomerVariableexpensefinancedtaxes")]);
    m_b_customer_variableexpensefinancedtaxes_isSet = !json[QString("bCustomerVariableexpensefinancedtaxes")].isNull() && m_b_customer_variableexpensefinancedtaxes_isValid;

    m_b_customer_supplychargefinanced_isValid = ::Ezmaxapi::fromJsonValue(m_b_customer_supplychargefinanced, json[QString("bCustomerSupplychargefinanced")]);
    m_b_customer_supplychargefinanced_isSet = !json[QString("bCustomerSupplychargefinanced")].isNull() && m_b_customer_supplychargefinanced_isValid;

    m_b_customer_supplychargefinancedtaxes_isValid = ::Ezmaxapi::fromJsonValue(m_b_customer_supplychargefinancedtaxes, json[QString("bCustomerSupplychargefinancedtaxes")]);
    m_b_customer_supplychargefinancedtaxes_isSet = !json[QString("bCustomerSupplychargefinancedtaxes")].isNull() && m_b_customer_supplychargefinancedtaxes_isValid;

    m_b_customer_attendance_isValid = ::Ezmaxapi::fromJsonValue(m_b_customer_attendance, json[QString("bCustomerAttendance")]);
    m_b_customer_attendance_isSet = !json[QString("bCustomerAttendance")].isNull() && m_b_customer_attendance_isValid;

    m_e_customer_type_isValid = ::Ezmaxapi::fromJsonValue(m_e_customer_type, json[QString("eCustomerType")]);
    m_e_customer_type_isSet = !json[QString("eCustomerType")].isNull() && m_e_customer_type_isValid;

    m_e_customer_marketingcorrespondence_isValid = ::Ezmaxapi::fromJsonValue(m_e_customer_marketingcorrespondence, json[QString("eCustomerMarketingcorrespondence")]);
    m_e_customer_marketingcorrespondence_isSet = !json[QString("eCustomerMarketingcorrespondence")].isNull() && m_e_customer_marketingcorrespondence_isValid;

    m_b_customer_blackcopycarbon_isValid = ::Ezmaxapi::fromJsonValue(m_b_customer_blackcopycarbon, json[QString("bCustomerBlackcopycarbon")]);
    m_b_customer_blackcopycarbon_isSet = !json[QString("bCustomerBlackcopycarbon")].isNull() && m_b_customer_blackcopycarbon_isValid;

    m_b_customer_unsubscribeinfo_isValid = ::Ezmaxapi::fromJsonValue(m_b_customer_unsubscribeinfo, json[QString("bCustomerUnsubscribeinfo")]);
    m_b_customer_unsubscribeinfo_isSet = !json[QString("bCustomerUnsubscribeinfo")].isNull() && m_b_customer_unsubscribeinfo_isValid;

    m_t_customer_comment_isValid = ::Ezmaxapi::fromJsonValue(m_t_customer_comment, json[QString("tCustomerComment")]);
    m_t_customer_comment_isSet = !json[QString("tCustomerComment")].isNull() && m_t_customer_comment_isValid;

    m_importid_isValid = ::Ezmaxapi::fromJsonValue(m_importid, json[QString("IMPORTID")]);
    m_importid_isSet = !json[QString("IMPORTID")].isNull() && m_importid_isValid;
}

QString Customer_Response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject Customer_Response::asJsonObject() const {
    QJsonObject obj;
    if (m_pki_customer_id_isSet) {
        obj.insert(QString("pkiCustomerID"), ::Ezmaxapi::toJsonValue(m_pki_customer_id));
    }
    if (m_fki_company_id_isSet) {
        obj.insert(QString("fkiCompanyID"), ::Ezmaxapi::toJsonValue(m_fki_company_id));
    }
    if (m_fki_customergroup_id_isSet) {
        obj.insert(QString("fkiCustomergroupID"), ::Ezmaxapi::toJsonValue(m_fki_customergroup_id));
    }
    if (m_s_customer_name_isSet) {
        obj.insert(QString("sCustomerName"), ::Ezmaxapi::toJsonValue(m_s_customer_name));
    }
    if (m_fki_contactinformations_id_isSet) {
        obj.insert(QString("fkiContactinformationsID"), ::Ezmaxapi::toJsonValue(m_fki_contactinformations_id));
    }
    if (m_fki_contactcontainer_id_isSet) {
        obj.insert(QString("fkiContactcontainerID"), ::Ezmaxapi::toJsonValue(m_fki_contactcontainer_id));
    }
    if (m_fki_image_id_isSet) {
        obj.insert(QString("fkiImageID"), ::Ezmaxapi::toJsonValue(m_fki_image_id));
    }
    if (m_fki_glaccountcontainer_id_isSet) {
        obj.insert(QString("fkiGlaccountcontainerID"), ::Ezmaxapi::toJsonValue(m_fki_glaccountcontainer_id));
    }
    if (m_fki_language_id_isSet) {
        obj.insert(QString("fkiLanguageID"), ::Ezmaxapi::toJsonValue(m_fki_language_id));
    }
    if (m_fki_department_id_isSet) {
        obj.insert(QString("fkiDepartmentID"), ::Ezmaxapi::toJsonValue(m_fki_department_id));
    }
    if (m_fki_paymentmethod_id_isSet) {
        obj.insert(QString("fkiPaymentmethodID"), ::Ezmaxapi::toJsonValue(m_fki_paymentmethod_id));
    }
    if (m_fki_electronicfundstransferbankaccount_id_isSet) {
        obj.insert(QString("fkiElectronicfundstransferbankaccountID"), ::Ezmaxapi::toJsonValue(m_fki_electronicfundstransferbankaccount_id));
    }
    if (m_fki_electronicfundstransferbankaccount_id_directdebit_isSet) {
        obj.insert(QString("fkiElectronicfundstransferbankaccountIDDirectdebit"), ::Ezmaxapi::toJsonValue(m_fki_electronicfundstransferbankaccount_id_directdebit));
    }
    if (m_fki_sendingmethod_id_isSet) {
        obj.insert(QString("fkiSendingmethodID"), ::Ezmaxapi::toJsonValue(m_fki_sendingmethod_id));
    }
    if (m_fki_taxassignment_id_isSet) {
        obj.insert(QString("fkiTaxassignmentID"), ::Ezmaxapi::toJsonValue(m_fki_taxassignment_id));
    }
    if (m_fki_attendancestatus_id_isSet) {
        obj.insert(QString("fkiAttendancestatusID"), ::Ezmaxapi::toJsonValue(m_fki_attendancestatus_id));
    }
    if (m_fki_agent_id_variableexpensechargeto_isSet) {
        obj.insert(QString("fkiAgentIDVariableexpensechargeto"), ::Ezmaxapi::toJsonValue(m_fki_agent_id_variableexpensechargeto));
    }
    if (m_fki_broker_id_variableexpensechargeto_isSet) {
        obj.insert(QString("fkiBrokerIDVariableexpensechargeto"), ::Ezmaxapi::toJsonValue(m_fki_broker_id_variableexpensechargeto));
    }
    if (m_fki_customer_id_variableexpensechargeto_isSet) {
        obj.insert(QString("fkiCustomerIDVariableexpensechargeto"), ::Ezmaxapi::toJsonValue(m_fki_customer_id_variableexpensechargeto));
    }
    if (m_fki_glaccountcontainer_id_variableexpensechargeto_isSet) {
        obj.insert(QString("fkiGlaccountcontainerIDVariableexpensechargeto"), ::Ezmaxapi::toJsonValue(m_fki_glaccountcontainer_id_variableexpensechargeto));
    }
    if (m_fki_agent_id_supplychargechargeto_isSet) {
        obj.insert(QString("fkiAgentIDSupplychargechargeto"), ::Ezmaxapi::toJsonValue(m_fki_agent_id_supplychargechargeto));
    }
    if (m_fki_broker_id_supplychargechargeto_isSet) {
        obj.insert(QString("fkiBrokerIDSupplychargechargeto"), ::Ezmaxapi::toJsonValue(m_fki_broker_id_supplychargechargeto));
    }
    if (m_fki_customer_id_supplychargechargeto_isSet) {
        obj.insert(QString("fkiCustomerIDSupplychargechargeto"), ::Ezmaxapi::toJsonValue(m_fki_customer_id_supplychargechargeto));
    }
    if (m_fki_glaccountcontainer_id_supplychargechargeto_isSet) {
        obj.insert(QString("fkiGlaccountcontainerIDSupplychargechargeto"), ::Ezmaxapi::toJsonValue(m_fki_glaccountcontainer_id_supplychargechargeto));
    }
    if (m_fki_invoicealternatelogo_id_isSet) {
        obj.insert(QString("fkiInvoicealternatelogoID"), ::Ezmaxapi::toJsonValue(m_fki_invoicealternatelogo_id));
    }
    if (m_fki_synchronizationlinkserver_id_isSet) {
        obj.insert(QString("fkiSynchronizationlinkserverID"), ::Ezmaxapi::toJsonValue(m_fki_synchronizationlinkserver_id));
    }
    if (m_efki_user_id_isSet) {
        obj.insert(QString("efkiUserID"), ::Ezmaxapi::toJsonValue(m_efki_user_id));
    }
    if (m_efks_customer_code_isSet) {
        obj.insert(QString("efksCustomerCode"), ::Ezmaxapi::toJsonValue(m_efks_customer_code));
    }
    if (m_s_customer_code_isSet) {
        obj.insert(QString("sCustomerCode"), ::Ezmaxapi::toJsonValue(m_s_customer_code));
    }
    if (m_d_customer_fulltimeequivalent_isSet) {
        obj.insert(QString("dCustomerFulltimeequivalent"), ::Ezmaxapi::toJsonValue(m_d_customer_fulltimeequivalent));
    }
    if (m_i_customer_photocopiercode_isSet) {
        obj.insert(QString("iCustomerPhotocopiercode"), ::Ezmaxapi::toJsonValue(m_i_customer_photocopiercode));
    }
    if (m_i_customer_longdistancecode_isSet) {
        obj.insert(QString("iCustomerLongdistancecode"), ::Ezmaxapi::toJsonValue(m_i_customer_longdistancecode));
    }
    if (m_i_customer_timewindowstart_isSet) {
        obj.insert(QString("iCustomerTimewindowstart"), ::Ezmaxapi::toJsonValue(m_i_customer_timewindowstart));
    }
    if (m_i_customer_timewindowend_isSet) {
        obj.insert(QString("iCustomerTimewindowend"), ::Ezmaxapi::toJsonValue(m_i_customer_timewindowend));
    }
    if (m_d_customer_minimumchargeableinterests_isSet) {
        obj.insert(QString("dCustomerMinimumchargeableinterests"), ::Ezmaxapi::toJsonValue(m_d_customer_minimumchargeableinterests));
    }
    if (m_dt_customer_birthdate_isSet) {
        obj.insert(QString("dtCustomerBirthdate"), ::Ezmaxapi::toJsonValue(m_dt_customer_birthdate));
    }
    if (m_dt_customer_transfer_isSet) {
        obj.insert(QString("dtCustomerTransfer"), ::Ezmaxapi::toJsonValue(m_dt_customer_transfer));
    }
    if (m_dt_customer_transferappointment_isSet) {
        obj.insert(QString("dtCustomerTransferappointment"), ::Ezmaxapi::toJsonValue(m_dt_customer_transferappointment));
    }
    if (m_dt_customer_transfersurvey_isSet) {
        obj.insert(QString("dtCustomerTransfersurvey"), ::Ezmaxapi::toJsonValue(m_dt_customer_transfersurvey));
    }
    if (m_b_customer_isactive_isSet) {
        obj.insert(QString("bCustomerIsactive"), ::Ezmaxapi::toJsonValue(m_b_customer_isactive));
    }
    if (m_b_customer_variableexpensefinanced_isSet) {
        obj.insert(QString("bCustomerVariableexpensefinanced"), ::Ezmaxapi::toJsonValue(m_b_customer_variableexpensefinanced));
    }
    if (m_b_customer_variableexpensefinancedtaxes_isSet) {
        obj.insert(QString("bCustomerVariableexpensefinancedtaxes"), ::Ezmaxapi::toJsonValue(m_b_customer_variableexpensefinancedtaxes));
    }
    if (m_b_customer_supplychargefinanced_isSet) {
        obj.insert(QString("bCustomerSupplychargefinanced"), ::Ezmaxapi::toJsonValue(m_b_customer_supplychargefinanced));
    }
    if (m_b_customer_supplychargefinancedtaxes_isSet) {
        obj.insert(QString("bCustomerSupplychargefinancedtaxes"), ::Ezmaxapi::toJsonValue(m_b_customer_supplychargefinancedtaxes));
    }
    if (m_b_customer_attendance_isSet) {
        obj.insert(QString("bCustomerAttendance"), ::Ezmaxapi::toJsonValue(m_b_customer_attendance));
    }
    if (m_e_customer_type.isSet()) {
        obj.insert(QString("eCustomerType"), ::Ezmaxapi::toJsonValue(m_e_customer_type));
    }
    if (m_e_customer_marketingcorrespondence.isSet()) {
        obj.insert(QString("eCustomerMarketingcorrespondence"), ::Ezmaxapi::toJsonValue(m_e_customer_marketingcorrespondence));
    }
    if (m_b_customer_blackcopycarbon_isSet) {
        obj.insert(QString("bCustomerBlackcopycarbon"), ::Ezmaxapi::toJsonValue(m_b_customer_blackcopycarbon));
    }
    if (m_b_customer_unsubscribeinfo_isSet) {
        obj.insert(QString("bCustomerUnsubscribeinfo"), ::Ezmaxapi::toJsonValue(m_b_customer_unsubscribeinfo));
    }
    if (m_t_customer_comment_isSet) {
        obj.insert(QString("tCustomerComment"), ::Ezmaxapi::toJsonValue(m_t_customer_comment));
    }
    if (m_importid_isSet) {
        obj.insert(QString("IMPORTID"), ::Ezmaxapi::toJsonValue(m_importid));
    }
    return obj;
}

qint32 Customer_Response::getPkiCustomerId() const {
    return m_pki_customer_id;
}
void Customer_Response::setPkiCustomerId(const qint32 &pki_customer_id) {
    m_pki_customer_id = pki_customer_id;
    m_pki_customer_id_isSet = true;
}

bool Customer_Response::is_pki_customer_id_Set() const{
    return m_pki_customer_id_isSet;
}

bool Customer_Response::is_pki_customer_id_Valid() const{
    return m_pki_customer_id_isValid;
}

qint32 Customer_Response::getFkiCompanyId() const {
    return m_fki_company_id;
}
void Customer_Response::setFkiCompanyId(const qint32 &fki_company_id) {
    m_fki_company_id = fki_company_id;
    m_fki_company_id_isSet = true;
}

bool Customer_Response::is_fki_company_id_Set() const{
    return m_fki_company_id_isSet;
}

bool Customer_Response::is_fki_company_id_Valid() const{
    return m_fki_company_id_isValid;
}

qint32 Customer_Response::getFkiCustomergroupId() const {
    return m_fki_customergroup_id;
}
void Customer_Response::setFkiCustomergroupId(const qint32 &fki_customergroup_id) {
    m_fki_customergroup_id = fki_customergroup_id;
    m_fki_customergroup_id_isSet = true;
}

bool Customer_Response::is_fki_customergroup_id_Set() const{
    return m_fki_customergroup_id_isSet;
}

bool Customer_Response::is_fki_customergroup_id_Valid() const{
    return m_fki_customergroup_id_isValid;
}

QString Customer_Response::getSCustomerName() const {
    return m_s_customer_name;
}
void Customer_Response::setSCustomerName(const QString &s_customer_name) {
    m_s_customer_name = s_customer_name;
    m_s_customer_name_isSet = true;
}

bool Customer_Response::is_s_customer_name_Set() const{
    return m_s_customer_name_isSet;
}

bool Customer_Response::is_s_customer_name_Valid() const{
    return m_s_customer_name_isValid;
}

qint32 Customer_Response::getFkiContactinformationsId() const {
    return m_fki_contactinformations_id;
}
void Customer_Response::setFkiContactinformationsId(const qint32 &fki_contactinformations_id) {
    m_fki_contactinformations_id = fki_contactinformations_id;
    m_fki_contactinformations_id_isSet = true;
}

bool Customer_Response::is_fki_contactinformations_id_Set() const{
    return m_fki_contactinformations_id_isSet;
}

bool Customer_Response::is_fki_contactinformations_id_Valid() const{
    return m_fki_contactinformations_id_isValid;
}

qint32 Customer_Response::getFkiContactcontainerId() const {
    return m_fki_contactcontainer_id;
}
void Customer_Response::setFkiContactcontainerId(const qint32 &fki_contactcontainer_id) {
    m_fki_contactcontainer_id = fki_contactcontainer_id;
    m_fki_contactcontainer_id_isSet = true;
}

bool Customer_Response::is_fki_contactcontainer_id_Set() const{
    return m_fki_contactcontainer_id_isSet;
}

bool Customer_Response::is_fki_contactcontainer_id_Valid() const{
    return m_fki_contactcontainer_id_isValid;
}

qint32 Customer_Response::getFkiImageId() const {
    return m_fki_image_id;
}
void Customer_Response::setFkiImageId(const qint32 &fki_image_id) {
    m_fki_image_id = fki_image_id;
    m_fki_image_id_isSet = true;
}

bool Customer_Response::is_fki_image_id_Set() const{
    return m_fki_image_id_isSet;
}

bool Customer_Response::is_fki_image_id_Valid() const{
    return m_fki_image_id_isValid;
}

qint32 Customer_Response::getFkiGlaccountcontainerId() const {
    return m_fki_glaccountcontainer_id;
}
void Customer_Response::setFkiGlaccountcontainerId(const qint32 &fki_glaccountcontainer_id) {
    m_fki_glaccountcontainer_id = fki_glaccountcontainer_id;
    m_fki_glaccountcontainer_id_isSet = true;
}

bool Customer_Response::is_fki_glaccountcontainer_id_Set() const{
    return m_fki_glaccountcontainer_id_isSet;
}

bool Customer_Response::is_fki_glaccountcontainer_id_Valid() const{
    return m_fki_glaccountcontainer_id_isValid;
}

qint32 Customer_Response::getFkiLanguageId() const {
    return m_fki_language_id;
}
void Customer_Response::setFkiLanguageId(const qint32 &fki_language_id) {
    m_fki_language_id = fki_language_id;
    m_fki_language_id_isSet = true;
}

bool Customer_Response::is_fki_language_id_Set() const{
    return m_fki_language_id_isSet;
}

bool Customer_Response::is_fki_language_id_Valid() const{
    return m_fki_language_id_isValid;
}

qint32 Customer_Response::getFkiDepartmentId() const {
    return m_fki_department_id;
}
void Customer_Response::setFkiDepartmentId(const qint32 &fki_department_id) {
    m_fki_department_id = fki_department_id;
    m_fki_department_id_isSet = true;
}

bool Customer_Response::is_fki_department_id_Set() const{
    return m_fki_department_id_isSet;
}

bool Customer_Response::is_fki_department_id_Valid() const{
    return m_fki_department_id_isValid;
}

qint32 Customer_Response::getFkiPaymentmethodId() const {
    return m_fki_paymentmethod_id;
}
void Customer_Response::setFkiPaymentmethodId(const qint32 &fki_paymentmethod_id) {
    m_fki_paymentmethod_id = fki_paymentmethod_id;
    m_fki_paymentmethod_id_isSet = true;
}

bool Customer_Response::is_fki_paymentmethod_id_Set() const{
    return m_fki_paymentmethod_id_isSet;
}

bool Customer_Response::is_fki_paymentmethod_id_Valid() const{
    return m_fki_paymentmethod_id_isValid;
}

qint32 Customer_Response::getFkiElectronicfundstransferbankaccountId() const {
    return m_fki_electronicfundstransferbankaccount_id;
}
void Customer_Response::setFkiElectronicfundstransferbankaccountId(const qint32 &fki_electronicfundstransferbankaccount_id) {
    m_fki_electronicfundstransferbankaccount_id = fki_electronicfundstransferbankaccount_id;
    m_fki_electronicfundstransferbankaccount_id_isSet = true;
}

bool Customer_Response::is_fki_electronicfundstransferbankaccount_id_Set() const{
    return m_fki_electronicfundstransferbankaccount_id_isSet;
}

bool Customer_Response::is_fki_electronicfundstransferbankaccount_id_Valid() const{
    return m_fki_electronicfundstransferbankaccount_id_isValid;
}

qint32 Customer_Response::getFkiElectronicfundstransferbankaccountIdDirectdebit() const {
    return m_fki_electronicfundstransferbankaccount_id_directdebit;
}
void Customer_Response::setFkiElectronicfundstransferbankaccountIdDirectdebit(const qint32 &fki_electronicfundstransferbankaccount_id_directdebit) {
    m_fki_electronicfundstransferbankaccount_id_directdebit = fki_electronicfundstransferbankaccount_id_directdebit;
    m_fki_electronicfundstransferbankaccount_id_directdebit_isSet = true;
}

bool Customer_Response::is_fki_electronicfundstransferbankaccount_id_directdebit_Set() const{
    return m_fki_electronicfundstransferbankaccount_id_directdebit_isSet;
}

bool Customer_Response::is_fki_electronicfundstransferbankaccount_id_directdebit_Valid() const{
    return m_fki_electronicfundstransferbankaccount_id_directdebit_isValid;
}

qint32 Customer_Response::getFkiSendingmethodId() const {
    return m_fki_sendingmethod_id;
}
void Customer_Response::setFkiSendingmethodId(const qint32 &fki_sendingmethod_id) {
    m_fki_sendingmethod_id = fki_sendingmethod_id;
    m_fki_sendingmethod_id_isSet = true;
}

bool Customer_Response::is_fki_sendingmethod_id_Set() const{
    return m_fki_sendingmethod_id_isSet;
}

bool Customer_Response::is_fki_sendingmethod_id_Valid() const{
    return m_fki_sendingmethod_id_isValid;
}

qint32 Customer_Response::getFkiTaxassignmentId() const {
    return m_fki_taxassignment_id;
}
void Customer_Response::setFkiTaxassignmentId(const qint32 &fki_taxassignment_id) {
    m_fki_taxassignment_id = fki_taxassignment_id;
    m_fki_taxassignment_id_isSet = true;
}

bool Customer_Response::is_fki_taxassignment_id_Set() const{
    return m_fki_taxassignment_id_isSet;
}

bool Customer_Response::is_fki_taxassignment_id_Valid() const{
    return m_fki_taxassignment_id_isValid;
}

qint32 Customer_Response::getFkiAttendancestatusId() const {
    return m_fki_attendancestatus_id;
}
void Customer_Response::setFkiAttendancestatusId(const qint32 &fki_attendancestatus_id) {
    m_fki_attendancestatus_id = fki_attendancestatus_id;
    m_fki_attendancestatus_id_isSet = true;
}

bool Customer_Response::is_fki_attendancestatus_id_Set() const{
    return m_fki_attendancestatus_id_isSet;
}

bool Customer_Response::is_fki_attendancestatus_id_Valid() const{
    return m_fki_attendancestatus_id_isValid;
}

qint32 Customer_Response::getFkiAgentIdVariableexpensechargeto() const {
    return m_fki_agent_id_variableexpensechargeto;
}
void Customer_Response::setFkiAgentIdVariableexpensechargeto(const qint32 &fki_agent_id_variableexpensechargeto) {
    m_fki_agent_id_variableexpensechargeto = fki_agent_id_variableexpensechargeto;
    m_fki_agent_id_variableexpensechargeto_isSet = true;
}

bool Customer_Response::is_fki_agent_id_variableexpensechargeto_Set() const{
    return m_fki_agent_id_variableexpensechargeto_isSet;
}

bool Customer_Response::is_fki_agent_id_variableexpensechargeto_Valid() const{
    return m_fki_agent_id_variableexpensechargeto_isValid;
}

qint32 Customer_Response::getFkiBrokerIdVariableexpensechargeto() const {
    return m_fki_broker_id_variableexpensechargeto;
}
void Customer_Response::setFkiBrokerIdVariableexpensechargeto(const qint32 &fki_broker_id_variableexpensechargeto) {
    m_fki_broker_id_variableexpensechargeto = fki_broker_id_variableexpensechargeto;
    m_fki_broker_id_variableexpensechargeto_isSet = true;
}

bool Customer_Response::is_fki_broker_id_variableexpensechargeto_Set() const{
    return m_fki_broker_id_variableexpensechargeto_isSet;
}

bool Customer_Response::is_fki_broker_id_variableexpensechargeto_Valid() const{
    return m_fki_broker_id_variableexpensechargeto_isValid;
}

qint32 Customer_Response::getFkiCustomerIdVariableexpensechargeto() const {
    return m_fki_customer_id_variableexpensechargeto;
}
void Customer_Response::setFkiCustomerIdVariableexpensechargeto(const qint32 &fki_customer_id_variableexpensechargeto) {
    m_fki_customer_id_variableexpensechargeto = fki_customer_id_variableexpensechargeto;
    m_fki_customer_id_variableexpensechargeto_isSet = true;
}

bool Customer_Response::is_fki_customer_id_variableexpensechargeto_Set() const{
    return m_fki_customer_id_variableexpensechargeto_isSet;
}

bool Customer_Response::is_fki_customer_id_variableexpensechargeto_Valid() const{
    return m_fki_customer_id_variableexpensechargeto_isValid;
}

qint32 Customer_Response::getFkiGlaccountcontainerIdVariableexpensechargeto() const {
    return m_fki_glaccountcontainer_id_variableexpensechargeto;
}
void Customer_Response::setFkiGlaccountcontainerIdVariableexpensechargeto(const qint32 &fki_glaccountcontainer_id_variableexpensechargeto) {
    m_fki_glaccountcontainer_id_variableexpensechargeto = fki_glaccountcontainer_id_variableexpensechargeto;
    m_fki_glaccountcontainer_id_variableexpensechargeto_isSet = true;
}

bool Customer_Response::is_fki_glaccountcontainer_id_variableexpensechargeto_Set() const{
    return m_fki_glaccountcontainer_id_variableexpensechargeto_isSet;
}

bool Customer_Response::is_fki_glaccountcontainer_id_variableexpensechargeto_Valid() const{
    return m_fki_glaccountcontainer_id_variableexpensechargeto_isValid;
}

qint32 Customer_Response::getFkiAgentIdSupplychargechargeto() const {
    return m_fki_agent_id_supplychargechargeto;
}
void Customer_Response::setFkiAgentIdSupplychargechargeto(const qint32 &fki_agent_id_supplychargechargeto) {
    m_fki_agent_id_supplychargechargeto = fki_agent_id_supplychargechargeto;
    m_fki_agent_id_supplychargechargeto_isSet = true;
}

bool Customer_Response::is_fki_agent_id_supplychargechargeto_Set() const{
    return m_fki_agent_id_supplychargechargeto_isSet;
}

bool Customer_Response::is_fki_agent_id_supplychargechargeto_Valid() const{
    return m_fki_agent_id_supplychargechargeto_isValid;
}

qint32 Customer_Response::getFkiBrokerIdSupplychargechargeto() const {
    return m_fki_broker_id_supplychargechargeto;
}
void Customer_Response::setFkiBrokerIdSupplychargechargeto(const qint32 &fki_broker_id_supplychargechargeto) {
    m_fki_broker_id_supplychargechargeto = fki_broker_id_supplychargechargeto;
    m_fki_broker_id_supplychargechargeto_isSet = true;
}

bool Customer_Response::is_fki_broker_id_supplychargechargeto_Set() const{
    return m_fki_broker_id_supplychargechargeto_isSet;
}

bool Customer_Response::is_fki_broker_id_supplychargechargeto_Valid() const{
    return m_fki_broker_id_supplychargechargeto_isValid;
}

qint32 Customer_Response::getFkiCustomerIdSupplychargechargeto() const {
    return m_fki_customer_id_supplychargechargeto;
}
void Customer_Response::setFkiCustomerIdSupplychargechargeto(const qint32 &fki_customer_id_supplychargechargeto) {
    m_fki_customer_id_supplychargechargeto = fki_customer_id_supplychargechargeto;
    m_fki_customer_id_supplychargechargeto_isSet = true;
}

bool Customer_Response::is_fki_customer_id_supplychargechargeto_Set() const{
    return m_fki_customer_id_supplychargechargeto_isSet;
}

bool Customer_Response::is_fki_customer_id_supplychargechargeto_Valid() const{
    return m_fki_customer_id_supplychargechargeto_isValid;
}

qint32 Customer_Response::getFkiGlaccountcontainerIdSupplychargechargeto() const {
    return m_fki_glaccountcontainer_id_supplychargechargeto;
}
void Customer_Response::setFkiGlaccountcontainerIdSupplychargechargeto(const qint32 &fki_glaccountcontainer_id_supplychargechargeto) {
    m_fki_glaccountcontainer_id_supplychargechargeto = fki_glaccountcontainer_id_supplychargechargeto;
    m_fki_glaccountcontainer_id_supplychargechargeto_isSet = true;
}

bool Customer_Response::is_fki_glaccountcontainer_id_supplychargechargeto_Set() const{
    return m_fki_glaccountcontainer_id_supplychargechargeto_isSet;
}

bool Customer_Response::is_fki_glaccountcontainer_id_supplychargechargeto_Valid() const{
    return m_fki_glaccountcontainer_id_supplychargechargeto_isValid;
}

qint32 Customer_Response::getFkiInvoicealternatelogoId() const {
    return m_fki_invoicealternatelogo_id;
}
void Customer_Response::setFkiInvoicealternatelogoId(const qint32 &fki_invoicealternatelogo_id) {
    m_fki_invoicealternatelogo_id = fki_invoicealternatelogo_id;
    m_fki_invoicealternatelogo_id_isSet = true;
}

bool Customer_Response::is_fki_invoicealternatelogo_id_Set() const{
    return m_fki_invoicealternatelogo_id_isSet;
}

bool Customer_Response::is_fki_invoicealternatelogo_id_Valid() const{
    return m_fki_invoicealternatelogo_id_isValid;
}

qint32 Customer_Response::getFkiSynchronizationlinkserverId() const {
    return m_fki_synchronizationlinkserver_id;
}
void Customer_Response::setFkiSynchronizationlinkserverId(const qint32 &fki_synchronizationlinkserver_id) {
    m_fki_synchronizationlinkserver_id = fki_synchronizationlinkserver_id;
    m_fki_synchronizationlinkserver_id_isSet = true;
}

bool Customer_Response::is_fki_synchronizationlinkserver_id_Set() const{
    return m_fki_synchronizationlinkserver_id_isSet;
}

bool Customer_Response::is_fki_synchronizationlinkserver_id_Valid() const{
    return m_fki_synchronizationlinkserver_id_isValid;
}

qint32 Customer_Response::getEfkiUserId() const {
    return m_efki_user_id;
}
void Customer_Response::setEfkiUserId(const qint32 &efki_user_id) {
    m_efki_user_id = efki_user_id;
    m_efki_user_id_isSet = true;
}

bool Customer_Response::is_efki_user_id_Set() const{
    return m_efki_user_id_isSet;
}

bool Customer_Response::is_efki_user_id_Valid() const{
    return m_efki_user_id_isValid;
}

QString Customer_Response::getEfksCustomerCode() const {
    return m_efks_customer_code;
}
void Customer_Response::setEfksCustomerCode(const QString &efks_customer_code) {
    m_efks_customer_code = efks_customer_code;
    m_efks_customer_code_isSet = true;
}

bool Customer_Response::is_efks_customer_code_Set() const{
    return m_efks_customer_code_isSet;
}

bool Customer_Response::is_efks_customer_code_Valid() const{
    return m_efks_customer_code_isValid;
}

QString Customer_Response::getSCustomerCode() const {
    return m_s_customer_code;
}
void Customer_Response::setSCustomerCode(const QString &s_customer_code) {
    m_s_customer_code = s_customer_code;
    m_s_customer_code_isSet = true;
}

bool Customer_Response::is_s_customer_code_Set() const{
    return m_s_customer_code_isSet;
}

bool Customer_Response::is_s_customer_code_Valid() const{
    return m_s_customer_code_isValid;
}

QString Customer_Response::getDCustomerFulltimeequivalent() const {
    return m_d_customer_fulltimeequivalent;
}
void Customer_Response::setDCustomerFulltimeequivalent(const QString &d_customer_fulltimeequivalent) {
    m_d_customer_fulltimeequivalent = d_customer_fulltimeequivalent;
    m_d_customer_fulltimeequivalent_isSet = true;
}

bool Customer_Response::is_d_customer_fulltimeequivalent_Set() const{
    return m_d_customer_fulltimeequivalent_isSet;
}

bool Customer_Response::is_d_customer_fulltimeequivalent_Valid() const{
    return m_d_customer_fulltimeequivalent_isValid;
}

qint32 Customer_Response::getICustomerPhotocopiercode() const {
    return m_i_customer_photocopiercode;
}
void Customer_Response::setICustomerPhotocopiercode(const qint32 &i_customer_photocopiercode) {
    m_i_customer_photocopiercode = i_customer_photocopiercode;
    m_i_customer_photocopiercode_isSet = true;
}

bool Customer_Response::is_i_customer_photocopiercode_Set() const{
    return m_i_customer_photocopiercode_isSet;
}

bool Customer_Response::is_i_customer_photocopiercode_Valid() const{
    return m_i_customer_photocopiercode_isValid;
}

qint32 Customer_Response::getICustomerLongdistancecode() const {
    return m_i_customer_longdistancecode;
}
void Customer_Response::setICustomerLongdistancecode(const qint32 &i_customer_longdistancecode) {
    m_i_customer_longdistancecode = i_customer_longdistancecode;
    m_i_customer_longdistancecode_isSet = true;
}

bool Customer_Response::is_i_customer_longdistancecode_Set() const{
    return m_i_customer_longdistancecode_isSet;
}

bool Customer_Response::is_i_customer_longdistancecode_Valid() const{
    return m_i_customer_longdistancecode_isValid;
}

qint32 Customer_Response::getICustomerTimewindowstart() const {
    return m_i_customer_timewindowstart;
}
void Customer_Response::setICustomerTimewindowstart(const qint32 &i_customer_timewindowstart) {
    m_i_customer_timewindowstart = i_customer_timewindowstart;
    m_i_customer_timewindowstart_isSet = true;
}

bool Customer_Response::is_i_customer_timewindowstart_Set() const{
    return m_i_customer_timewindowstart_isSet;
}

bool Customer_Response::is_i_customer_timewindowstart_Valid() const{
    return m_i_customer_timewindowstart_isValid;
}

qint32 Customer_Response::getICustomerTimewindowend() const {
    return m_i_customer_timewindowend;
}
void Customer_Response::setICustomerTimewindowend(const qint32 &i_customer_timewindowend) {
    m_i_customer_timewindowend = i_customer_timewindowend;
    m_i_customer_timewindowend_isSet = true;
}

bool Customer_Response::is_i_customer_timewindowend_Set() const{
    return m_i_customer_timewindowend_isSet;
}

bool Customer_Response::is_i_customer_timewindowend_Valid() const{
    return m_i_customer_timewindowend_isValid;
}

QString Customer_Response::getDCustomerMinimumchargeableinterests() const {
    return m_d_customer_minimumchargeableinterests;
}
void Customer_Response::setDCustomerMinimumchargeableinterests(const QString &d_customer_minimumchargeableinterests) {
    m_d_customer_minimumchargeableinterests = d_customer_minimumchargeableinterests;
    m_d_customer_minimumchargeableinterests_isSet = true;
}

bool Customer_Response::is_d_customer_minimumchargeableinterests_Set() const{
    return m_d_customer_minimumchargeableinterests_isSet;
}

bool Customer_Response::is_d_customer_minimumchargeableinterests_Valid() const{
    return m_d_customer_minimumchargeableinterests_isValid;
}

QString Customer_Response::getDtCustomerBirthdate() const {
    return m_dt_customer_birthdate;
}
void Customer_Response::setDtCustomerBirthdate(const QString &dt_customer_birthdate) {
    m_dt_customer_birthdate = dt_customer_birthdate;
    m_dt_customer_birthdate_isSet = true;
}

bool Customer_Response::is_dt_customer_birthdate_Set() const{
    return m_dt_customer_birthdate_isSet;
}

bool Customer_Response::is_dt_customer_birthdate_Valid() const{
    return m_dt_customer_birthdate_isValid;
}

QString Customer_Response::getDtCustomerTransfer() const {
    return m_dt_customer_transfer;
}
void Customer_Response::setDtCustomerTransfer(const QString &dt_customer_transfer) {
    m_dt_customer_transfer = dt_customer_transfer;
    m_dt_customer_transfer_isSet = true;
}

bool Customer_Response::is_dt_customer_transfer_Set() const{
    return m_dt_customer_transfer_isSet;
}

bool Customer_Response::is_dt_customer_transfer_Valid() const{
    return m_dt_customer_transfer_isValid;
}

QString Customer_Response::getDtCustomerTransferappointment() const {
    return m_dt_customer_transferappointment;
}
void Customer_Response::setDtCustomerTransferappointment(const QString &dt_customer_transferappointment) {
    m_dt_customer_transferappointment = dt_customer_transferappointment;
    m_dt_customer_transferappointment_isSet = true;
}

bool Customer_Response::is_dt_customer_transferappointment_Set() const{
    return m_dt_customer_transferappointment_isSet;
}

bool Customer_Response::is_dt_customer_transferappointment_Valid() const{
    return m_dt_customer_transferappointment_isValid;
}

QString Customer_Response::getDtCustomerTransfersurvey() const {
    return m_dt_customer_transfersurvey;
}
void Customer_Response::setDtCustomerTransfersurvey(const QString &dt_customer_transfersurvey) {
    m_dt_customer_transfersurvey = dt_customer_transfersurvey;
    m_dt_customer_transfersurvey_isSet = true;
}

bool Customer_Response::is_dt_customer_transfersurvey_Set() const{
    return m_dt_customer_transfersurvey_isSet;
}

bool Customer_Response::is_dt_customer_transfersurvey_Valid() const{
    return m_dt_customer_transfersurvey_isValid;
}

bool Customer_Response::isBCustomerIsactive() const {
    return m_b_customer_isactive;
}
void Customer_Response::setBCustomerIsactive(const bool &b_customer_isactive) {
    m_b_customer_isactive = b_customer_isactive;
    m_b_customer_isactive_isSet = true;
}

bool Customer_Response::is_b_customer_isactive_Set() const{
    return m_b_customer_isactive_isSet;
}

bool Customer_Response::is_b_customer_isactive_Valid() const{
    return m_b_customer_isactive_isValid;
}

bool Customer_Response::isBCustomerVariableexpensefinanced() const {
    return m_b_customer_variableexpensefinanced;
}
void Customer_Response::setBCustomerVariableexpensefinanced(const bool &b_customer_variableexpensefinanced) {
    m_b_customer_variableexpensefinanced = b_customer_variableexpensefinanced;
    m_b_customer_variableexpensefinanced_isSet = true;
}

bool Customer_Response::is_b_customer_variableexpensefinanced_Set() const{
    return m_b_customer_variableexpensefinanced_isSet;
}

bool Customer_Response::is_b_customer_variableexpensefinanced_Valid() const{
    return m_b_customer_variableexpensefinanced_isValid;
}

bool Customer_Response::isBCustomerVariableexpensefinancedtaxes() const {
    return m_b_customer_variableexpensefinancedtaxes;
}
void Customer_Response::setBCustomerVariableexpensefinancedtaxes(const bool &b_customer_variableexpensefinancedtaxes) {
    m_b_customer_variableexpensefinancedtaxes = b_customer_variableexpensefinancedtaxes;
    m_b_customer_variableexpensefinancedtaxes_isSet = true;
}

bool Customer_Response::is_b_customer_variableexpensefinancedtaxes_Set() const{
    return m_b_customer_variableexpensefinancedtaxes_isSet;
}

bool Customer_Response::is_b_customer_variableexpensefinancedtaxes_Valid() const{
    return m_b_customer_variableexpensefinancedtaxes_isValid;
}

bool Customer_Response::isBCustomerSupplychargefinanced() const {
    return m_b_customer_supplychargefinanced;
}
void Customer_Response::setBCustomerSupplychargefinanced(const bool &b_customer_supplychargefinanced) {
    m_b_customer_supplychargefinanced = b_customer_supplychargefinanced;
    m_b_customer_supplychargefinanced_isSet = true;
}

bool Customer_Response::is_b_customer_supplychargefinanced_Set() const{
    return m_b_customer_supplychargefinanced_isSet;
}

bool Customer_Response::is_b_customer_supplychargefinanced_Valid() const{
    return m_b_customer_supplychargefinanced_isValid;
}

bool Customer_Response::isBCustomerSupplychargefinancedtaxes() const {
    return m_b_customer_supplychargefinancedtaxes;
}
void Customer_Response::setBCustomerSupplychargefinancedtaxes(const bool &b_customer_supplychargefinancedtaxes) {
    m_b_customer_supplychargefinancedtaxes = b_customer_supplychargefinancedtaxes;
    m_b_customer_supplychargefinancedtaxes_isSet = true;
}

bool Customer_Response::is_b_customer_supplychargefinancedtaxes_Set() const{
    return m_b_customer_supplychargefinancedtaxes_isSet;
}

bool Customer_Response::is_b_customer_supplychargefinancedtaxes_Valid() const{
    return m_b_customer_supplychargefinancedtaxes_isValid;
}

bool Customer_Response::isBCustomerAttendance() const {
    return m_b_customer_attendance;
}
void Customer_Response::setBCustomerAttendance(const bool &b_customer_attendance) {
    m_b_customer_attendance = b_customer_attendance;
    m_b_customer_attendance_isSet = true;
}

bool Customer_Response::is_b_customer_attendance_Set() const{
    return m_b_customer_attendance_isSet;
}

bool Customer_Response::is_b_customer_attendance_Valid() const{
    return m_b_customer_attendance_isValid;
}

Field_eCustomerType Customer_Response::getECustomerType() const {
    return m_e_customer_type;
}
void Customer_Response::setECustomerType(const Field_eCustomerType &e_customer_type) {
    m_e_customer_type = e_customer_type;
    m_e_customer_type_isSet = true;
}

bool Customer_Response::is_e_customer_type_Set() const{
    return m_e_customer_type_isSet;
}

bool Customer_Response::is_e_customer_type_Valid() const{
    return m_e_customer_type_isValid;
}

Field_eCustomerMarketingcorrespondence Customer_Response::getECustomerMarketingcorrespondence() const {
    return m_e_customer_marketingcorrespondence;
}
void Customer_Response::setECustomerMarketingcorrespondence(const Field_eCustomerMarketingcorrespondence &e_customer_marketingcorrespondence) {
    m_e_customer_marketingcorrespondence = e_customer_marketingcorrespondence;
    m_e_customer_marketingcorrespondence_isSet = true;
}

bool Customer_Response::is_e_customer_marketingcorrespondence_Set() const{
    return m_e_customer_marketingcorrespondence_isSet;
}

bool Customer_Response::is_e_customer_marketingcorrespondence_Valid() const{
    return m_e_customer_marketingcorrespondence_isValid;
}

bool Customer_Response::isBCustomerBlackcopycarbon() const {
    return m_b_customer_blackcopycarbon;
}
void Customer_Response::setBCustomerBlackcopycarbon(const bool &b_customer_blackcopycarbon) {
    m_b_customer_blackcopycarbon = b_customer_blackcopycarbon;
    m_b_customer_blackcopycarbon_isSet = true;
}

bool Customer_Response::is_b_customer_blackcopycarbon_Set() const{
    return m_b_customer_blackcopycarbon_isSet;
}

bool Customer_Response::is_b_customer_blackcopycarbon_Valid() const{
    return m_b_customer_blackcopycarbon_isValid;
}

bool Customer_Response::isBCustomerUnsubscribeinfo() const {
    return m_b_customer_unsubscribeinfo;
}
void Customer_Response::setBCustomerUnsubscribeinfo(const bool &b_customer_unsubscribeinfo) {
    m_b_customer_unsubscribeinfo = b_customer_unsubscribeinfo;
    m_b_customer_unsubscribeinfo_isSet = true;
}

bool Customer_Response::is_b_customer_unsubscribeinfo_Set() const{
    return m_b_customer_unsubscribeinfo_isSet;
}

bool Customer_Response::is_b_customer_unsubscribeinfo_Valid() const{
    return m_b_customer_unsubscribeinfo_isValid;
}

QString Customer_Response::getTCustomerComment() const {
    return m_t_customer_comment;
}
void Customer_Response::setTCustomerComment(const QString &t_customer_comment) {
    m_t_customer_comment = t_customer_comment;
    m_t_customer_comment_isSet = true;
}

bool Customer_Response::is_t_customer_comment_Set() const{
    return m_t_customer_comment_isSet;
}

bool Customer_Response::is_t_customer_comment_Valid() const{
    return m_t_customer_comment_isValid;
}

QString Customer_Response::getImportid() const {
    return m_importid;
}
void Customer_Response::setImportid(const QString &importid) {
    m_importid = importid;
    m_importid_isSet = true;
}

bool Customer_Response::is_importid_Set() const{
    return m_importid_isSet;
}

bool Customer_Response::is_importid_Valid() const{
    return m_importid_isValid;
}

bool Customer_Response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_pki_customer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fki_company_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fki_customergroup_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s_customer_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fki_contactinformations_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fki_contactcontainer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fki_image_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fki_glaccountcontainer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fki_language_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fki_department_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fki_paymentmethod_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fki_electronicfundstransferbankaccount_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fki_electronicfundstransferbankaccount_id_directdebit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fki_sendingmethod_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fki_taxassignment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fki_attendancestatus_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fki_agent_id_variableexpensechargeto_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fki_broker_id_variableexpensechargeto_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fki_customer_id_variableexpensechargeto_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fki_glaccountcontainer_id_variableexpensechargeto_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fki_agent_id_supplychargechargeto_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fki_broker_id_supplychargechargeto_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fki_customer_id_supplychargechargeto_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fki_glaccountcontainer_id_supplychargechargeto_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fki_invoicealternatelogo_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fki_synchronizationlinkserver_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_efki_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_efks_customer_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s_customer_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_d_customer_fulltimeequivalent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_i_customer_photocopiercode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_i_customer_longdistancecode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_i_customer_timewindowstart_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_i_customer_timewindowend_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_d_customer_minimumchargeableinterests_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dt_customer_birthdate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dt_customer_transfer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dt_customer_transferappointment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dt_customer_transfersurvey_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_b_customer_isactive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_b_customer_variableexpensefinanced_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_b_customer_variableexpensefinancedtaxes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_b_customer_supplychargefinanced_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_b_customer_supplychargefinancedtaxes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_b_customer_attendance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_e_customer_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_e_customer_marketingcorrespondence.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_b_customer_blackcopycarbon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_b_customer_unsubscribeinfo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_t_customer_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_importid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool Customer_Response::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_pki_customer_id_isValid && m_fki_company_id_isValid && m_fki_customergroup_id_isValid && m_s_customer_name_isValid && m_fki_contactinformations_id_isValid && m_fki_contactcontainer_id_isValid && m_fki_image_id_isValid && m_fki_glaccountcontainer_id_isValid && m_fki_language_id_isValid && m_fki_department_id_isValid && m_fki_paymentmethod_id_isValid && m_fki_electronicfundstransferbankaccount_id_isValid && m_fki_electronicfundstransferbankaccount_id_directdebit_isValid && m_fki_sendingmethod_id_isValid && m_fki_taxassignment_id_isValid && m_fki_attendancestatus_id_isValid && m_fki_agent_id_variableexpensechargeto_isValid && m_fki_broker_id_variableexpensechargeto_isValid && m_fki_customer_id_variableexpensechargeto_isValid && m_fki_glaccountcontainer_id_variableexpensechargeto_isValid && m_fki_agent_id_supplychargechargeto_isValid && m_fki_broker_id_supplychargechargeto_isValid && m_fki_customer_id_supplychargechargeto_isValid && m_fki_glaccountcontainer_id_supplychargechargeto_isValid && m_fki_invoicealternatelogo_id_isValid && m_fki_synchronizationlinkserver_id_isValid && m_s_customer_code_isValid && m_d_customer_fulltimeequivalent_isValid && m_i_customer_photocopiercode_isValid && m_i_customer_longdistancecode_isValid && m_i_customer_timewindowstart_isValid && m_i_customer_timewindowend_isValid && m_d_customer_minimumchargeableinterests_isValid && m_dt_customer_birthdate_isValid && m_dt_customer_transfer_isValid && m_dt_customer_transferappointment_isValid && m_dt_customer_transfersurvey_isValid && m_b_customer_isactive_isValid && m_b_customer_variableexpensefinanced_isValid && m_b_customer_variableexpensefinancedtaxes_isValid && m_b_customer_supplychargefinanced_isValid && m_b_customer_supplychargefinancedtaxes_isValid && m_b_customer_attendance_isValid && m_e_customer_type_isValid && m_e_customer_marketingcorrespondence_isValid && m_b_customer_blackcopycarbon_isValid && m_b_customer_unsubscribeinfo_isValid && m_t_customer_comment_isValid && true;
}

} // namespace Ezmaxapi
