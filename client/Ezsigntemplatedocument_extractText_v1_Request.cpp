/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "Ezsigntemplatedocument_extractText_v1_Request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "Helpers.h"

namespace Ezmaxapi {

Ezsigntemplatedocument_extractText_v1_Request::Ezsigntemplatedocument_extractText_v1_Request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

Ezsigntemplatedocument_extractText_v1_Request::Ezsigntemplatedocument_extractText_v1_Request() {
    this->initializeModel();
}

Ezsigntemplatedocument_extractText_v1_Request::~Ezsigntemplatedocument_extractText_v1_Request() {}

void Ezsigntemplatedocument_extractText_v1_Request::initializeModel() {

    m_i_page_isSet = false;
    m_i_page_isValid = false;

    m_e_section_isSet = false;
    m_e_section_isValid = false;

    m_i_x_isSet = false;
    m_i_x_isValid = false;

    m_i_y_isSet = false;
    m_i_y_isValid = false;

    m_i_width_isSet = false;
    m_i_width_isValid = false;

    m_i_height_isSet = false;
    m_i_height_isValid = false;
}

void Ezsigntemplatedocument_extractText_v1_Request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void Ezsigntemplatedocument_extractText_v1_Request::fromJsonObject(QJsonObject json) {

    m_i_page_isValid = ::Ezmaxapi::fromJsonValue(m_i_page, json[QString("iPage")]);
    m_i_page_isSet = !json[QString("iPage")].isNull() && m_i_page_isValid;

    m_e_section_isValid = ::Ezmaxapi::fromJsonValue(m_e_section, json[QString("eSection")]);
    m_e_section_isSet = !json[QString("eSection")].isNull() && m_e_section_isValid;

    m_i_x_isValid = ::Ezmaxapi::fromJsonValue(m_i_x, json[QString("iX")]);
    m_i_x_isSet = !json[QString("iX")].isNull() && m_i_x_isValid;

    m_i_y_isValid = ::Ezmaxapi::fromJsonValue(m_i_y, json[QString("iY")]);
    m_i_y_isSet = !json[QString("iY")].isNull() && m_i_y_isValid;

    m_i_width_isValid = ::Ezmaxapi::fromJsonValue(m_i_width, json[QString("iWidth")]);
    m_i_width_isSet = !json[QString("iWidth")].isNull() && m_i_width_isValid;

    m_i_height_isValid = ::Ezmaxapi::fromJsonValue(m_i_height, json[QString("iHeight")]);
    m_i_height_isSet = !json[QString("iHeight")].isNull() && m_i_height_isValid;
}

QString Ezsigntemplatedocument_extractText_v1_Request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject Ezsigntemplatedocument_extractText_v1_Request::asJsonObject() const {
    QJsonObject obj;
    if (m_i_page_isSet) {
        obj.insert(QString("iPage"), ::Ezmaxapi::toJsonValue(m_i_page));
    }
    if (m_e_section_isSet) {
        obj.insert(QString("eSection"), ::Ezmaxapi::toJsonValue(m_e_section));
    }
    if (m_i_x_isSet) {
        obj.insert(QString("iX"), ::Ezmaxapi::toJsonValue(m_i_x));
    }
    if (m_i_y_isSet) {
        obj.insert(QString("iY"), ::Ezmaxapi::toJsonValue(m_i_y));
    }
    if (m_i_width_isSet) {
        obj.insert(QString("iWidth"), ::Ezmaxapi::toJsonValue(m_i_width));
    }
    if (m_i_height_isSet) {
        obj.insert(QString("iHeight"), ::Ezmaxapi::toJsonValue(m_i_height));
    }
    return obj;
}

qint32 Ezsigntemplatedocument_extractText_v1_Request::getIPage() const {
    return m_i_page;
}
void Ezsigntemplatedocument_extractText_v1_Request::setIPage(const qint32 &i_page) {
    m_i_page = i_page;
    m_i_page_isSet = true;
}

bool Ezsigntemplatedocument_extractText_v1_Request::is_i_page_Set() const{
    return m_i_page_isSet;
}

bool Ezsigntemplatedocument_extractText_v1_Request::is_i_page_Valid() const{
    return m_i_page_isValid;
}

QString Ezsigntemplatedocument_extractText_v1_Request::getESection() const {
    return m_e_section;
}
void Ezsigntemplatedocument_extractText_v1_Request::setESection(const QString &e_section) {
    m_e_section = e_section;
    m_e_section_isSet = true;
}

bool Ezsigntemplatedocument_extractText_v1_Request::is_e_section_Set() const{
    return m_e_section_isSet;
}

bool Ezsigntemplatedocument_extractText_v1_Request::is_e_section_Valid() const{
    return m_e_section_isValid;
}

qint32 Ezsigntemplatedocument_extractText_v1_Request::getIX() const {
    return m_i_x;
}
void Ezsigntemplatedocument_extractText_v1_Request::setIX(const qint32 &i_x) {
    m_i_x = i_x;
    m_i_x_isSet = true;
}

bool Ezsigntemplatedocument_extractText_v1_Request::is_i_x_Set() const{
    return m_i_x_isSet;
}

bool Ezsigntemplatedocument_extractText_v1_Request::is_i_x_Valid() const{
    return m_i_x_isValid;
}

qint32 Ezsigntemplatedocument_extractText_v1_Request::getIY() const {
    return m_i_y;
}
void Ezsigntemplatedocument_extractText_v1_Request::setIY(const qint32 &i_y) {
    m_i_y = i_y;
    m_i_y_isSet = true;
}

bool Ezsigntemplatedocument_extractText_v1_Request::is_i_y_Set() const{
    return m_i_y_isSet;
}

bool Ezsigntemplatedocument_extractText_v1_Request::is_i_y_Valid() const{
    return m_i_y_isValid;
}

qint32 Ezsigntemplatedocument_extractText_v1_Request::getIWidth() const {
    return m_i_width;
}
void Ezsigntemplatedocument_extractText_v1_Request::setIWidth(const qint32 &i_width) {
    m_i_width = i_width;
    m_i_width_isSet = true;
}

bool Ezsigntemplatedocument_extractText_v1_Request::is_i_width_Set() const{
    return m_i_width_isSet;
}

bool Ezsigntemplatedocument_extractText_v1_Request::is_i_width_Valid() const{
    return m_i_width_isValid;
}

qint32 Ezsigntemplatedocument_extractText_v1_Request::getIHeight() const {
    return m_i_height;
}
void Ezsigntemplatedocument_extractText_v1_Request::setIHeight(const qint32 &i_height) {
    m_i_height = i_height;
    m_i_height_isSet = true;
}

bool Ezsigntemplatedocument_extractText_v1_Request::is_i_height_Set() const{
    return m_i_height_isSet;
}

bool Ezsigntemplatedocument_extractText_v1_Request::is_i_height_Valid() const{
    return m_i_height_isValid;
}

bool Ezsigntemplatedocument_extractText_v1_Request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_i_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_e_section_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_i_x_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_i_y_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_i_width_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_i_height_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool Ezsigntemplatedocument_extractText_v1_Request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_i_page_isValid && true;
}

} // namespace Ezmaxapi
