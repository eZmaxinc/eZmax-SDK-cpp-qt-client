/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "Common_Reportsection.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "Helpers.h"

namespace Ezmaxapi {

Common_Reportsection::Common_Reportsection(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

Common_Reportsection::Common_Reportsection() {
    this->initializeModel();
}

Common_Reportsection::~Common_Reportsection() {}

void Common_Reportsection::initializeModel() {

    m_a_obj_reportsubsection_isSet = false;
    m_a_obj_reportsubsection_isValid = false;

    m_a_obj_reportcolumn_isSet = false;
    m_a_obj_reportcolumn_isValid = false;

    m_e_reportsection_horizontalalignment_isSet = false;
    m_e_reportsection_horizontalalignment_isValid = false;

    m_i_reportsection_columncount_isSet = false;
    m_i_reportsection_columncount_isValid = false;

    m_i_reportsection_width_isSet = false;
    m_i_reportsection_width_isValid = false;

    m_s_reportsection_title_isSet = false;
    m_s_reportsection_title_isValid = false;
}

void Common_Reportsection::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void Common_Reportsection::fromJsonObject(QJsonObject json) {

    m_a_obj_reportsubsection_isValid = ::Ezmaxapi::fromJsonValue(m_a_obj_reportsubsection, json[QString("a_objReportsubsection")]);
    m_a_obj_reportsubsection_isSet = !json[QString("a_objReportsubsection")].isNull() && m_a_obj_reportsubsection_isValid;

    m_a_obj_reportcolumn_isValid = ::Ezmaxapi::fromJsonValue(m_a_obj_reportcolumn, json[QString("a_objReportcolumn")]);
    m_a_obj_reportcolumn_isSet = !json[QString("a_objReportcolumn")].isNull() && m_a_obj_reportcolumn_isValid;

    m_e_reportsection_horizontalalignment_isValid = ::Ezmaxapi::fromJsonValue(m_e_reportsection_horizontalalignment, json[QString("eReportsectionHorizontalalignment")]);
    m_e_reportsection_horizontalalignment_isSet = !json[QString("eReportsectionHorizontalalignment")].isNull() && m_e_reportsection_horizontalalignment_isValid;

    m_i_reportsection_columncount_isValid = ::Ezmaxapi::fromJsonValue(m_i_reportsection_columncount, json[QString("iReportsectionColumncount")]);
    m_i_reportsection_columncount_isSet = !json[QString("iReportsectionColumncount")].isNull() && m_i_reportsection_columncount_isValid;

    m_i_reportsection_width_isValid = ::Ezmaxapi::fromJsonValue(m_i_reportsection_width, json[QString("iReportsectionWidth")]);
    m_i_reportsection_width_isSet = !json[QString("iReportsectionWidth")].isNull() && m_i_reportsection_width_isValid;

    m_s_reportsection_title_isValid = ::Ezmaxapi::fromJsonValue(m_s_reportsection_title, json[QString("sReportsectionTitle")]);
    m_s_reportsection_title_isSet = !json[QString("sReportsectionTitle")].isNull() && m_s_reportsection_title_isValid;
}

QString Common_Reportsection::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject Common_Reportsection::asJsonObject() const {
    QJsonObject obj;
    if (m_a_obj_reportsubsection.size() > 0) {
        obj.insert(QString("a_objReportsubsection"), ::Ezmaxapi::toJsonValue(m_a_obj_reportsubsection));
    }
    if (m_a_obj_reportcolumn.size() > 0) {
        obj.insert(QString("a_objReportcolumn"), ::Ezmaxapi::toJsonValue(m_a_obj_reportcolumn));
    }
    if (m_e_reportsection_horizontalalignment.isSet()) {
        obj.insert(QString("eReportsectionHorizontalalignment"), ::Ezmaxapi::toJsonValue(m_e_reportsection_horizontalalignment));
    }
    if (m_i_reportsection_columncount_isSet) {
        obj.insert(QString("iReportsectionColumncount"), ::Ezmaxapi::toJsonValue(m_i_reportsection_columncount));
    }
    if (m_i_reportsection_width_isSet) {
        obj.insert(QString("iReportsectionWidth"), ::Ezmaxapi::toJsonValue(m_i_reportsection_width));
    }
    if (m_s_reportsection_title_isSet) {
        obj.insert(QString("sReportsectionTitle"), ::Ezmaxapi::toJsonValue(m_s_reportsection_title));
    }
    return obj;
}

QList<Common_Reportsubsection> Common_Reportsection::getAObjReportsubsection() const {
    return m_a_obj_reportsubsection;
}
void Common_Reportsection::setAObjReportsubsection(const QList<Common_Reportsubsection> &a_obj_reportsubsection) {
    m_a_obj_reportsubsection = a_obj_reportsubsection;
    m_a_obj_reportsubsection_isSet = true;
}

bool Common_Reportsection::is_a_obj_reportsubsection_Set() const{
    return m_a_obj_reportsubsection_isSet;
}

bool Common_Reportsection::is_a_obj_reportsubsection_Valid() const{
    return m_a_obj_reportsubsection_isValid;
}

QList<Common_Reportcolumn> Common_Reportsection::getAObjReportcolumn() const {
    return m_a_obj_reportcolumn;
}
void Common_Reportsection::setAObjReportcolumn(const QList<Common_Reportcolumn> &a_obj_reportcolumn) {
    m_a_obj_reportcolumn = a_obj_reportcolumn;
    m_a_obj_reportcolumn_isSet = true;
}

bool Common_Reportsection::is_a_obj_reportcolumn_Set() const{
    return m_a_obj_reportcolumn_isSet;
}

bool Common_Reportsection::is_a_obj_reportcolumn_Valid() const{
    return m_a_obj_reportcolumn_isValid;
}

Enum_Horizontalalignment Common_Reportsection::getEReportsectionHorizontalalignment() const {
    return m_e_reportsection_horizontalalignment;
}
void Common_Reportsection::setEReportsectionHorizontalalignment(const Enum_Horizontalalignment &e_reportsection_horizontalalignment) {
    m_e_reportsection_horizontalalignment = e_reportsection_horizontalalignment;
    m_e_reportsection_horizontalalignment_isSet = true;
}

bool Common_Reportsection::is_e_reportsection_horizontalalignment_Set() const{
    return m_e_reportsection_horizontalalignment_isSet;
}

bool Common_Reportsection::is_e_reportsection_horizontalalignment_Valid() const{
    return m_e_reportsection_horizontalalignment_isValid;
}

qint32 Common_Reportsection::getIReportsectionColumncount() const {
    return m_i_reportsection_columncount;
}
void Common_Reportsection::setIReportsectionColumncount(const qint32 &i_reportsection_columncount) {
    m_i_reportsection_columncount = i_reportsection_columncount;
    m_i_reportsection_columncount_isSet = true;
}

bool Common_Reportsection::is_i_reportsection_columncount_Set() const{
    return m_i_reportsection_columncount_isSet;
}

bool Common_Reportsection::is_i_reportsection_columncount_Valid() const{
    return m_i_reportsection_columncount_isValid;
}

qint32 Common_Reportsection::getIReportsectionWidth() const {
    return m_i_reportsection_width;
}
void Common_Reportsection::setIReportsectionWidth(const qint32 &i_reportsection_width) {
    m_i_reportsection_width = i_reportsection_width;
    m_i_reportsection_width_isSet = true;
}

bool Common_Reportsection::is_i_reportsection_width_Set() const{
    return m_i_reportsection_width_isSet;
}

bool Common_Reportsection::is_i_reportsection_width_Valid() const{
    return m_i_reportsection_width_isValid;
}

QString Common_Reportsection::getSReportsectionTitle() const {
    return m_s_reportsection_title;
}
void Common_Reportsection::setSReportsectionTitle(const QString &s_reportsection_title) {
    m_s_reportsection_title = s_reportsection_title;
    m_s_reportsection_title_isSet = true;
}

bool Common_Reportsection::is_s_reportsection_title_Set() const{
    return m_s_reportsection_title_isSet;
}

bool Common_Reportsection::is_s_reportsection_title_Valid() const{
    return m_s_reportsection_title_isValid;
}

bool Common_Reportsection::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_a_obj_reportsubsection.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_a_obj_reportcolumn.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_e_reportsection_horizontalalignment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_i_reportsection_columncount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_i_reportsection_width_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s_reportsection_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool Common_Reportsection::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_a_obj_reportsubsection_isValid && m_a_obj_reportcolumn_isValid && m_e_reportsection_horizontalalignment_isValid && m_i_reportsection_columncount_isValid && m_i_reportsection_width_isValid && true;
}

} // namespace Ezmaxapi
