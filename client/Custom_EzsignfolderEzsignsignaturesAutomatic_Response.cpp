/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "Custom_EzsignfolderEzsignsignaturesAutomatic_Response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "Helpers.h"

namespace Ezmaxapi {

Custom_EzsignfolderEzsignsignaturesAutomatic_Response::Custom_EzsignfolderEzsignsignaturesAutomatic_Response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

Custom_EzsignfolderEzsignsignaturesAutomatic_Response::Custom_EzsignfolderEzsignsignaturesAutomatic_Response() {
    this->initializeModel();
}

Custom_EzsignfolderEzsignsignaturesAutomatic_Response::~Custom_EzsignfolderEzsignsignaturesAutomatic_Response() {}

void Custom_EzsignfolderEzsignsignaturesAutomatic_Response::initializeModel() {

    m_pki_ezsignfolder_id_isSet = false;
    m_pki_ezsignfolder_id_isValid = false;

    m_s_ezsignfolder_description_isSet = false;
    m_s_ezsignfolder_description_isValid = false;

    m_a_obj_ezsigndocument_isSet = false;
    m_a_obj_ezsigndocument_isValid = false;
}

void Custom_EzsignfolderEzsignsignaturesAutomatic_Response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void Custom_EzsignfolderEzsignsignaturesAutomatic_Response::fromJsonObject(QJsonObject json) {

    m_pki_ezsignfolder_id_isValid = ::Ezmaxapi::fromJsonValue(m_pki_ezsignfolder_id, json[QString("pkiEzsignfolderID")]);
    m_pki_ezsignfolder_id_isSet = !json[QString("pkiEzsignfolderID")].isNull() && m_pki_ezsignfolder_id_isValid;

    m_s_ezsignfolder_description_isValid = ::Ezmaxapi::fromJsonValue(m_s_ezsignfolder_description, json[QString("sEzsignfolderDescription")]);
    m_s_ezsignfolder_description_isSet = !json[QString("sEzsignfolderDescription")].isNull() && m_s_ezsignfolder_description_isValid;

    m_a_obj_ezsigndocument_isValid = ::Ezmaxapi::fromJsonValue(m_a_obj_ezsigndocument, json[QString("a_objEzsigndocument")]);
    m_a_obj_ezsigndocument_isSet = !json[QString("a_objEzsigndocument")].isNull() && m_a_obj_ezsigndocument_isValid;
}

QString Custom_EzsignfolderEzsignsignaturesAutomatic_Response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject Custom_EzsignfolderEzsignsignaturesAutomatic_Response::asJsonObject() const {
    QJsonObject obj;
    if (m_pki_ezsignfolder_id_isSet) {
        obj.insert(QString("pkiEzsignfolderID"), ::Ezmaxapi::toJsonValue(m_pki_ezsignfolder_id));
    }
    if (m_s_ezsignfolder_description_isSet) {
        obj.insert(QString("sEzsignfolderDescription"), ::Ezmaxapi::toJsonValue(m_s_ezsignfolder_description));
    }
    if (m_a_obj_ezsigndocument.size() > 0) {
        obj.insert(QString("a_objEzsigndocument"), ::Ezmaxapi::toJsonValue(m_a_obj_ezsigndocument));
    }
    return obj;
}

qint32 Custom_EzsignfolderEzsignsignaturesAutomatic_Response::getPkiEzsignfolderId() const {
    return m_pki_ezsignfolder_id;
}
void Custom_EzsignfolderEzsignsignaturesAutomatic_Response::setPkiEzsignfolderId(const qint32 &pki_ezsignfolder_id) {
    m_pki_ezsignfolder_id = pki_ezsignfolder_id;
    m_pki_ezsignfolder_id_isSet = true;
}

bool Custom_EzsignfolderEzsignsignaturesAutomatic_Response::is_pki_ezsignfolder_id_Set() const{
    return m_pki_ezsignfolder_id_isSet;
}

bool Custom_EzsignfolderEzsignsignaturesAutomatic_Response::is_pki_ezsignfolder_id_Valid() const{
    return m_pki_ezsignfolder_id_isValid;
}

QString Custom_EzsignfolderEzsignsignaturesAutomatic_Response::getSEzsignfolderDescription() const {
    return m_s_ezsignfolder_description;
}
void Custom_EzsignfolderEzsignsignaturesAutomatic_Response::setSEzsignfolderDescription(const QString &s_ezsignfolder_description) {
    m_s_ezsignfolder_description = s_ezsignfolder_description;
    m_s_ezsignfolder_description_isSet = true;
}

bool Custom_EzsignfolderEzsignsignaturesAutomatic_Response::is_s_ezsignfolder_description_Set() const{
    return m_s_ezsignfolder_description_isSet;
}

bool Custom_EzsignfolderEzsignsignaturesAutomatic_Response::is_s_ezsignfolder_description_Valid() const{
    return m_s_ezsignfolder_description_isValid;
}

QList<Custom_EzsigndocumentEzsignsignaturesAutomatic_Response> Custom_EzsignfolderEzsignsignaturesAutomatic_Response::getAObjEzsigndocument() const {
    return m_a_obj_ezsigndocument;
}
void Custom_EzsignfolderEzsignsignaturesAutomatic_Response::setAObjEzsigndocument(const QList<Custom_EzsigndocumentEzsignsignaturesAutomatic_Response> &a_obj_ezsigndocument) {
    m_a_obj_ezsigndocument = a_obj_ezsigndocument;
    m_a_obj_ezsigndocument_isSet = true;
}

bool Custom_EzsignfolderEzsignsignaturesAutomatic_Response::is_a_obj_ezsigndocument_Set() const{
    return m_a_obj_ezsigndocument_isSet;
}

bool Custom_EzsignfolderEzsignsignaturesAutomatic_Response::is_a_obj_ezsigndocument_Valid() const{
    return m_a_obj_ezsigndocument_isValid;
}

bool Custom_EzsignfolderEzsignsignaturesAutomatic_Response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_pki_ezsignfolder_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s_ezsignfolder_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_a_obj_ezsigndocument.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool Custom_EzsignfolderEzsignsignaturesAutomatic_Response::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_pki_ezsignfolder_id_isValid && m_s_ezsignfolder_description_isValid && m_a_obj_ezsigndocument_isValid && true;
}

} // namespace Ezmaxapi
