/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.18
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEzsignfoldertype_ResponseCompound.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEzsignfoldertype_ResponseCompound::OAIEzsignfoldertype_ResponseCompound(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEzsignfoldertype_ResponseCompound::OAIEzsignfoldertype_ResponseCompound() {
    this->initializeModel();
}

OAIEzsignfoldertype_ResponseCompound::~OAIEzsignfoldertype_ResponseCompound() {}

void OAIEzsignfoldertype_ResponseCompound::initializeModel() {

    m_pki_ezsignfoldertype_id_isSet = false;
    m_pki_ezsignfoldertype_id_isValid = false;

    m_obj_ezsignfoldertype_name_isSet = false;
    m_obj_ezsignfoldertype_name_isValid = false;

    m_fki_branding_id_isSet = false;
    m_fki_branding_id_isValid = false;

    m_fki_billingentityinternal_id_isSet = false;
    m_fki_billingentityinternal_id_isValid = false;

    m_fki_usergroup_id_isSet = false;
    m_fki_usergroup_id_isValid = false;

    m_fki_usergroup_id_restricted_isSet = false;
    m_fki_usergroup_id_restricted_isValid = false;

    m_fki_ezsigntsarequirement_id_isSet = false;
    m_fki_ezsigntsarequirement_id_isValid = false;

    m_s_branding_description_x_isSet = false;
    m_s_branding_description_x_isValid = false;

    m_s_billingentityinternal_description_x_isSet = false;
    m_s_billingentityinternal_description_x_isValid = false;

    m_s_ezsigntsarequirement_description_x_isSet = false;
    m_s_ezsigntsarequirement_description_x_isValid = false;

    m_s_email_address_signed_isSet = false;
    m_s_email_address_signed_isValid = false;

    m_s_email_address_summary_isSet = false;
    m_s_email_address_summary_isValid = false;

    m_s_usergroup_name_x_isSet = false;
    m_s_usergroup_name_x_isValid = false;

    m_s_usergroup_name_x_restricted_isSet = false;
    m_s_usergroup_name_x_restricted_isValid = false;

    m_e_ezsignfoldertype_privacylevel_isSet = false;
    m_e_ezsignfoldertype_privacylevel_isValid = false;

    m_e_ezsignfoldertype_sendreminderfrequency_isSet = false;
    m_e_ezsignfoldertype_sendreminderfrequency_isValid = false;

    m_i_ezsignfoldertype_archivaldays_isSet = false;
    m_i_ezsignfoldertype_archivaldays_isValid = false;

    m_e_ezsignfoldertype_disposal_isSet = false;
    m_e_ezsignfoldertype_disposal_isValid = false;

    m_i_ezsignfoldertype_disposaldays_isSet = false;
    m_i_ezsignfoldertype_disposaldays_isValid = false;

    m_i_ezsignfoldertype_deadlinedays_isSet = false;
    m_i_ezsignfoldertype_deadlinedays_isValid = false;

    m_b_ezsignfoldertype_sendattatchmentsigner_isSet = false;
    m_b_ezsignfoldertype_sendattatchmentsigner_isValid = false;

    m_b_ezsignfoldertype_sendsignedtodocumentowner_isSet = false;
    m_b_ezsignfoldertype_sendsignedtodocumentowner_isValid = false;

    m_b_ezsignfoldertype_sendsignedtofolderowner_isSet = false;
    m_b_ezsignfoldertype_sendsignedtofolderowner_isValid = false;

    m_b_ezsignfoldertype_sendsignedtofullgroup_isSet = false;
    m_b_ezsignfoldertype_sendsignedtofullgroup_isValid = false;

    m_b_ezsignfoldertype_sendsignedtolimitedgroup_isSet = false;
    m_b_ezsignfoldertype_sendsignedtolimitedgroup_isValid = false;

    m_b_ezsignfoldertype_sendsignedtocolleague_isSet = false;
    m_b_ezsignfoldertype_sendsignedtocolleague_isValid = false;

    m_b_ezsignfoldertype_sendsummarytodocumentowner_isSet = false;
    m_b_ezsignfoldertype_sendsummarytodocumentowner_isValid = false;

    m_b_ezsignfoldertype_sendsummarytofolderowner_isSet = false;
    m_b_ezsignfoldertype_sendsummarytofolderowner_isValid = false;

    m_b_ezsignfoldertype_sendsummarytofullgroup_isSet = false;
    m_b_ezsignfoldertype_sendsummarytofullgroup_isValid = false;

    m_b_ezsignfoldertype_sendsummarytolimitedgroup_isSet = false;
    m_b_ezsignfoldertype_sendsummarytolimitedgroup_isValid = false;

    m_b_ezsignfoldertype_sendsummarytocolleague_isSet = false;
    m_b_ezsignfoldertype_sendsummarytocolleague_isValid = false;

    m_b_ezsignfoldertype_includeproofsigner_isSet = false;
    m_b_ezsignfoldertype_includeproofsigner_isValid = false;

    m_b_ezsignfoldertype_includeproofuser_isSet = false;
    m_b_ezsignfoldertype_includeproofuser_isValid = false;

    m_b_ezsignfoldertype_isactive_isSet = false;
    m_b_ezsignfoldertype_isactive_isValid = false;

    m_a_fki_user_id_signed_isSet = false;
    m_a_fki_user_id_signed_isValid = false;

    m_a_fki_user_id_summary_isSet = false;
    m_a_fki_user_id_summary_isValid = false;
}

void OAIEzsignfoldertype_ResponseCompound::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEzsignfoldertype_ResponseCompound::fromJsonObject(QJsonObject json) {

    m_pki_ezsignfoldertype_id_isValid = ::OpenAPI::fromJsonValue(pki_ezsignfoldertype_id, json[QString("pkiEzsignfoldertypeID")]);
    m_pki_ezsignfoldertype_id_isSet = !json[QString("pkiEzsignfoldertypeID")].isNull() && m_pki_ezsignfoldertype_id_isValid;

    m_obj_ezsignfoldertype_name_isValid = ::OpenAPI::fromJsonValue(obj_ezsignfoldertype_name, json[QString("objEzsignfoldertypeName")]);
    m_obj_ezsignfoldertype_name_isSet = !json[QString("objEzsignfoldertypeName")].isNull() && m_obj_ezsignfoldertype_name_isValid;

    m_fki_branding_id_isValid = ::OpenAPI::fromJsonValue(fki_branding_id, json[QString("fkiBrandingID")]);
    m_fki_branding_id_isSet = !json[QString("fkiBrandingID")].isNull() && m_fki_branding_id_isValid;

    m_fki_billingentityinternal_id_isValid = ::OpenAPI::fromJsonValue(fki_billingentityinternal_id, json[QString("fkiBillingentityinternalID")]);
    m_fki_billingentityinternal_id_isSet = !json[QString("fkiBillingentityinternalID")].isNull() && m_fki_billingentityinternal_id_isValid;

    m_fki_usergroup_id_isValid = ::OpenAPI::fromJsonValue(fki_usergroup_id, json[QString("fkiUsergroupID")]);
    m_fki_usergroup_id_isSet = !json[QString("fkiUsergroupID")].isNull() && m_fki_usergroup_id_isValid;

    m_fki_usergroup_id_restricted_isValid = ::OpenAPI::fromJsonValue(fki_usergroup_id_restricted, json[QString("fkiUsergroupIDRestricted")]);
    m_fki_usergroup_id_restricted_isSet = !json[QString("fkiUsergroupIDRestricted")].isNull() && m_fki_usergroup_id_restricted_isValid;

    m_fki_ezsigntsarequirement_id_isValid = ::OpenAPI::fromJsonValue(fki_ezsigntsarequirement_id, json[QString("fkiEzsigntsarequirementID")]);
    m_fki_ezsigntsarequirement_id_isSet = !json[QString("fkiEzsigntsarequirementID")].isNull() && m_fki_ezsigntsarequirement_id_isValid;

    m_s_branding_description_x_isValid = ::OpenAPI::fromJsonValue(s_branding_description_x, json[QString("sBrandingDescriptionX")]);
    m_s_branding_description_x_isSet = !json[QString("sBrandingDescriptionX")].isNull() && m_s_branding_description_x_isValid;

    m_s_billingentityinternal_description_x_isValid = ::OpenAPI::fromJsonValue(s_billingentityinternal_description_x, json[QString("sBillingentityinternalDescriptionX")]);
    m_s_billingentityinternal_description_x_isSet = !json[QString("sBillingentityinternalDescriptionX")].isNull() && m_s_billingentityinternal_description_x_isValid;

    m_s_ezsigntsarequirement_description_x_isValid = ::OpenAPI::fromJsonValue(s_ezsigntsarequirement_description_x, json[QString("sEzsigntsarequirementDescriptionX")]);
    m_s_ezsigntsarequirement_description_x_isSet = !json[QString("sEzsigntsarequirementDescriptionX")].isNull() && m_s_ezsigntsarequirement_description_x_isValid;

    m_s_email_address_signed_isValid = ::OpenAPI::fromJsonValue(s_email_address_signed, json[QString("sEmailAddressSigned")]);
    m_s_email_address_signed_isSet = !json[QString("sEmailAddressSigned")].isNull() && m_s_email_address_signed_isValid;

    m_s_email_address_summary_isValid = ::OpenAPI::fromJsonValue(s_email_address_summary, json[QString("sEmailAddressSummary")]);
    m_s_email_address_summary_isSet = !json[QString("sEmailAddressSummary")].isNull() && m_s_email_address_summary_isValid;

    m_s_usergroup_name_x_isValid = ::OpenAPI::fromJsonValue(s_usergroup_name_x, json[QString("sUsergroupNameX")]);
    m_s_usergroup_name_x_isSet = !json[QString("sUsergroupNameX")].isNull() && m_s_usergroup_name_x_isValid;

    m_s_usergroup_name_x_restricted_isValid = ::OpenAPI::fromJsonValue(s_usergroup_name_x_restricted, json[QString("sUsergroupNameXRestricted")]);
    m_s_usergroup_name_x_restricted_isSet = !json[QString("sUsergroupNameXRestricted")].isNull() && m_s_usergroup_name_x_restricted_isValid;

    m_e_ezsignfoldertype_privacylevel_isValid = ::OpenAPI::fromJsonValue(e_ezsignfoldertype_privacylevel, json[QString("eEzsignfoldertypePrivacylevel")]);
    m_e_ezsignfoldertype_privacylevel_isSet = !json[QString("eEzsignfoldertypePrivacylevel")].isNull() && m_e_ezsignfoldertype_privacylevel_isValid;

    m_e_ezsignfoldertype_sendreminderfrequency_isValid = ::OpenAPI::fromJsonValue(e_ezsignfoldertype_sendreminderfrequency, json[QString("eEzsignfoldertypeSendreminderfrequency")]);
    m_e_ezsignfoldertype_sendreminderfrequency_isSet = !json[QString("eEzsignfoldertypeSendreminderfrequency")].isNull() && m_e_ezsignfoldertype_sendreminderfrequency_isValid;

    m_i_ezsignfoldertype_archivaldays_isValid = ::OpenAPI::fromJsonValue(i_ezsignfoldertype_archivaldays, json[QString("iEzsignfoldertypeArchivaldays")]);
    m_i_ezsignfoldertype_archivaldays_isSet = !json[QString("iEzsignfoldertypeArchivaldays")].isNull() && m_i_ezsignfoldertype_archivaldays_isValid;

    m_e_ezsignfoldertype_disposal_isValid = ::OpenAPI::fromJsonValue(e_ezsignfoldertype_disposal, json[QString("eEzsignfoldertypeDisposal")]);
    m_e_ezsignfoldertype_disposal_isSet = !json[QString("eEzsignfoldertypeDisposal")].isNull() && m_e_ezsignfoldertype_disposal_isValid;

    m_i_ezsignfoldertype_disposaldays_isValid = ::OpenAPI::fromJsonValue(i_ezsignfoldertype_disposaldays, json[QString("iEzsignfoldertypeDisposaldays")]);
    m_i_ezsignfoldertype_disposaldays_isSet = !json[QString("iEzsignfoldertypeDisposaldays")].isNull() && m_i_ezsignfoldertype_disposaldays_isValid;

    m_i_ezsignfoldertype_deadlinedays_isValid = ::OpenAPI::fromJsonValue(i_ezsignfoldertype_deadlinedays, json[QString("iEzsignfoldertypeDeadlinedays")]);
    m_i_ezsignfoldertype_deadlinedays_isSet = !json[QString("iEzsignfoldertypeDeadlinedays")].isNull() && m_i_ezsignfoldertype_deadlinedays_isValid;

    m_b_ezsignfoldertype_sendattatchmentsigner_isValid = ::OpenAPI::fromJsonValue(b_ezsignfoldertype_sendattatchmentsigner, json[QString("bEzsignfoldertypeSendattatchmentsigner")]);
    m_b_ezsignfoldertype_sendattatchmentsigner_isSet = !json[QString("bEzsignfoldertypeSendattatchmentsigner")].isNull() && m_b_ezsignfoldertype_sendattatchmentsigner_isValid;

    m_b_ezsignfoldertype_sendsignedtodocumentowner_isValid = ::OpenAPI::fromJsonValue(b_ezsignfoldertype_sendsignedtodocumentowner, json[QString("bEzsignfoldertypeSendsignedtodocumentowner")]);
    m_b_ezsignfoldertype_sendsignedtodocumentowner_isSet = !json[QString("bEzsignfoldertypeSendsignedtodocumentowner")].isNull() && m_b_ezsignfoldertype_sendsignedtodocumentowner_isValid;

    m_b_ezsignfoldertype_sendsignedtofolderowner_isValid = ::OpenAPI::fromJsonValue(b_ezsignfoldertype_sendsignedtofolderowner, json[QString("bEzsignfoldertypeSendsignedtofolderowner")]);
    m_b_ezsignfoldertype_sendsignedtofolderowner_isSet = !json[QString("bEzsignfoldertypeSendsignedtofolderowner")].isNull() && m_b_ezsignfoldertype_sendsignedtofolderowner_isValid;

    m_b_ezsignfoldertype_sendsignedtofullgroup_isValid = ::OpenAPI::fromJsonValue(b_ezsignfoldertype_sendsignedtofullgroup, json[QString("bEzsignfoldertypeSendsignedtofullgroup")]);
    m_b_ezsignfoldertype_sendsignedtofullgroup_isSet = !json[QString("bEzsignfoldertypeSendsignedtofullgroup")].isNull() && m_b_ezsignfoldertype_sendsignedtofullgroup_isValid;

    m_b_ezsignfoldertype_sendsignedtolimitedgroup_isValid = ::OpenAPI::fromJsonValue(b_ezsignfoldertype_sendsignedtolimitedgroup, json[QString("bEzsignfoldertypeSendsignedtolimitedgroup")]);
    m_b_ezsignfoldertype_sendsignedtolimitedgroup_isSet = !json[QString("bEzsignfoldertypeSendsignedtolimitedgroup")].isNull() && m_b_ezsignfoldertype_sendsignedtolimitedgroup_isValid;

    m_b_ezsignfoldertype_sendsignedtocolleague_isValid = ::OpenAPI::fromJsonValue(b_ezsignfoldertype_sendsignedtocolleague, json[QString("bEzsignfoldertypeSendsignedtocolleague")]);
    m_b_ezsignfoldertype_sendsignedtocolleague_isSet = !json[QString("bEzsignfoldertypeSendsignedtocolleague")].isNull() && m_b_ezsignfoldertype_sendsignedtocolleague_isValid;

    m_b_ezsignfoldertype_sendsummarytodocumentowner_isValid = ::OpenAPI::fromJsonValue(b_ezsignfoldertype_sendsummarytodocumentowner, json[QString("bEzsignfoldertypeSendsummarytodocumentowner")]);
    m_b_ezsignfoldertype_sendsummarytodocumentowner_isSet = !json[QString("bEzsignfoldertypeSendsummarytodocumentowner")].isNull() && m_b_ezsignfoldertype_sendsummarytodocumentowner_isValid;

    m_b_ezsignfoldertype_sendsummarytofolderowner_isValid = ::OpenAPI::fromJsonValue(b_ezsignfoldertype_sendsummarytofolderowner, json[QString("bEzsignfoldertypeSendsummarytofolderowner")]);
    m_b_ezsignfoldertype_sendsummarytofolderowner_isSet = !json[QString("bEzsignfoldertypeSendsummarytofolderowner")].isNull() && m_b_ezsignfoldertype_sendsummarytofolderowner_isValid;

    m_b_ezsignfoldertype_sendsummarytofullgroup_isValid = ::OpenAPI::fromJsonValue(b_ezsignfoldertype_sendsummarytofullgroup, json[QString("bEzsignfoldertypeSendsummarytofullgroup")]);
    m_b_ezsignfoldertype_sendsummarytofullgroup_isSet = !json[QString("bEzsignfoldertypeSendsummarytofullgroup")].isNull() && m_b_ezsignfoldertype_sendsummarytofullgroup_isValid;

    m_b_ezsignfoldertype_sendsummarytolimitedgroup_isValid = ::OpenAPI::fromJsonValue(b_ezsignfoldertype_sendsummarytolimitedgroup, json[QString("bEzsignfoldertypeSendsummarytolimitedgroup")]);
    m_b_ezsignfoldertype_sendsummarytolimitedgroup_isSet = !json[QString("bEzsignfoldertypeSendsummarytolimitedgroup")].isNull() && m_b_ezsignfoldertype_sendsummarytolimitedgroup_isValid;

    m_b_ezsignfoldertype_sendsummarytocolleague_isValid = ::OpenAPI::fromJsonValue(b_ezsignfoldertype_sendsummarytocolleague, json[QString("bEzsignfoldertypeSendsummarytocolleague")]);
    m_b_ezsignfoldertype_sendsummarytocolleague_isSet = !json[QString("bEzsignfoldertypeSendsummarytocolleague")].isNull() && m_b_ezsignfoldertype_sendsummarytocolleague_isValid;

    m_b_ezsignfoldertype_includeproofsigner_isValid = ::OpenAPI::fromJsonValue(b_ezsignfoldertype_includeproofsigner, json[QString("bEzsignfoldertypeIncludeproofsigner")]);
    m_b_ezsignfoldertype_includeproofsigner_isSet = !json[QString("bEzsignfoldertypeIncludeproofsigner")].isNull() && m_b_ezsignfoldertype_includeproofsigner_isValid;

    m_b_ezsignfoldertype_includeproofuser_isValid = ::OpenAPI::fromJsonValue(b_ezsignfoldertype_includeproofuser, json[QString("bEzsignfoldertypeIncludeproofuser")]);
    m_b_ezsignfoldertype_includeproofuser_isSet = !json[QString("bEzsignfoldertypeIncludeproofuser")].isNull() && m_b_ezsignfoldertype_includeproofuser_isValid;

    m_b_ezsignfoldertype_isactive_isValid = ::OpenAPI::fromJsonValue(b_ezsignfoldertype_isactive, json[QString("bEzsignfoldertypeIsactive")]);
    m_b_ezsignfoldertype_isactive_isSet = !json[QString("bEzsignfoldertypeIsactive")].isNull() && m_b_ezsignfoldertype_isactive_isValid;

    m_a_fki_user_id_signed_isValid = ::OpenAPI::fromJsonValue(a_fki_user_id_signed, json[QString("a_fkiUserIDSigned")]);
    m_a_fki_user_id_signed_isSet = !json[QString("a_fkiUserIDSigned")].isNull() && m_a_fki_user_id_signed_isValid;

    m_a_fki_user_id_summary_isValid = ::OpenAPI::fromJsonValue(a_fki_user_id_summary, json[QString("a_fkiUserIDSummary")]);
    m_a_fki_user_id_summary_isSet = !json[QString("a_fkiUserIDSummary")].isNull() && m_a_fki_user_id_summary_isValid;
}

QString OAIEzsignfoldertype_ResponseCompound::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEzsignfoldertype_ResponseCompound::asJsonObject() const {
    QJsonObject obj;
    if (m_pki_ezsignfoldertype_id_isSet) {
        obj.insert(QString("pkiEzsignfoldertypeID"), ::OpenAPI::toJsonValue(pki_ezsignfoldertype_id));
    }
    if (obj_ezsignfoldertype_name.isSet()) {
        obj.insert(QString("objEzsignfoldertypeName"), ::OpenAPI::toJsonValue(obj_ezsignfoldertype_name));
    }
    if (m_fki_branding_id_isSet) {
        obj.insert(QString("fkiBrandingID"), ::OpenAPI::toJsonValue(fki_branding_id));
    }
    if (m_fki_billingentityinternal_id_isSet) {
        obj.insert(QString("fkiBillingentityinternalID"), ::OpenAPI::toJsonValue(fki_billingentityinternal_id));
    }
    if (m_fki_usergroup_id_isSet) {
        obj.insert(QString("fkiUsergroupID"), ::OpenAPI::toJsonValue(fki_usergroup_id));
    }
    if (m_fki_usergroup_id_restricted_isSet) {
        obj.insert(QString("fkiUsergroupIDRestricted"), ::OpenAPI::toJsonValue(fki_usergroup_id_restricted));
    }
    if (m_fki_ezsigntsarequirement_id_isSet) {
        obj.insert(QString("fkiEzsigntsarequirementID"), ::OpenAPI::toJsonValue(fki_ezsigntsarequirement_id));
    }
    if (m_s_branding_description_x_isSet) {
        obj.insert(QString("sBrandingDescriptionX"), ::OpenAPI::toJsonValue(s_branding_description_x));
    }
    if (m_s_billingentityinternal_description_x_isSet) {
        obj.insert(QString("sBillingentityinternalDescriptionX"), ::OpenAPI::toJsonValue(s_billingentityinternal_description_x));
    }
    if (m_s_ezsigntsarequirement_description_x_isSet) {
        obj.insert(QString("sEzsigntsarequirementDescriptionX"), ::OpenAPI::toJsonValue(s_ezsigntsarequirement_description_x));
    }
    if (m_s_email_address_signed_isSet) {
        obj.insert(QString("sEmailAddressSigned"), ::OpenAPI::toJsonValue(s_email_address_signed));
    }
    if (m_s_email_address_summary_isSet) {
        obj.insert(QString("sEmailAddressSummary"), ::OpenAPI::toJsonValue(s_email_address_summary));
    }
    if (m_s_usergroup_name_x_isSet) {
        obj.insert(QString("sUsergroupNameX"), ::OpenAPI::toJsonValue(s_usergroup_name_x));
    }
    if (m_s_usergroup_name_x_restricted_isSet) {
        obj.insert(QString("sUsergroupNameXRestricted"), ::OpenAPI::toJsonValue(s_usergroup_name_x_restricted));
    }
    if (e_ezsignfoldertype_privacylevel.isSet()) {
        obj.insert(QString("eEzsignfoldertypePrivacylevel"), ::OpenAPI::toJsonValue(e_ezsignfoldertype_privacylevel));
    }
    if (e_ezsignfoldertype_sendreminderfrequency.isSet()) {
        obj.insert(QString("eEzsignfoldertypeSendreminderfrequency"), ::OpenAPI::toJsonValue(e_ezsignfoldertype_sendreminderfrequency));
    }
    if (m_i_ezsignfoldertype_archivaldays_isSet) {
        obj.insert(QString("iEzsignfoldertypeArchivaldays"), ::OpenAPI::toJsonValue(i_ezsignfoldertype_archivaldays));
    }
    if (e_ezsignfoldertype_disposal.isSet()) {
        obj.insert(QString("eEzsignfoldertypeDisposal"), ::OpenAPI::toJsonValue(e_ezsignfoldertype_disposal));
    }
    if (m_i_ezsignfoldertype_disposaldays_isSet) {
        obj.insert(QString("iEzsignfoldertypeDisposaldays"), ::OpenAPI::toJsonValue(i_ezsignfoldertype_disposaldays));
    }
    if (m_i_ezsignfoldertype_deadlinedays_isSet) {
        obj.insert(QString("iEzsignfoldertypeDeadlinedays"), ::OpenAPI::toJsonValue(i_ezsignfoldertype_deadlinedays));
    }
    if (m_b_ezsignfoldertype_sendattatchmentsigner_isSet) {
        obj.insert(QString("bEzsignfoldertypeSendattatchmentsigner"), ::OpenAPI::toJsonValue(b_ezsignfoldertype_sendattatchmentsigner));
    }
    if (m_b_ezsignfoldertype_sendsignedtodocumentowner_isSet) {
        obj.insert(QString("bEzsignfoldertypeSendsignedtodocumentowner"), ::OpenAPI::toJsonValue(b_ezsignfoldertype_sendsignedtodocumentowner));
    }
    if (m_b_ezsignfoldertype_sendsignedtofolderowner_isSet) {
        obj.insert(QString("bEzsignfoldertypeSendsignedtofolderowner"), ::OpenAPI::toJsonValue(b_ezsignfoldertype_sendsignedtofolderowner));
    }
    if (m_b_ezsignfoldertype_sendsignedtofullgroup_isSet) {
        obj.insert(QString("bEzsignfoldertypeSendsignedtofullgroup"), ::OpenAPI::toJsonValue(b_ezsignfoldertype_sendsignedtofullgroup));
    }
    if (m_b_ezsignfoldertype_sendsignedtolimitedgroup_isSet) {
        obj.insert(QString("bEzsignfoldertypeSendsignedtolimitedgroup"), ::OpenAPI::toJsonValue(b_ezsignfoldertype_sendsignedtolimitedgroup));
    }
    if (m_b_ezsignfoldertype_sendsignedtocolleague_isSet) {
        obj.insert(QString("bEzsignfoldertypeSendsignedtocolleague"), ::OpenAPI::toJsonValue(b_ezsignfoldertype_sendsignedtocolleague));
    }
    if (m_b_ezsignfoldertype_sendsummarytodocumentowner_isSet) {
        obj.insert(QString("bEzsignfoldertypeSendsummarytodocumentowner"), ::OpenAPI::toJsonValue(b_ezsignfoldertype_sendsummarytodocumentowner));
    }
    if (m_b_ezsignfoldertype_sendsummarytofolderowner_isSet) {
        obj.insert(QString("bEzsignfoldertypeSendsummarytofolderowner"), ::OpenAPI::toJsonValue(b_ezsignfoldertype_sendsummarytofolderowner));
    }
    if (m_b_ezsignfoldertype_sendsummarytofullgroup_isSet) {
        obj.insert(QString("bEzsignfoldertypeSendsummarytofullgroup"), ::OpenAPI::toJsonValue(b_ezsignfoldertype_sendsummarytofullgroup));
    }
    if (m_b_ezsignfoldertype_sendsummarytolimitedgroup_isSet) {
        obj.insert(QString("bEzsignfoldertypeSendsummarytolimitedgroup"), ::OpenAPI::toJsonValue(b_ezsignfoldertype_sendsummarytolimitedgroup));
    }
    if (m_b_ezsignfoldertype_sendsummarytocolleague_isSet) {
        obj.insert(QString("bEzsignfoldertypeSendsummarytocolleague"), ::OpenAPI::toJsonValue(b_ezsignfoldertype_sendsummarytocolleague));
    }
    if (m_b_ezsignfoldertype_includeproofsigner_isSet) {
        obj.insert(QString("bEzsignfoldertypeIncludeproofsigner"), ::OpenAPI::toJsonValue(b_ezsignfoldertype_includeproofsigner));
    }
    if (m_b_ezsignfoldertype_includeproofuser_isSet) {
        obj.insert(QString("bEzsignfoldertypeIncludeproofuser"), ::OpenAPI::toJsonValue(b_ezsignfoldertype_includeproofuser));
    }
    if (m_b_ezsignfoldertype_isactive_isSet) {
        obj.insert(QString("bEzsignfoldertypeIsactive"), ::OpenAPI::toJsonValue(b_ezsignfoldertype_isactive));
    }
    if (a_fki_user_id_signed.size() > 0) {
        obj.insert(QString("a_fkiUserIDSigned"), ::OpenAPI::toJsonValue(a_fki_user_id_signed));
    }
    if (a_fki_user_id_summary.size() > 0) {
        obj.insert(QString("a_fkiUserIDSummary"), ::OpenAPI::toJsonValue(a_fki_user_id_summary));
    }
    return obj;
}

qint32 OAIEzsignfoldertype_ResponseCompound::getPkiEzsignfoldertypeId() const {
    return pki_ezsignfoldertype_id;
}
void OAIEzsignfoldertype_ResponseCompound::setPkiEzsignfoldertypeId(const qint32 &pki_ezsignfoldertype_id) {
    this->pki_ezsignfoldertype_id = pki_ezsignfoldertype_id;
    this->m_pki_ezsignfoldertype_id_isSet = true;
}

bool OAIEzsignfoldertype_ResponseCompound::is_pki_ezsignfoldertype_id_Set() const{
    return m_pki_ezsignfoldertype_id_isSet;
}

bool OAIEzsignfoldertype_ResponseCompound::is_pki_ezsignfoldertype_id_Valid() const{
    return m_pki_ezsignfoldertype_id_isValid;
}

OAIMultilingual_EzsignfoldertypeName OAIEzsignfoldertype_ResponseCompound::getObjEzsignfoldertypeName() const {
    return obj_ezsignfoldertype_name;
}
void OAIEzsignfoldertype_ResponseCompound::setObjEzsignfoldertypeName(const OAIMultilingual_EzsignfoldertypeName &obj_ezsignfoldertype_name) {
    this->obj_ezsignfoldertype_name = obj_ezsignfoldertype_name;
    this->m_obj_ezsignfoldertype_name_isSet = true;
}

bool OAIEzsignfoldertype_ResponseCompound::is_obj_ezsignfoldertype_name_Set() const{
    return m_obj_ezsignfoldertype_name_isSet;
}

bool OAIEzsignfoldertype_ResponseCompound::is_obj_ezsignfoldertype_name_Valid() const{
    return m_obj_ezsignfoldertype_name_isValid;
}

qint32 OAIEzsignfoldertype_ResponseCompound::getFkiBrandingId() const {
    return fki_branding_id;
}
void OAIEzsignfoldertype_ResponseCompound::setFkiBrandingId(const qint32 &fki_branding_id) {
    this->fki_branding_id = fki_branding_id;
    this->m_fki_branding_id_isSet = true;
}

bool OAIEzsignfoldertype_ResponseCompound::is_fki_branding_id_Set() const{
    return m_fki_branding_id_isSet;
}

bool OAIEzsignfoldertype_ResponseCompound::is_fki_branding_id_Valid() const{
    return m_fki_branding_id_isValid;
}

qint32 OAIEzsignfoldertype_ResponseCompound::getFkiBillingentityinternalId() const {
    return fki_billingentityinternal_id;
}
void OAIEzsignfoldertype_ResponseCompound::setFkiBillingentityinternalId(const qint32 &fki_billingentityinternal_id) {
    this->fki_billingentityinternal_id = fki_billingentityinternal_id;
    this->m_fki_billingentityinternal_id_isSet = true;
}

bool OAIEzsignfoldertype_ResponseCompound::is_fki_billingentityinternal_id_Set() const{
    return m_fki_billingentityinternal_id_isSet;
}

bool OAIEzsignfoldertype_ResponseCompound::is_fki_billingentityinternal_id_Valid() const{
    return m_fki_billingentityinternal_id_isValid;
}

qint32 OAIEzsignfoldertype_ResponseCompound::getFkiUsergroupId() const {
    return fki_usergroup_id;
}
void OAIEzsignfoldertype_ResponseCompound::setFkiUsergroupId(const qint32 &fki_usergroup_id) {
    this->fki_usergroup_id = fki_usergroup_id;
    this->m_fki_usergroup_id_isSet = true;
}

bool OAIEzsignfoldertype_ResponseCompound::is_fki_usergroup_id_Set() const{
    return m_fki_usergroup_id_isSet;
}

bool OAIEzsignfoldertype_ResponseCompound::is_fki_usergroup_id_Valid() const{
    return m_fki_usergroup_id_isValid;
}

qint32 OAIEzsignfoldertype_ResponseCompound::getFkiUsergroupIdRestricted() const {
    return fki_usergroup_id_restricted;
}
void OAIEzsignfoldertype_ResponseCompound::setFkiUsergroupIdRestricted(const qint32 &fki_usergroup_id_restricted) {
    this->fki_usergroup_id_restricted = fki_usergroup_id_restricted;
    this->m_fki_usergroup_id_restricted_isSet = true;
}

bool OAIEzsignfoldertype_ResponseCompound::is_fki_usergroup_id_restricted_Set() const{
    return m_fki_usergroup_id_restricted_isSet;
}

bool OAIEzsignfoldertype_ResponseCompound::is_fki_usergroup_id_restricted_Valid() const{
    return m_fki_usergroup_id_restricted_isValid;
}

qint32 OAIEzsignfoldertype_ResponseCompound::getFkiEzsigntsarequirementId() const {
    return fki_ezsigntsarequirement_id;
}
void OAIEzsignfoldertype_ResponseCompound::setFkiEzsigntsarequirementId(const qint32 &fki_ezsigntsarequirement_id) {
    this->fki_ezsigntsarequirement_id = fki_ezsigntsarequirement_id;
    this->m_fki_ezsigntsarequirement_id_isSet = true;
}

bool OAIEzsignfoldertype_ResponseCompound::is_fki_ezsigntsarequirement_id_Set() const{
    return m_fki_ezsigntsarequirement_id_isSet;
}

bool OAIEzsignfoldertype_ResponseCompound::is_fki_ezsigntsarequirement_id_Valid() const{
    return m_fki_ezsigntsarequirement_id_isValid;
}

QString OAIEzsignfoldertype_ResponseCompound::getSBrandingDescriptionX() const {
    return s_branding_description_x;
}
void OAIEzsignfoldertype_ResponseCompound::setSBrandingDescriptionX(const QString &s_branding_description_x) {
    this->s_branding_description_x = s_branding_description_x;
    this->m_s_branding_description_x_isSet = true;
}

bool OAIEzsignfoldertype_ResponseCompound::is_s_branding_description_x_Set() const{
    return m_s_branding_description_x_isSet;
}

bool OAIEzsignfoldertype_ResponseCompound::is_s_branding_description_x_Valid() const{
    return m_s_branding_description_x_isValid;
}

QString OAIEzsignfoldertype_ResponseCompound::getSBillingentityinternalDescriptionX() const {
    return s_billingentityinternal_description_x;
}
void OAIEzsignfoldertype_ResponseCompound::setSBillingentityinternalDescriptionX(const QString &s_billingentityinternal_description_x) {
    this->s_billingentityinternal_description_x = s_billingentityinternal_description_x;
    this->m_s_billingentityinternal_description_x_isSet = true;
}

bool OAIEzsignfoldertype_ResponseCompound::is_s_billingentityinternal_description_x_Set() const{
    return m_s_billingentityinternal_description_x_isSet;
}

bool OAIEzsignfoldertype_ResponseCompound::is_s_billingentityinternal_description_x_Valid() const{
    return m_s_billingentityinternal_description_x_isValid;
}

QString OAIEzsignfoldertype_ResponseCompound::getSEzsigntsarequirementDescriptionX() const {
    return s_ezsigntsarequirement_description_x;
}
void OAIEzsignfoldertype_ResponseCompound::setSEzsigntsarequirementDescriptionX(const QString &s_ezsigntsarequirement_description_x) {
    this->s_ezsigntsarequirement_description_x = s_ezsigntsarequirement_description_x;
    this->m_s_ezsigntsarequirement_description_x_isSet = true;
}

bool OAIEzsignfoldertype_ResponseCompound::is_s_ezsigntsarequirement_description_x_Set() const{
    return m_s_ezsigntsarequirement_description_x_isSet;
}

bool OAIEzsignfoldertype_ResponseCompound::is_s_ezsigntsarequirement_description_x_Valid() const{
    return m_s_ezsigntsarequirement_description_x_isValid;
}

QString OAIEzsignfoldertype_ResponseCompound::getSEmailAddressSigned() const {
    return s_email_address_signed;
}
void OAIEzsignfoldertype_ResponseCompound::setSEmailAddressSigned(const QString &s_email_address_signed) {
    this->s_email_address_signed = s_email_address_signed;
    this->m_s_email_address_signed_isSet = true;
}

bool OAIEzsignfoldertype_ResponseCompound::is_s_email_address_signed_Set() const{
    return m_s_email_address_signed_isSet;
}

bool OAIEzsignfoldertype_ResponseCompound::is_s_email_address_signed_Valid() const{
    return m_s_email_address_signed_isValid;
}

QString OAIEzsignfoldertype_ResponseCompound::getSEmailAddressSummary() const {
    return s_email_address_summary;
}
void OAIEzsignfoldertype_ResponseCompound::setSEmailAddressSummary(const QString &s_email_address_summary) {
    this->s_email_address_summary = s_email_address_summary;
    this->m_s_email_address_summary_isSet = true;
}

bool OAIEzsignfoldertype_ResponseCompound::is_s_email_address_summary_Set() const{
    return m_s_email_address_summary_isSet;
}

bool OAIEzsignfoldertype_ResponseCompound::is_s_email_address_summary_Valid() const{
    return m_s_email_address_summary_isValid;
}

QString OAIEzsignfoldertype_ResponseCompound::getSUsergroupNameX() const {
    return s_usergroup_name_x;
}
void OAIEzsignfoldertype_ResponseCompound::setSUsergroupNameX(const QString &s_usergroup_name_x) {
    this->s_usergroup_name_x = s_usergroup_name_x;
    this->m_s_usergroup_name_x_isSet = true;
}

bool OAIEzsignfoldertype_ResponseCompound::is_s_usergroup_name_x_Set() const{
    return m_s_usergroup_name_x_isSet;
}

bool OAIEzsignfoldertype_ResponseCompound::is_s_usergroup_name_x_Valid() const{
    return m_s_usergroup_name_x_isValid;
}

QString OAIEzsignfoldertype_ResponseCompound::getSUsergroupNameXRestricted() const {
    return s_usergroup_name_x_restricted;
}
void OAIEzsignfoldertype_ResponseCompound::setSUsergroupNameXRestricted(const QString &s_usergroup_name_x_restricted) {
    this->s_usergroup_name_x_restricted = s_usergroup_name_x_restricted;
    this->m_s_usergroup_name_x_restricted_isSet = true;
}

bool OAIEzsignfoldertype_ResponseCompound::is_s_usergroup_name_x_restricted_Set() const{
    return m_s_usergroup_name_x_restricted_isSet;
}

bool OAIEzsignfoldertype_ResponseCompound::is_s_usergroup_name_x_restricted_Valid() const{
    return m_s_usergroup_name_x_restricted_isValid;
}

OAIField_eEzsignfoldertypePrivacylevel OAIEzsignfoldertype_ResponseCompound::getEEzsignfoldertypePrivacylevel() const {
    return e_ezsignfoldertype_privacylevel;
}
void OAIEzsignfoldertype_ResponseCompound::setEEzsignfoldertypePrivacylevel(const OAIField_eEzsignfoldertypePrivacylevel &e_ezsignfoldertype_privacylevel) {
    this->e_ezsignfoldertype_privacylevel = e_ezsignfoldertype_privacylevel;
    this->m_e_ezsignfoldertype_privacylevel_isSet = true;
}

bool OAIEzsignfoldertype_ResponseCompound::is_e_ezsignfoldertype_privacylevel_Set() const{
    return m_e_ezsignfoldertype_privacylevel_isSet;
}

bool OAIEzsignfoldertype_ResponseCompound::is_e_ezsignfoldertype_privacylevel_Valid() const{
    return m_e_ezsignfoldertype_privacylevel_isValid;
}

OAIField_eEzsignfoldertypeSendreminderfrequency OAIEzsignfoldertype_ResponseCompound::getEEzsignfoldertypeSendreminderfrequency() const {
    return e_ezsignfoldertype_sendreminderfrequency;
}
void OAIEzsignfoldertype_ResponseCompound::setEEzsignfoldertypeSendreminderfrequency(const OAIField_eEzsignfoldertypeSendreminderfrequency &e_ezsignfoldertype_sendreminderfrequency) {
    this->e_ezsignfoldertype_sendreminderfrequency = e_ezsignfoldertype_sendreminderfrequency;
    this->m_e_ezsignfoldertype_sendreminderfrequency_isSet = true;
}

bool OAIEzsignfoldertype_ResponseCompound::is_e_ezsignfoldertype_sendreminderfrequency_Set() const{
    return m_e_ezsignfoldertype_sendreminderfrequency_isSet;
}

bool OAIEzsignfoldertype_ResponseCompound::is_e_ezsignfoldertype_sendreminderfrequency_Valid() const{
    return m_e_ezsignfoldertype_sendreminderfrequency_isValid;
}

qint32 OAIEzsignfoldertype_ResponseCompound::getIEzsignfoldertypeArchivaldays() const {
    return i_ezsignfoldertype_archivaldays;
}
void OAIEzsignfoldertype_ResponseCompound::setIEzsignfoldertypeArchivaldays(const qint32 &i_ezsignfoldertype_archivaldays) {
    this->i_ezsignfoldertype_archivaldays = i_ezsignfoldertype_archivaldays;
    this->m_i_ezsignfoldertype_archivaldays_isSet = true;
}

bool OAIEzsignfoldertype_ResponseCompound::is_i_ezsignfoldertype_archivaldays_Set() const{
    return m_i_ezsignfoldertype_archivaldays_isSet;
}

bool OAIEzsignfoldertype_ResponseCompound::is_i_ezsignfoldertype_archivaldays_Valid() const{
    return m_i_ezsignfoldertype_archivaldays_isValid;
}

OAIField_eEzsignfoldertypeDisposal OAIEzsignfoldertype_ResponseCompound::getEEzsignfoldertypeDisposal() const {
    return e_ezsignfoldertype_disposal;
}
void OAIEzsignfoldertype_ResponseCompound::setEEzsignfoldertypeDisposal(const OAIField_eEzsignfoldertypeDisposal &e_ezsignfoldertype_disposal) {
    this->e_ezsignfoldertype_disposal = e_ezsignfoldertype_disposal;
    this->m_e_ezsignfoldertype_disposal_isSet = true;
}

bool OAIEzsignfoldertype_ResponseCompound::is_e_ezsignfoldertype_disposal_Set() const{
    return m_e_ezsignfoldertype_disposal_isSet;
}

bool OAIEzsignfoldertype_ResponseCompound::is_e_ezsignfoldertype_disposal_Valid() const{
    return m_e_ezsignfoldertype_disposal_isValid;
}

qint32 OAIEzsignfoldertype_ResponseCompound::getIEzsignfoldertypeDisposaldays() const {
    return i_ezsignfoldertype_disposaldays;
}
void OAIEzsignfoldertype_ResponseCompound::setIEzsignfoldertypeDisposaldays(const qint32 &i_ezsignfoldertype_disposaldays) {
    this->i_ezsignfoldertype_disposaldays = i_ezsignfoldertype_disposaldays;
    this->m_i_ezsignfoldertype_disposaldays_isSet = true;
}

bool OAIEzsignfoldertype_ResponseCompound::is_i_ezsignfoldertype_disposaldays_Set() const{
    return m_i_ezsignfoldertype_disposaldays_isSet;
}

bool OAIEzsignfoldertype_ResponseCompound::is_i_ezsignfoldertype_disposaldays_Valid() const{
    return m_i_ezsignfoldertype_disposaldays_isValid;
}

qint32 OAIEzsignfoldertype_ResponseCompound::getIEzsignfoldertypeDeadlinedays() const {
    return i_ezsignfoldertype_deadlinedays;
}
void OAIEzsignfoldertype_ResponseCompound::setIEzsignfoldertypeDeadlinedays(const qint32 &i_ezsignfoldertype_deadlinedays) {
    this->i_ezsignfoldertype_deadlinedays = i_ezsignfoldertype_deadlinedays;
    this->m_i_ezsignfoldertype_deadlinedays_isSet = true;
}

bool OAIEzsignfoldertype_ResponseCompound::is_i_ezsignfoldertype_deadlinedays_Set() const{
    return m_i_ezsignfoldertype_deadlinedays_isSet;
}

bool OAIEzsignfoldertype_ResponseCompound::is_i_ezsignfoldertype_deadlinedays_Valid() const{
    return m_i_ezsignfoldertype_deadlinedays_isValid;
}

bool OAIEzsignfoldertype_ResponseCompound::isBEzsignfoldertypeSendattatchmentsigner() const {
    return b_ezsignfoldertype_sendattatchmentsigner;
}
void OAIEzsignfoldertype_ResponseCompound::setBEzsignfoldertypeSendattatchmentsigner(const bool &b_ezsignfoldertype_sendattatchmentsigner) {
    this->b_ezsignfoldertype_sendattatchmentsigner = b_ezsignfoldertype_sendattatchmentsigner;
    this->m_b_ezsignfoldertype_sendattatchmentsigner_isSet = true;
}

bool OAIEzsignfoldertype_ResponseCompound::is_b_ezsignfoldertype_sendattatchmentsigner_Set() const{
    return m_b_ezsignfoldertype_sendattatchmentsigner_isSet;
}

bool OAIEzsignfoldertype_ResponseCompound::is_b_ezsignfoldertype_sendattatchmentsigner_Valid() const{
    return m_b_ezsignfoldertype_sendattatchmentsigner_isValid;
}

bool OAIEzsignfoldertype_ResponseCompound::isBEzsignfoldertypeSendsignedtodocumentowner() const {
    return b_ezsignfoldertype_sendsignedtodocumentowner;
}
void OAIEzsignfoldertype_ResponseCompound::setBEzsignfoldertypeSendsignedtodocumentowner(const bool &b_ezsignfoldertype_sendsignedtodocumentowner) {
    this->b_ezsignfoldertype_sendsignedtodocumentowner = b_ezsignfoldertype_sendsignedtodocumentowner;
    this->m_b_ezsignfoldertype_sendsignedtodocumentowner_isSet = true;
}

bool OAIEzsignfoldertype_ResponseCompound::is_b_ezsignfoldertype_sendsignedtodocumentowner_Set() const{
    return m_b_ezsignfoldertype_sendsignedtodocumentowner_isSet;
}

bool OAIEzsignfoldertype_ResponseCompound::is_b_ezsignfoldertype_sendsignedtodocumentowner_Valid() const{
    return m_b_ezsignfoldertype_sendsignedtodocumentowner_isValid;
}

bool OAIEzsignfoldertype_ResponseCompound::isBEzsignfoldertypeSendsignedtofolderowner() const {
    return b_ezsignfoldertype_sendsignedtofolderowner;
}
void OAIEzsignfoldertype_ResponseCompound::setBEzsignfoldertypeSendsignedtofolderowner(const bool &b_ezsignfoldertype_sendsignedtofolderowner) {
    this->b_ezsignfoldertype_sendsignedtofolderowner = b_ezsignfoldertype_sendsignedtofolderowner;
    this->m_b_ezsignfoldertype_sendsignedtofolderowner_isSet = true;
}

bool OAIEzsignfoldertype_ResponseCompound::is_b_ezsignfoldertype_sendsignedtofolderowner_Set() const{
    return m_b_ezsignfoldertype_sendsignedtofolderowner_isSet;
}

bool OAIEzsignfoldertype_ResponseCompound::is_b_ezsignfoldertype_sendsignedtofolderowner_Valid() const{
    return m_b_ezsignfoldertype_sendsignedtofolderowner_isValid;
}

bool OAIEzsignfoldertype_ResponseCompound::isBEzsignfoldertypeSendsignedtofullgroup() const {
    return b_ezsignfoldertype_sendsignedtofullgroup;
}
void OAIEzsignfoldertype_ResponseCompound::setBEzsignfoldertypeSendsignedtofullgroup(const bool &b_ezsignfoldertype_sendsignedtofullgroup) {
    this->b_ezsignfoldertype_sendsignedtofullgroup = b_ezsignfoldertype_sendsignedtofullgroup;
    this->m_b_ezsignfoldertype_sendsignedtofullgroup_isSet = true;
}

bool OAIEzsignfoldertype_ResponseCompound::is_b_ezsignfoldertype_sendsignedtofullgroup_Set() const{
    return m_b_ezsignfoldertype_sendsignedtofullgroup_isSet;
}

bool OAIEzsignfoldertype_ResponseCompound::is_b_ezsignfoldertype_sendsignedtofullgroup_Valid() const{
    return m_b_ezsignfoldertype_sendsignedtofullgroup_isValid;
}

bool OAIEzsignfoldertype_ResponseCompound::isBEzsignfoldertypeSendsignedtolimitedgroup() const {
    return b_ezsignfoldertype_sendsignedtolimitedgroup;
}
void OAIEzsignfoldertype_ResponseCompound::setBEzsignfoldertypeSendsignedtolimitedgroup(const bool &b_ezsignfoldertype_sendsignedtolimitedgroup) {
    this->b_ezsignfoldertype_sendsignedtolimitedgroup = b_ezsignfoldertype_sendsignedtolimitedgroup;
    this->m_b_ezsignfoldertype_sendsignedtolimitedgroup_isSet = true;
}

bool OAIEzsignfoldertype_ResponseCompound::is_b_ezsignfoldertype_sendsignedtolimitedgroup_Set() const{
    return m_b_ezsignfoldertype_sendsignedtolimitedgroup_isSet;
}

bool OAIEzsignfoldertype_ResponseCompound::is_b_ezsignfoldertype_sendsignedtolimitedgroup_Valid() const{
    return m_b_ezsignfoldertype_sendsignedtolimitedgroup_isValid;
}

bool OAIEzsignfoldertype_ResponseCompound::isBEzsignfoldertypeSendsignedtocolleague() const {
    return b_ezsignfoldertype_sendsignedtocolleague;
}
void OAIEzsignfoldertype_ResponseCompound::setBEzsignfoldertypeSendsignedtocolleague(const bool &b_ezsignfoldertype_sendsignedtocolleague) {
    this->b_ezsignfoldertype_sendsignedtocolleague = b_ezsignfoldertype_sendsignedtocolleague;
    this->m_b_ezsignfoldertype_sendsignedtocolleague_isSet = true;
}

bool OAIEzsignfoldertype_ResponseCompound::is_b_ezsignfoldertype_sendsignedtocolleague_Set() const{
    return m_b_ezsignfoldertype_sendsignedtocolleague_isSet;
}

bool OAIEzsignfoldertype_ResponseCompound::is_b_ezsignfoldertype_sendsignedtocolleague_Valid() const{
    return m_b_ezsignfoldertype_sendsignedtocolleague_isValid;
}

bool OAIEzsignfoldertype_ResponseCompound::isBEzsignfoldertypeSendsummarytodocumentowner() const {
    return b_ezsignfoldertype_sendsummarytodocumentowner;
}
void OAIEzsignfoldertype_ResponseCompound::setBEzsignfoldertypeSendsummarytodocumentowner(const bool &b_ezsignfoldertype_sendsummarytodocumentowner) {
    this->b_ezsignfoldertype_sendsummarytodocumentowner = b_ezsignfoldertype_sendsummarytodocumentowner;
    this->m_b_ezsignfoldertype_sendsummarytodocumentowner_isSet = true;
}

bool OAIEzsignfoldertype_ResponseCompound::is_b_ezsignfoldertype_sendsummarytodocumentowner_Set() const{
    return m_b_ezsignfoldertype_sendsummarytodocumentowner_isSet;
}

bool OAIEzsignfoldertype_ResponseCompound::is_b_ezsignfoldertype_sendsummarytodocumentowner_Valid() const{
    return m_b_ezsignfoldertype_sendsummarytodocumentowner_isValid;
}

bool OAIEzsignfoldertype_ResponseCompound::isBEzsignfoldertypeSendsummarytofolderowner() const {
    return b_ezsignfoldertype_sendsummarytofolderowner;
}
void OAIEzsignfoldertype_ResponseCompound::setBEzsignfoldertypeSendsummarytofolderowner(const bool &b_ezsignfoldertype_sendsummarytofolderowner) {
    this->b_ezsignfoldertype_sendsummarytofolderowner = b_ezsignfoldertype_sendsummarytofolderowner;
    this->m_b_ezsignfoldertype_sendsummarytofolderowner_isSet = true;
}

bool OAIEzsignfoldertype_ResponseCompound::is_b_ezsignfoldertype_sendsummarytofolderowner_Set() const{
    return m_b_ezsignfoldertype_sendsummarytofolderowner_isSet;
}

bool OAIEzsignfoldertype_ResponseCompound::is_b_ezsignfoldertype_sendsummarytofolderowner_Valid() const{
    return m_b_ezsignfoldertype_sendsummarytofolderowner_isValid;
}

bool OAIEzsignfoldertype_ResponseCompound::isBEzsignfoldertypeSendsummarytofullgroup() const {
    return b_ezsignfoldertype_sendsummarytofullgroup;
}
void OAIEzsignfoldertype_ResponseCompound::setBEzsignfoldertypeSendsummarytofullgroup(const bool &b_ezsignfoldertype_sendsummarytofullgroup) {
    this->b_ezsignfoldertype_sendsummarytofullgroup = b_ezsignfoldertype_sendsummarytofullgroup;
    this->m_b_ezsignfoldertype_sendsummarytofullgroup_isSet = true;
}

bool OAIEzsignfoldertype_ResponseCompound::is_b_ezsignfoldertype_sendsummarytofullgroup_Set() const{
    return m_b_ezsignfoldertype_sendsummarytofullgroup_isSet;
}

bool OAIEzsignfoldertype_ResponseCompound::is_b_ezsignfoldertype_sendsummarytofullgroup_Valid() const{
    return m_b_ezsignfoldertype_sendsummarytofullgroup_isValid;
}

bool OAIEzsignfoldertype_ResponseCompound::isBEzsignfoldertypeSendsummarytolimitedgroup() const {
    return b_ezsignfoldertype_sendsummarytolimitedgroup;
}
void OAIEzsignfoldertype_ResponseCompound::setBEzsignfoldertypeSendsummarytolimitedgroup(const bool &b_ezsignfoldertype_sendsummarytolimitedgroup) {
    this->b_ezsignfoldertype_sendsummarytolimitedgroup = b_ezsignfoldertype_sendsummarytolimitedgroup;
    this->m_b_ezsignfoldertype_sendsummarytolimitedgroup_isSet = true;
}

bool OAIEzsignfoldertype_ResponseCompound::is_b_ezsignfoldertype_sendsummarytolimitedgroup_Set() const{
    return m_b_ezsignfoldertype_sendsummarytolimitedgroup_isSet;
}

bool OAIEzsignfoldertype_ResponseCompound::is_b_ezsignfoldertype_sendsummarytolimitedgroup_Valid() const{
    return m_b_ezsignfoldertype_sendsummarytolimitedgroup_isValid;
}

bool OAIEzsignfoldertype_ResponseCompound::isBEzsignfoldertypeSendsummarytocolleague() const {
    return b_ezsignfoldertype_sendsummarytocolleague;
}
void OAIEzsignfoldertype_ResponseCompound::setBEzsignfoldertypeSendsummarytocolleague(const bool &b_ezsignfoldertype_sendsummarytocolleague) {
    this->b_ezsignfoldertype_sendsummarytocolleague = b_ezsignfoldertype_sendsummarytocolleague;
    this->m_b_ezsignfoldertype_sendsummarytocolleague_isSet = true;
}

bool OAIEzsignfoldertype_ResponseCompound::is_b_ezsignfoldertype_sendsummarytocolleague_Set() const{
    return m_b_ezsignfoldertype_sendsummarytocolleague_isSet;
}

bool OAIEzsignfoldertype_ResponseCompound::is_b_ezsignfoldertype_sendsummarytocolleague_Valid() const{
    return m_b_ezsignfoldertype_sendsummarytocolleague_isValid;
}

bool OAIEzsignfoldertype_ResponseCompound::isBEzsignfoldertypeIncludeproofsigner() const {
    return b_ezsignfoldertype_includeproofsigner;
}
void OAIEzsignfoldertype_ResponseCompound::setBEzsignfoldertypeIncludeproofsigner(const bool &b_ezsignfoldertype_includeproofsigner) {
    this->b_ezsignfoldertype_includeproofsigner = b_ezsignfoldertype_includeproofsigner;
    this->m_b_ezsignfoldertype_includeproofsigner_isSet = true;
}

bool OAIEzsignfoldertype_ResponseCompound::is_b_ezsignfoldertype_includeproofsigner_Set() const{
    return m_b_ezsignfoldertype_includeproofsigner_isSet;
}

bool OAIEzsignfoldertype_ResponseCompound::is_b_ezsignfoldertype_includeproofsigner_Valid() const{
    return m_b_ezsignfoldertype_includeproofsigner_isValid;
}

bool OAIEzsignfoldertype_ResponseCompound::isBEzsignfoldertypeIncludeproofuser() const {
    return b_ezsignfoldertype_includeproofuser;
}
void OAIEzsignfoldertype_ResponseCompound::setBEzsignfoldertypeIncludeproofuser(const bool &b_ezsignfoldertype_includeproofuser) {
    this->b_ezsignfoldertype_includeproofuser = b_ezsignfoldertype_includeproofuser;
    this->m_b_ezsignfoldertype_includeproofuser_isSet = true;
}

bool OAIEzsignfoldertype_ResponseCompound::is_b_ezsignfoldertype_includeproofuser_Set() const{
    return m_b_ezsignfoldertype_includeproofuser_isSet;
}

bool OAIEzsignfoldertype_ResponseCompound::is_b_ezsignfoldertype_includeproofuser_Valid() const{
    return m_b_ezsignfoldertype_includeproofuser_isValid;
}

bool OAIEzsignfoldertype_ResponseCompound::isBEzsignfoldertypeIsactive() const {
    return b_ezsignfoldertype_isactive;
}
void OAIEzsignfoldertype_ResponseCompound::setBEzsignfoldertypeIsactive(const bool &b_ezsignfoldertype_isactive) {
    this->b_ezsignfoldertype_isactive = b_ezsignfoldertype_isactive;
    this->m_b_ezsignfoldertype_isactive_isSet = true;
}

bool OAIEzsignfoldertype_ResponseCompound::is_b_ezsignfoldertype_isactive_Set() const{
    return m_b_ezsignfoldertype_isactive_isSet;
}

bool OAIEzsignfoldertype_ResponseCompound::is_b_ezsignfoldertype_isactive_Valid() const{
    return m_b_ezsignfoldertype_isactive_isValid;
}

QList<qint32> OAIEzsignfoldertype_ResponseCompound::getAFkiUserIdSigned() const {
    return a_fki_user_id_signed;
}
void OAIEzsignfoldertype_ResponseCompound::setAFkiUserIdSigned(const QList<qint32> &a_fki_user_id_signed) {
    this->a_fki_user_id_signed = a_fki_user_id_signed;
    this->m_a_fki_user_id_signed_isSet = true;
}

bool OAIEzsignfoldertype_ResponseCompound::is_a_fki_user_id_signed_Set() const{
    return m_a_fki_user_id_signed_isSet;
}

bool OAIEzsignfoldertype_ResponseCompound::is_a_fki_user_id_signed_Valid() const{
    return m_a_fki_user_id_signed_isValid;
}

QList<qint32> OAIEzsignfoldertype_ResponseCompound::getAFkiUserIdSummary() const {
    return a_fki_user_id_summary;
}
void OAIEzsignfoldertype_ResponseCompound::setAFkiUserIdSummary(const QList<qint32> &a_fki_user_id_summary) {
    this->a_fki_user_id_summary = a_fki_user_id_summary;
    this->m_a_fki_user_id_summary_isSet = true;
}

bool OAIEzsignfoldertype_ResponseCompound::is_a_fki_user_id_summary_Set() const{
    return m_a_fki_user_id_summary_isSet;
}

bool OAIEzsignfoldertype_ResponseCompound::is_a_fki_user_id_summary_Valid() const{
    return m_a_fki_user_id_summary_isValid;
}

bool OAIEzsignfoldertype_ResponseCompound::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_pki_ezsignfoldertype_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (obj_ezsignfoldertype_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fki_branding_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fki_billingentityinternal_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fki_usergroup_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fki_usergroup_id_restricted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fki_ezsigntsarequirement_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s_branding_description_x_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s_billingentityinternal_description_x_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s_ezsigntsarequirement_description_x_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s_email_address_signed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s_email_address_summary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s_usergroup_name_x_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s_usergroup_name_x_restricted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (e_ezsignfoldertype_privacylevel.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (e_ezsignfoldertype_sendreminderfrequency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_i_ezsignfoldertype_archivaldays_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (e_ezsignfoldertype_disposal.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_i_ezsignfoldertype_disposaldays_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_i_ezsignfoldertype_deadlinedays_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_b_ezsignfoldertype_sendattatchmentsigner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_b_ezsignfoldertype_sendsignedtodocumentowner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_b_ezsignfoldertype_sendsignedtofolderowner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_b_ezsignfoldertype_sendsignedtofullgroup_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_b_ezsignfoldertype_sendsignedtolimitedgroup_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_b_ezsignfoldertype_sendsignedtocolleague_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_b_ezsignfoldertype_sendsummarytodocumentowner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_b_ezsignfoldertype_sendsummarytofolderowner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_b_ezsignfoldertype_sendsummarytofullgroup_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_b_ezsignfoldertype_sendsummarytolimitedgroup_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_b_ezsignfoldertype_sendsummarytocolleague_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_b_ezsignfoldertype_includeproofsigner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_b_ezsignfoldertype_includeproofuser_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_b_ezsignfoldertype_isactive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (a_fki_user_id_signed.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (a_fki_user_id_summary.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEzsignfoldertype_ResponseCompound::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_pki_ezsignfoldertype_id_isValid && m_obj_ezsignfoldertype_name_isValid && m_fki_branding_id_isValid && m_s_branding_description_x_isValid && m_e_ezsignfoldertype_privacylevel_isValid && m_i_ezsignfoldertype_archivaldays_isValid && m_e_ezsignfoldertype_disposal_isValid && m_i_ezsignfoldertype_deadlinedays_isValid && m_b_ezsignfoldertype_sendattatchmentsigner_isValid && m_b_ezsignfoldertype_sendsignedtodocumentowner_isValid && m_b_ezsignfoldertype_sendsignedtofolderowner_isValid && m_b_ezsignfoldertype_sendsignedtocolleague_isValid && m_b_ezsignfoldertype_sendsummarytodocumentowner_isValid && m_b_ezsignfoldertype_sendsummarytofolderowner_isValid && m_b_ezsignfoldertype_sendsummarytocolleague_isValid && m_b_ezsignfoldertype_includeproofsigner_isValid && m_b_ezsignfoldertype_includeproofuser_isValid && m_b_ezsignfoldertype_isactive_isValid && true;
}

} // namespace OpenAPI
