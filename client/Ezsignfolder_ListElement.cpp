/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "Ezsignfolder_ListElement.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "Helpers.h"

namespace Ezmaxapi {

Ezsignfolder_ListElement::Ezsignfolder_ListElement(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

Ezsignfolder_ListElement::Ezsignfolder_ListElement() {
    this->initializeModel();
}

Ezsignfolder_ListElement::~Ezsignfolder_ListElement() {}

void Ezsignfolder_ListElement::initializeModel() {

    m_pki_ezsignfolder_id_isSet = false;
    m_pki_ezsignfolder_id_isValid = false;

    m_fki_ezsignfoldertype_id_isSet = false;
    m_fki_ezsignfoldertype_id_isValid = false;

    m_e_ezsignfoldertype_privacylevel_isSet = false;
    m_e_ezsignfoldertype_privacylevel_isValid = false;

    m_s_ezsignfoldertype_name_x_isSet = false;
    m_s_ezsignfoldertype_name_x_isValid = false;

    m_s_ezsignfolder_description_isSet = false;
    m_s_ezsignfolder_description_isValid = false;

    m_e_ezsignfolder_step_isSet = false;
    m_e_ezsignfolder_step_isValid = false;

    m_dt_created_date_isSet = false;
    m_dt_created_date_isValid = false;

    m_dt_ezsignfolder_delayedsenddate_isSet = false;
    m_dt_ezsignfolder_delayedsenddate_isValid = false;

    m_dt_ezsignfolder_sentdate_isSet = false;
    m_dt_ezsignfolder_sentdate_isValid = false;

    m_dt_ezsignfolder_duedate_isSet = false;
    m_dt_ezsignfolder_duedate_isValid = false;

    m_i_ezsigndocument_isSet = false;
    m_i_ezsigndocument_isValid = false;

    m_i_ezsigndocument_edm_isSet = false;
    m_i_ezsigndocument_edm_isValid = false;

    m_i_ezsignsignature_isSet = false;
    m_i_ezsignsignature_isValid = false;

    m_i_ezsignsignature_signed_isSet = false;
    m_i_ezsignsignature_signed_isValid = false;

    m_i_ezsignformfieldgroup_isSet = false;
    m_i_ezsignformfieldgroup_isValid = false;

    m_i_ezsignformfieldgroup_completed_isSet = false;
    m_i_ezsignformfieldgroup_completed_isValid = false;

    m_b_ezsignform_hasdependencies_isSet = false;
    m_b_ezsignform_hasdependencies_isValid = false;

    m_d_ezsignfolder_completedpercentage_isSet = false;
    m_d_ezsignfolder_completedpercentage_isValid = false;
}

void Ezsignfolder_ListElement::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void Ezsignfolder_ListElement::fromJsonObject(QJsonObject json) {

    m_pki_ezsignfolder_id_isValid = ::Ezmaxapi::fromJsonValue(m_pki_ezsignfolder_id, json[QString("pkiEzsignfolderID")]);
    m_pki_ezsignfolder_id_isSet = !json[QString("pkiEzsignfolderID")].isNull() && m_pki_ezsignfolder_id_isValid;

    m_fki_ezsignfoldertype_id_isValid = ::Ezmaxapi::fromJsonValue(m_fki_ezsignfoldertype_id, json[QString("fkiEzsignfoldertypeID")]);
    m_fki_ezsignfoldertype_id_isSet = !json[QString("fkiEzsignfoldertypeID")].isNull() && m_fki_ezsignfoldertype_id_isValid;

    m_e_ezsignfoldertype_privacylevel_isValid = ::Ezmaxapi::fromJsonValue(m_e_ezsignfoldertype_privacylevel, json[QString("eEzsignfoldertypePrivacylevel")]);
    m_e_ezsignfoldertype_privacylevel_isSet = !json[QString("eEzsignfoldertypePrivacylevel")].isNull() && m_e_ezsignfoldertype_privacylevel_isValid;

    m_s_ezsignfoldertype_name_x_isValid = ::Ezmaxapi::fromJsonValue(m_s_ezsignfoldertype_name_x, json[QString("sEzsignfoldertypeNameX")]);
    m_s_ezsignfoldertype_name_x_isSet = !json[QString("sEzsignfoldertypeNameX")].isNull() && m_s_ezsignfoldertype_name_x_isValid;

    m_s_ezsignfolder_description_isValid = ::Ezmaxapi::fromJsonValue(m_s_ezsignfolder_description, json[QString("sEzsignfolderDescription")]);
    m_s_ezsignfolder_description_isSet = !json[QString("sEzsignfolderDescription")].isNull() && m_s_ezsignfolder_description_isValid;

    m_e_ezsignfolder_step_isValid = ::Ezmaxapi::fromJsonValue(m_e_ezsignfolder_step, json[QString("eEzsignfolderStep")]);
    m_e_ezsignfolder_step_isSet = !json[QString("eEzsignfolderStep")].isNull() && m_e_ezsignfolder_step_isValid;

    m_dt_created_date_isValid = ::Ezmaxapi::fromJsonValue(m_dt_created_date, json[QString("dtCreatedDate")]);
    m_dt_created_date_isSet = !json[QString("dtCreatedDate")].isNull() && m_dt_created_date_isValid;

    m_dt_ezsignfolder_delayedsenddate_isValid = ::Ezmaxapi::fromJsonValue(m_dt_ezsignfolder_delayedsenddate, json[QString("dtEzsignfolderDelayedsenddate")]);
    m_dt_ezsignfolder_delayedsenddate_isSet = !json[QString("dtEzsignfolderDelayedsenddate")].isNull() && m_dt_ezsignfolder_delayedsenddate_isValid;

    m_dt_ezsignfolder_sentdate_isValid = ::Ezmaxapi::fromJsonValue(m_dt_ezsignfolder_sentdate, json[QString("dtEzsignfolderSentdate")]);
    m_dt_ezsignfolder_sentdate_isSet = !json[QString("dtEzsignfolderSentdate")].isNull() && m_dt_ezsignfolder_sentdate_isValid;

    m_dt_ezsignfolder_duedate_isValid = ::Ezmaxapi::fromJsonValue(m_dt_ezsignfolder_duedate, json[QString("dtEzsignfolderDuedate")]);
    m_dt_ezsignfolder_duedate_isSet = !json[QString("dtEzsignfolderDuedate")].isNull() && m_dt_ezsignfolder_duedate_isValid;

    m_i_ezsigndocument_isValid = ::Ezmaxapi::fromJsonValue(m_i_ezsigndocument, json[QString("iEzsigndocument")]);
    m_i_ezsigndocument_isSet = !json[QString("iEzsigndocument")].isNull() && m_i_ezsigndocument_isValid;

    m_i_ezsigndocument_edm_isValid = ::Ezmaxapi::fromJsonValue(m_i_ezsigndocument_edm, json[QString("iEzsigndocumentEdm")]);
    m_i_ezsigndocument_edm_isSet = !json[QString("iEzsigndocumentEdm")].isNull() && m_i_ezsigndocument_edm_isValid;

    m_i_ezsignsignature_isValid = ::Ezmaxapi::fromJsonValue(m_i_ezsignsignature, json[QString("iEzsignsignature")]);
    m_i_ezsignsignature_isSet = !json[QString("iEzsignsignature")].isNull() && m_i_ezsignsignature_isValid;

    m_i_ezsignsignature_signed_isValid = ::Ezmaxapi::fromJsonValue(m_i_ezsignsignature_signed, json[QString("iEzsignsignatureSigned")]);
    m_i_ezsignsignature_signed_isSet = !json[QString("iEzsignsignatureSigned")].isNull() && m_i_ezsignsignature_signed_isValid;

    m_i_ezsignformfieldgroup_isValid = ::Ezmaxapi::fromJsonValue(m_i_ezsignformfieldgroup, json[QString("iEzsignformfieldgroup")]);
    m_i_ezsignformfieldgroup_isSet = !json[QString("iEzsignformfieldgroup")].isNull() && m_i_ezsignformfieldgroup_isValid;

    m_i_ezsignformfieldgroup_completed_isValid = ::Ezmaxapi::fromJsonValue(m_i_ezsignformfieldgroup_completed, json[QString("iEzsignformfieldgroupCompleted")]);
    m_i_ezsignformfieldgroup_completed_isSet = !json[QString("iEzsignformfieldgroupCompleted")].isNull() && m_i_ezsignformfieldgroup_completed_isValid;

    m_b_ezsignform_hasdependencies_isValid = ::Ezmaxapi::fromJsonValue(m_b_ezsignform_hasdependencies, json[QString("bEzsignformHasdependencies")]);
    m_b_ezsignform_hasdependencies_isSet = !json[QString("bEzsignformHasdependencies")].isNull() && m_b_ezsignform_hasdependencies_isValid;

    m_d_ezsignfolder_completedpercentage_isValid = ::Ezmaxapi::fromJsonValue(m_d_ezsignfolder_completedpercentage, json[QString("dEzsignfolderCompletedpercentage")]);
    m_d_ezsignfolder_completedpercentage_isSet = !json[QString("dEzsignfolderCompletedpercentage")].isNull() && m_d_ezsignfolder_completedpercentage_isValid;
}

QString Ezsignfolder_ListElement::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject Ezsignfolder_ListElement::asJsonObject() const {
    QJsonObject obj;
    if (m_pki_ezsignfolder_id_isSet) {
        obj.insert(QString("pkiEzsignfolderID"), ::Ezmaxapi::toJsonValue(m_pki_ezsignfolder_id));
    }
    if (m_fki_ezsignfoldertype_id_isSet) {
        obj.insert(QString("fkiEzsignfoldertypeID"), ::Ezmaxapi::toJsonValue(m_fki_ezsignfoldertype_id));
    }
    if (m_e_ezsignfoldertype_privacylevel.isSet()) {
        obj.insert(QString("eEzsignfoldertypePrivacylevel"), ::Ezmaxapi::toJsonValue(m_e_ezsignfoldertype_privacylevel));
    }
    if (m_s_ezsignfoldertype_name_x_isSet) {
        obj.insert(QString("sEzsignfoldertypeNameX"), ::Ezmaxapi::toJsonValue(m_s_ezsignfoldertype_name_x));
    }
    if (m_s_ezsignfolder_description_isSet) {
        obj.insert(QString("sEzsignfolderDescription"), ::Ezmaxapi::toJsonValue(m_s_ezsignfolder_description));
    }
    if (m_e_ezsignfolder_step.isSet()) {
        obj.insert(QString("eEzsignfolderStep"), ::Ezmaxapi::toJsonValue(m_e_ezsignfolder_step));
    }
    if (m_dt_created_date_isSet) {
        obj.insert(QString("dtCreatedDate"), ::Ezmaxapi::toJsonValue(m_dt_created_date));
    }
    if (m_dt_ezsignfolder_delayedsenddate_isSet) {
        obj.insert(QString("dtEzsignfolderDelayedsenddate"), ::Ezmaxapi::toJsonValue(m_dt_ezsignfolder_delayedsenddate));
    }
    if (m_dt_ezsignfolder_sentdate_isSet) {
        obj.insert(QString("dtEzsignfolderSentdate"), ::Ezmaxapi::toJsonValue(m_dt_ezsignfolder_sentdate));
    }
    if (m_dt_ezsignfolder_duedate_isSet) {
        obj.insert(QString("dtEzsignfolderDuedate"), ::Ezmaxapi::toJsonValue(m_dt_ezsignfolder_duedate));
    }
    if (m_i_ezsigndocument_isSet) {
        obj.insert(QString("iEzsigndocument"), ::Ezmaxapi::toJsonValue(m_i_ezsigndocument));
    }
    if (m_i_ezsigndocument_edm_isSet) {
        obj.insert(QString("iEzsigndocumentEdm"), ::Ezmaxapi::toJsonValue(m_i_ezsigndocument_edm));
    }
    if (m_i_ezsignsignature_isSet) {
        obj.insert(QString("iEzsignsignature"), ::Ezmaxapi::toJsonValue(m_i_ezsignsignature));
    }
    if (m_i_ezsignsignature_signed_isSet) {
        obj.insert(QString("iEzsignsignatureSigned"), ::Ezmaxapi::toJsonValue(m_i_ezsignsignature_signed));
    }
    if (m_i_ezsignformfieldgroup_isSet) {
        obj.insert(QString("iEzsignformfieldgroup"), ::Ezmaxapi::toJsonValue(m_i_ezsignformfieldgroup));
    }
    if (m_i_ezsignformfieldgroup_completed_isSet) {
        obj.insert(QString("iEzsignformfieldgroupCompleted"), ::Ezmaxapi::toJsonValue(m_i_ezsignformfieldgroup_completed));
    }
    if (m_b_ezsignform_hasdependencies_isSet) {
        obj.insert(QString("bEzsignformHasdependencies"), ::Ezmaxapi::toJsonValue(m_b_ezsignform_hasdependencies));
    }
    if (m_d_ezsignfolder_completedpercentage_isSet) {
        obj.insert(QString("dEzsignfolderCompletedpercentage"), ::Ezmaxapi::toJsonValue(m_d_ezsignfolder_completedpercentage));
    }
    return obj;
}

qint32 Ezsignfolder_ListElement::getPkiEzsignfolderId() const {
    return m_pki_ezsignfolder_id;
}
void Ezsignfolder_ListElement::setPkiEzsignfolderId(const qint32 &pki_ezsignfolder_id) {
    m_pki_ezsignfolder_id = pki_ezsignfolder_id;
    m_pki_ezsignfolder_id_isSet = true;
}

bool Ezsignfolder_ListElement::is_pki_ezsignfolder_id_Set() const{
    return m_pki_ezsignfolder_id_isSet;
}

bool Ezsignfolder_ListElement::is_pki_ezsignfolder_id_Valid() const{
    return m_pki_ezsignfolder_id_isValid;
}

qint32 Ezsignfolder_ListElement::getFkiEzsignfoldertypeId() const {
    return m_fki_ezsignfoldertype_id;
}
void Ezsignfolder_ListElement::setFkiEzsignfoldertypeId(const qint32 &fki_ezsignfoldertype_id) {
    m_fki_ezsignfoldertype_id = fki_ezsignfoldertype_id;
    m_fki_ezsignfoldertype_id_isSet = true;
}

bool Ezsignfolder_ListElement::is_fki_ezsignfoldertype_id_Set() const{
    return m_fki_ezsignfoldertype_id_isSet;
}

bool Ezsignfolder_ListElement::is_fki_ezsignfoldertype_id_Valid() const{
    return m_fki_ezsignfoldertype_id_isValid;
}

Field_eEzsignfoldertypePrivacylevel Ezsignfolder_ListElement::getEEzsignfoldertypePrivacylevel() const {
    return m_e_ezsignfoldertype_privacylevel;
}
void Ezsignfolder_ListElement::setEEzsignfoldertypePrivacylevel(const Field_eEzsignfoldertypePrivacylevel &e_ezsignfoldertype_privacylevel) {
    m_e_ezsignfoldertype_privacylevel = e_ezsignfoldertype_privacylevel;
    m_e_ezsignfoldertype_privacylevel_isSet = true;
}

bool Ezsignfolder_ListElement::is_e_ezsignfoldertype_privacylevel_Set() const{
    return m_e_ezsignfoldertype_privacylevel_isSet;
}

bool Ezsignfolder_ListElement::is_e_ezsignfoldertype_privacylevel_Valid() const{
    return m_e_ezsignfoldertype_privacylevel_isValid;
}

QString Ezsignfolder_ListElement::getSEzsignfoldertypeNameX() const {
    return m_s_ezsignfoldertype_name_x;
}
void Ezsignfolder_ListElement::setSEzsignfoldertypeNameX(const QString &s_ezsignfoldertype_name_x) {
    m_s_ezsignfoldertype_name_x = s_ezsignfoldertype_name_x;
    m_s_ezsignfoldertype_name_x_isSet = true;
}

bool Ezsignfolder_ListElement::is_s_ezsignfoldertype_name_x_Set() const{
    return m_s_ezsignfoldertype_name_x_isSet;
}

bool Ezsignfolder_ListElement::is_s_ezsignfoldertype_name_x_Valid() const{
    return m_s_ezsignfoldertype_name_x_isValid;
}

QString Ezsignfolder_ListElement::getSEzsignfolderDescription() const {
    return m_s_ezsignfolder_description;
}
void Ezsignfolder_ListElement::setSEzsignfolderDescription(const QString &s_ezsignfolder_description) {
    m_s_ezsignfolder_description = s_ezsignfolder_description;
    m_s_ezsignfolder_description_isSet = true;
}

bool Ezsignfolder_ListElement::is_s_ezsignfolder_description_Set() const{
    return m_s_ezsignfolder_description_isSet;
}

bool Ezsignfolder_ListElement::is_s_ezsignfolder_description_Valid() const{
    return m_s_ezsignfolder_description_isValid;
}

Field_eEzsignfolderStep Ezsignfolder_ListElement::getEEzsignfolderStep() const {
    return m_e_ezsignfolder_step;
}
void Ezsignfolder_ListElement::setEEzsignfolderStep(const Field_eEzsignfolderStep &e_ezsignfolder_step) {
    m_e_ezsignfolder_step = e_ezsignfolder_step;
    m_e_ezsignfolder_step_isSet = true;
}

bool Ezsignfolder_ListElement::is_e_ezsignfolder_step_Set() const{
    return m_e_ezsignfolder_step_isSet;
}

bool Ezsignfolder_ListElement::is_e_ezsignfolder_step_Valid() const{
    return m_e_ezsignfolder_step_isValid;
}

QString Ezsignfolder_ListElement::getDtCreatedDate() const {
    return m_dt_created_date;
}
void Ezsignfolder_ListElement::setDtCreatedDate(const QString &dt_created_date) {
    m_dt_created_date = dt_created_date;
    m_dt_created_date_isSet = true;
}

bool Ezsignfolder_ListElement::is_dt_created_date_Set() const{
    return m_dt_created_date_isSet;
}

bool Ezsignfolder_ListElement::is_dt_created_date_Valid() const{
    return m_dt_created_date_isValid;
}

QString Ezsignfolder_ListElement::getDtEzsignfolderDelayedsenddate() const {
    return m_dt_ezsignfolder_delayedsenddate;
}
void Ezsignfolder_ListElement::setDtEzsignfolderDelayedsenddate(const QString &dt_ezsignfolder_delayedsenddate) {
    m_dt_ezsignfolder_delayedsenddate = dt_ezsignfolder_delayedsenddate;
    m_dt_ezsignfolder_delayedsenddate_isSet = true;
}

bool Ezsignfolder_ListElement::is_dt_ezsignfolder_delayedsenddate_Set() const{
    return m_dt_ezsignfolder_delayedsenddate_isSet;
}

bool Ezsignfolder_ListElement::is_dt_ezsignfolder_delayedsenddate_Valid() const{
    return m_dt_ezsignfolder_delayedsenddate_isValid;
}

QString Ezsignfolder_ListElement::getDtEzsignfolderSentdate() const {
    return m_dt_ezsignfolder_sentdate;
}
void Ezsignfolder_ListElement::setDtEzsignfolderSentdate(const QString &dt_ezsignfolder_sentdate) {
    m_dt_ezsignfolder_sentdate = dt_ezsignfolder_sentdate;
    m_dt_ezsignfolder_sentdate_isSet = true;
}

bool Ezsignfolder_ListElement::is_dt_ezsignfolder_sentdate_Set() const{
    return m_dt_ezsignfolder_sentdate_isSet;
}

bool Ezsignfolder_ListElement::is_dt_ezsignfolder_sentdate_Valid() const{
    return m_dt_ezsignfolder_sentdate_isValid;
}

QString Ezsignfolder_ListElement::getDtEzsignfolderDuedate() const {
    return m_dt_ezsignfolder_duedate;
}
void Ezsignfolder_ListElement::setDtEzsignfolderDuedate(const QString &dt_ezsignfolder_duedate) {
    m_dt_ezsignfolder_duedate = dt_ezsignfolder_duedate;
    m_dt_ezsignfolder_duedate_isSet = true;
}

bool Ezsignfolder_ListElement::is_dt_ezsignfolder_duedate_Set() const{
    return m_dt_ezsignfolder_duedate_isSet;
}

bool Ezsignfolder_ListElement::is_dt_ezsignfolder_duedate_Valid() const{
    return m_dt_ezsignfolder_duedate_isValid;
}

qint32 Ezsignfolder_ListElement::getIEzsigndocument() const {
    return m_i_ezsigndocument;
}
void Ezsignfolder_ListElement::setIEzsigndocument(const qint32 &i_ezsigndocument) {
    m_i_ezsigndocument = i_ezsigndocument;
    m_i_ezsigndocument_isSet = true;
}

bool Ezsignfolder_ListElement::is_i_ezsigndocument_Set() const{
    return m_i_ezsigndocument_isSet;
}

bool Ezsignfolder_ListElement::is_i_ezsigndocument_Valid() const{
    return m_i_ezsigndocument_isValid;
}

qint32 Ezsignfolder_ListElement::getIEzsigndocumentEdm() const {
    return m_i_ezsigndocument_edm;
}
void Ezsignfolder_ListElement::setIEzsigndocumentEdm(const qint32 &i_ezsigndocument_edm) {
    m_i_ezsigndocument_edm = i_ezsigndocument_edm;
    m_i_ezsigndocument_edm_isSet = true;
}

bool Ezsignfolder_ListElement::is_i_ezsigndocument_edm_Set() const{
    return m_i_ezsigndocument_edm_isSet;
}

bool Ezsignfolder_ListElement::is_i_ezsigndocument_edm_Valid() const{
    return m_i_ezsigndocument_edm_isValid;
}

qint32 Ezsignfolder_ListElement::getIEzsignsignature() const {
    return m_i_ezsignsignature;
}
void Ezsignfolder_ListElement::setIEzsignsignature(const qint32 &i_ezsignsignature) {
    m_i_ezsignsignature = i_ezsignsignature;
    m_i_ezsignsignature_isSet = true;
}

bool Ezsignfolder_ListElement::is_i_ezsignsignature_Set() const{
    return m_i_ezsignsignature_isSet;
}

bool Ezsignfolder_ListElement::is_i_ezsignsignature_Valid() const{
    return m_i_ezsignsignature_isValid;
}

qint32 Ezsignfolder_ListElement::getIEzsignsignatureSigned() const {
    return m_i_ezsignsignature_signed;
}
void Ezsignfolder_ListElement::setIEzsignsignatureSigned(const qint32 &i_ezsignsignature_signed) {
    m_i_ezsignsignature_signed = i_ezsignsignature_signed;
    m_i_ezsignsignature_signed_isSet = true;
}

bool Ezsignfolder_ListElement::is_i_ezsignsignature_signed_Set() const{
    return m_i_ezsignsignature_signed_isSet;
}

bool Ezsignfolder_ListElement::is_i_ezsignsignature_signed_Valid() const{
    return m_i_ezsignsignature_signed_isValid;
}

qint32 Ezsignfolder_ListElement::getIEzsignformfieldgroup() const {
    return m_i_ezsignformfieldgroup;
}
void Ezsignfolder_ListElement::setIEzsignformfieldgroup(const qint32 &i_ezsignformfieldgroup) {
    m_i_ezsignformfieldgroup = i_ezsignformfieldgroup;
    m_i_ezsignformfieldgroup_isSet = true;
}

bool Ezsignfolder_ListElement::is_i_ezsignformfieldgroup_Set() const{
    return m_i_ezsignformfieldgroup_isSet;
}

bool Ezsignfolder_ListElement::is_i_ezsignformfieldgroup_Valid() const{
    return m_i_ezsignformfieldgroup_isValid;
}

qint32 Ezsignfolder_ListElement::getIEzsignformfieldgroupCompleted() const {
    return m_i_ezsignformfieldgroup_completed;
}
void Ezsignfolder_ListElement::setIEzsignformfieldgroupCompleted(const qint32 &i_ezsignformfieldgroup_completed) {
    m_i_ezsignformfieldgroup_completed = i_ezsignformfieldgroup_completed;
    m_i_ezsignformfieldgroup_completed_isSet = true;
}

bool Ezsignfolder_ListElement::is_i_ezsignformfieldgroup_completed_Set() const{
    return m_i_ezsignformfieldgroup_completed_isSet;
}

bool Ezsignfolder_ListElement::is_i_ezsignformfieldgroup_completed_Valid() const{
    return m_i_ezsignformfieldgroup_completed_isValid;
}

bool Ezsignfolder_ListElement::isBEzsignformHasdependencies() const {
    return m_b_ezsignform_hasdependencies;
}
void Ezsignfolder_ListElement::setBEzsignformHasdependencies(const bool &b_ezsignform_hasdependencies) {
    m_b_ezsignform_hasdependencies = b_ezsignform_hasdependencies;
    m_b_ezsignform_hasdependencies_isSet = true;
}

bool Ezsignfolder_ListElement::is_b_ezsignform_hasdependencies_Set() const{
    return m_b_ezsignform_hasdependencies_isSet;
}

bool Ezsignfolder_ListElement::is_b_ezsignform_hasdependencies_Valid() const{
    return m_b_ezsignform_hasdependencies_isValid;
}

QString Ezsignfolder_ListElement::getDEzsignfolderCompletedpercentage() const {
    return m_d_ezsignfolder_completedpercentage;
}
void Ezsignfolder_ListElement::setDEzsignfolderCompletedpercentage(const QString &d_ezsignfolder_completedpercentage) {
    m_d_ezsignfolder_completedpercentage = d_ezsignfolder_completedpercentage;
    m_d_ezsignfolder_completedpercentage_isSet = true;
}

bool Ezsignfolder_ListElement::is_d_ezsignfolder_completedpercentage_Set() const{
    return m_d_ezsignfolder_completedpercentage_isSet;
}

bool Ezsignfolder_ListElement::is_d_ezsignfolder_completedpercentage_Valid() const{
    return m_d_ezsignfolder_completedpercentage_isValid;
}

bool Ezsignfolder_ListElement::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_pki_ezsignfolder_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fki_ezsignfoldertype_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_e_ezsignfoldertype_privacylevel.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_s_ezsignfoldertype_name_x_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s_ezsignfolder_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_e_ezsignfolder_step.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dt_created_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dt_ezsignfolder_delayedsenddate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dt_ezsignfolder_sentdate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dt_ezsignfolder_duedate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_i_ezsigndocument_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_i_ezsigndocument_edm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_i_ezsignsignature_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_i_ezsignsignature_signed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_i_ezsignformfieldgroup_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_i_ezsignformfieldgroup_completed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_b_ezsignform_hasdependencies_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_d_ezsignfolder_completedpercentage_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool Ezsignfolder_ListElement::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_pki_ezsignfolder_id_isValid && m_fki_ezsignfoldertype_id_isValid && m_e_ezsignfoldertype_privacylevel_isValid && m_s_ezsignfoldertype_name_x_isValid && m_s_ezsignfolder_description_isValid && m_e_ezsignfolder_step_isValid && m_dt_created_date_isValid && m_i_ezsigndocument_isValid && m_i_ezsigndocument_edm_isValid && m_i_ezsignsignature_isValid && m_i_ezsignsignature_signed_isValid && m_i_ezsignformfieldgroup_isValid && m_i_ezsignformfieldgroup_completed_isValid && m_d_ezsignfolder_completedpercentage_isValid && true;
}

} // namespace Ezmaxapi
