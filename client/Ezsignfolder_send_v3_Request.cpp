/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "Ezsignfolder_send_v3_Request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "Helpers.h"

namespace Ezmaxapi {

Ezsignfolder_send_v3_Request::Ezsignfolder_send_v3_Request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

Ezsignfolder_send_v3_Request::Ezsignfolder_send_v3_Request() {
    this->initializeModel();
}

Ezsignfolder_send_v3_Request::~Ezsignfolder_send_v3_Request() {}

void Ezsignfolder_send_v3_Request::initializeModel() {

    m_t_ezsignfolder_message_isSet = false;
    m_t_ezsignfolder_message_isValid = false;

    m_e_ezsignfolder_messageorder_isSet = false;
    m_e_ezsignfolder_messageorder_isValid = false;

    m_dt_ezsignfolder_delayedsenddate_isSet = false;
    m_dt_ezsignfolder_delayedsenddate_isValid = false;

    m_a_fki_ezsignfoldersignerassociation_id_isSet = false;
    m_a_fki_ezsignfoldersignerassociation_id_isValid = false;
}

void Ezsignfolder_send_v3_Request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void Ezsignfolder_send_v3_Request::fromJsonObject(QJsonObject json) {

    m_t_ezsignfolder_message_isValid = ::Ezmaxapi::fromJsonValue(m_t_ezsignfolder_message, json[QString("tEzsignfolderMessage")]);
    m_t_ezsignfolder_message_isSet = !json[QString("tEzsignfolderMessage")].isNull() && m_t_ezsignfolder_message_isValid;

    m_e_ezsignfolder_messageorder_isValid = ::Ezmaxapi::fromJsonValue(m_e_ezsignfolder_messageorder, json[QString("eEzsignfolderMessageorder")]);
    m_e_ezsignfolder_messageorder_isSet = !json[QString("eEzsignfolderMessageorder")].isNull() && m_e_ezsignfolder_messageorder_isValid;

    m_dt_ezsignfolder_delayedsenddate_isValid = ::Ezmaxapi::fromJsonValue(m_dt_ezsignfolder_delayedsenddate, json[QString("dtEzsignfolderDelayedsenddate")]);
    m_dt_ezsignfolder_delayedsenddate_isSet = !json[QString("dtEzsignfolderDelayedsenddate")].isNull() && m_dt_ezsignfolder_delayedsenddate_isValid;

    m_a_fki_ezsignfoldersignerassociation_id_isValid = ::Ezmaxapi::fromJsonValue(m_a_fki_ezsignfoldersignerassociation_id, json[QString("a_fkiEzsignfoldersignerassociationID")]);
    m_a_fki_ezsignfoldersignerassociation_id_isSet = !json[QString("a_fkiEzsignfoldersignerassociationID")].isNull() && m_a_fki_ezsignfoldersignerassociation_id_isValid;
}

QString Ezsignfolder_send_v3_Request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject Ezsignfolder_send_v3_Request::asJsonObject() const {
    QJsonObject obj;
    if (m_t_ezsignfolder_message_isSet) {
        obj.insert(QString("tEzsignfolderMessage"), ::Ezmaxapi::toJsonValue(m_t_ezsignfolder_message));
    }
    if (m_e_ezsignfolder_messageorder.isSet()) {
        obj.insert(QString("eEzsignfolderMessageorder"), ::Ezmaxapi::toJsonValue(m_e_ezsignfolder_messageorder));
    }
    if (m_dt_ezsignfolder_delayedsenddate_isSet) {
        obj.insert(QString("dtEzsignfolderDelayedsenddate"), ::Ezmaxapi::toJsonValue(m_dt_ezsignfolder_delayedsenddate));
    }
    if (m_a_fki_ezsignfoldersignerassociation_id.size() > 0) {
        obj.insert(QString("a_fkiEzsignfoldersignerassociationID"), ::Ezmaxapi::toJsonValue(m_a_fki_ezsignfoldersignerassociation_id));
    }
    return obj;
}

QString Ezsignfolder_send_v3_Request::getTEzsignfolderMessage() const {
    return m_t_ezsignfolder_message;
}
void Ezsignfolder_send_v3_Request::setTEzsignfolderMessage(const QString &t_ezsignfolder_message) {
    m_t_ezsignfolder_message = t_ezsignfolder_message;
    m_t_ezsignfolder_message_isSet = true;
}

bool Ezsignfolder_send_v3_Request::is_t_ezsignfolder_message_Set() const{
    return m_t_ezsignfolder_message_isSet;
}

bool Ezsignfolder_send_v3_Request::is_t_ezsignfolder_message_Valid() const{
    return m_t_ezsignfolder_message_isValid;
}

Field_eEzsignfolderMessageorder Ezsignfolder_send_v3_Request::getEEzsignfolderMessageorder() const {
    return m_e_ezsignfolder_messageorder;
}
void Ezsignfolder_send_v3_Request::setEEzsignfolderMessageorder(const Field_eEzsignfolderMessageorder &e_ezsignfolder_messageorder) {
    m_e_ezsignfolder_messageorder = e_ezsignfolder_messageorder;
    m_e_ezsignfolder_messageorder_isSet = true;
}

bool Ezsignfolder_send_v3_Request::is_e_ezsignfolder_messageorder_Set() const{
    return m_e_ezsignfolder_messageorder_isSet;
}

bool Ezsignfolder_send_v3_Request::is_e_ezsignfolder_messageorder_Valid() const{
    return m_e_ezsignfolder_messageorder_isValid;
}

QString Ezsignfolder_send_v3_Request::getDtEzsignfolderDelayedsenddate() const {
    return m_dt_ezsignfolder_delayedsenddate;
}
void Ezsignfolder_send_v3_Request::setDtEzsignfolderDelayedsenddate(const QString &dt_ezsignfolder_delayedsenddate) {
    m_dt_ezsignfolder_delayedsenddate = dt_ezsignfolder_delayedsenddate;
    m_dt_ezsignfolder_delayedsenddate_isSet = true;
}

bool Ezsignfolder_send_v3_Request::is_dt_ezsignfolder_delayedsenddate_Set() const{
    return m_dt_ezsignfolder_delayedsenddate_isSet;
}

bool Ezsignfolder_send_v3_Request::is_dt_ezsignfolder_delayedsenddate_Valid() const{
    return m_dt_ezsignfolder_delayedsenddate_isValid;
}

QList<qint32> Ezsignfolder_send_v3_Request::getAFkiEzsignfoldersignerassociationId() const {
    return m_a_fki_ezsignfoldersignerassociation_id;
}
void Ezsignfolder_send_v3_Request::setAFkiEzsignfoldersignerassociationId(const QList<qint32> &a_fki_ezsignfoldersignerassociation_id) {
    m_a_fki_ezsignfoldersignerassociation_id = a_fki_ezsignfoldersignerassociation_id;
    m_a_fki_ezsignfoldersignerassociation_id_isSet = true;
}

bool Ezsignfolder_send_v3_Request::is_a_fki_ezsignfoldersignerassociation_id_Set() const{
    return m_a_fki_ezsignfoldersignerassociation_id_isSet;
}

bool Ezsignfolder_send_v3_Request::is_a_fki_ezsignfoldersignerassociation_id_Valid() const{
    return m_a_fki_ezsignfoldersignerassociation_id_isValid;
}

bool Ezsignfolder_send_v3_Request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_t_ezsignfolder_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_e_ezsignfolder_messageorder.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dt_ezsignfolder_delayedsenddate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_a_fki_ezsignfoldersignerassociation_id.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool Ezsignfolder_send_v3_Request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_a_fki_ezsignfoldersignerassociation_id_isValid && true;
}

} // namespace Ezmaxapi
