/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "Address_Response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "Helpers.h"

namespace Ezmaxapi {

Address_Response::Address_Response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

Address_Response::Address_Response() {
    this->initializeModel();
}

Address_Response::~Address_Response() {}

void Address_Response::initializeModel() {

    m_pki_address_id_isSet = false;
    m_pki_address_id_isValid = false;

    m_fki_addresstype_id_isSet = false;
    m_fki_addresstype_id_isValid = false;

    m_s_address_civic_isSet = false;
    m_s_address_civic_isValid = false;

    m_s_address_street_isSet = false;
    m_s_address_street_isValid = false;

    m_s_address_suite_isSet = false;
    m_s_address_suite_isValid = false;

    m_s_address_city_isSet = false;
    m_s_address_city_isValid = false;

    m_fki_province_id_isSet = false;
    m_fki_province_id_isValid = false;

    m_s_province_name_x_isSet = false;
    m_s_province_name_x_isValid = false;

    m_fki_country_id_isSet = false;
    m_fki_country_id_isValid = false;

    m_s_country_name_x_isSet = false;
    m_s_country_name_x_isValid = false;

    m_s_address_zip_isSet = false;
    m_s_address_zip_isValid = false;

    m_f_address_longitude_isSet = false;
    m_f_address_longitude_isValid = false;

    m_f_address_latitude_isSet = false;
    m_f_address_latitude_isValid = false;
}

void Address_Response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void Address_Response::fromJsonObject(QJsonObject json) {

    m_pki_address_id_isValid = ::Ezmaxapi::fromJsonValue(m_pki_address_id, json[QString("pkiAddressID")]);
    m_pki_address_id_isSet = !json[QString("pkiAddressID")].isNull() && m_pki_address_id_isValid;

    m_fki_addresstype_id_isValid = ::Ezmaxapi::fromJsonValue(m_fki_addresstype_id, json[QString("fkiAddresstypeID")]);
    m_fki_addresstype_id_isSet = !json[QString("fkiAddresstypeID")].isNull() && m_fki_addresstype_id_isValid;

    m_s_address_civic_isValid = ::Ezmaxapi::fromJsonValue(m_s_address_civic, json[QString("sAddressCivic")]);
    m_s_address_civic_isSet = !json[QString("sAddressCivic")].isNull() && m_s_address_civic_isValid;

    m_s_address_street_isValid = ::Ezmaxapi::fromJsonValue(m_s_address_street, json[QString("sAddressStreet")]);
    m_s_address_street_isSet = !json[QString("sAddressStreet")].isNull() && m_s_address_street_isValid;

    m_s_address_suite_isValid = ::Ezmaxapi::fromJsonValue(m_s_address_suite, json[QString("sAddressSuite")]);
    m_s_address_suite_isSet = !json[QString("sAddressSuite")].isNull() && m_s_address_suite_isValid;

    m_s_address_city_isValid = ::Ezmaxapi::fromJsonValue(m_s_address_city, json[QString("sAddressCity")]);
    m_s_address_city_isSet = !json[QString("sAddressCity")].isNull() && m_s_address_city_isValid;

    m_fki_province_id_isValid = ::Ezmaxapi::fromJsonValue(m_fki_province_id, json[QString("fkiProvinceID")]);
    m_fki_province_id_isSet = !json[QString("fkiProvinceID")].isNull() && m_fki_province_id_isValid;

    m_s_province_name_x_isValid = ::Ezmaxapi::fromJsonValue(m_s_province_name_x, json[QString("sProvinceNameX")]);
    m_s_province_name_x_isSet = !json[QString("sProvinceNameX")].isNull() && m_s_province_name_x_isValid;

    m_fki_country_id_isValid = ::Ezmaxapi::fromJsonValue(m_fki_country_id, json[QString("fkiCountryID")]);
    m_fki_country_id_isSet = !json[QString("fkiCountryID")].isNull() && m_fki_country_id_isValid;

    m_s_country_name_x_isValid = ::Ezmaxapi::fromJsonValue(m_s_country_name_x, json[QString("sCountryNameX")]);
    m_s_country_name_x_isSet = !json[QString("sCountryNameX")].isNull() && m_s_country_name_x_isValid;

    m_s_address_zip_isValid = ::Ezmaxapi::fromJsonValue(m_s_address_zip, json[QString("sAddressZip")]);
    m_s_address_zip_isSet = !json[QString("sAddressZip")].isNull() && m_s_address_zip_isValid;

    m_f_address_longitude_isValid = ::Ezmaxapi::fromJsonValue(m_f_address_longitude, json[QString("fAddressLongitude")]);
    m_f_address_longitude_isSet = !json[QString("fAddressLongitude")].isNull() && m_f_address_longitude_isValid;

    m_f_address_latitude_isValid = ::Ezmaxapi::fromJsonValue(m_f_address_latitude, json[QString("fAddressLatitude")]);
    m_f_address_latitude_isSet = !json[QString("fAddressLatitude")].isNull() && m_f_address_latitude_isValid;
}

QString Address_Response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject Address_Response::asJsonObject() const {
    QJsonObject obj;
    if (m_pki_address_id_isSet) {
        obj.insert(QString("pkiAddressID"), ::Ezmaxapi::toJsonValue(m_pki_address_id));
    }
    if (m_fki_addresstype_id_isSet) {
        obj.insert(QString("fkiAddresstypeID"), ::Ezmaxapi::toJsonValue(m_fki_addresstype_id));
    }
    if (m_s_address_civic_isSet) {
        obj.insert(QString("sAddressCivic"), ::Ezmaxapi::toJsonValue(m_s_address_civic));
    }
    if (m_s_address_street_isSet) {
        obj.insert(QString("sAddressStreet"), ::Ezmaxapi::toJsonValue(m_s_address_street));
    }
    if (m_s_address_suite_isSet) {
        obj.insert(QString("sAddressSuite"), ::Ezmaxapi::toJsonValue(m_s_address_suite));
    }
    if (m_s_address_city_isSet) {
        obj.insert(QString("sAddressCity"), ::Ezmaxapi::toJsonValue(m_s_address_city));
    }
    if (m_fki_province_id_isSet) {
        obj.insert(QString("fkiProvinceID"), ::Ezmaxapi::toJsonValue(m_fki_province_id));
    }
    if (m_s_province_name_x_isSet) {
        obj.insert(QString("sProvinceNameX"), ::Ezmaxapi::toJsonValue(m_s_province_name_x));
    }
    if (m_fki_country_id_isSet) {
        obj.insert(QString("fkiCountryID"), ::Ezmaxapi::toJsonValue(m_fki_country_id));
    }
    if (m_s_country_name_x_isSet) {
        obj.insert(QString("sCountryNameX"), ::Ezmaxapi::toJsonValue(m_s_country_name_x));
    }
    if (m_s_address_zip_isSet) {
        obj.insert(QString("sAddressZip"), ::Ezmaxapi::toJsonValue(m_s_address_zip));
    }
    if (m_f_address_longitude_isSet) {
        obj.insert(QString("fAddressLongitude"), ::Ezmaxapi::toJsonValue(m_f_address_longitude));
    }
    if (m_f_address_latitude_isSet) {
        obj.insert(QString("fAddressLatitude"), ::Ezmaxapi::toJsonValue(m_f_address_latitude));
    }
    return obj;
}

qint32 Address_Response::getPkiAddressId() const {
    return m_pki_address_id;
}
void Address_Response::setPkiAddressId(const qint32 &pki_address_id) {
    m_pki_address_id = pki_address_id;
    m_pki_address_id_isSet = true;
}

bool Address_Response::is_pki_address_id_Set() const{
    return m_pki_address_id_isSet;
}

bool Address_Response::is_pki_address_id_Valid() const{
    return m_pki_address_id_isValid;
}

qint32 Address_Response::getFkiAddresstypeId() const {
    return m_fki_addresstype_id;
}
void Address_Response::setFkiAddresstypeId(const qint32 &fki_addresstype_id) {
    m_fki_addresstype_id = fki_addresstype_id;
    m_fki_addresstype_id_isSet = true;
}

bool Address_Response::is_fki_addresstype_id_Set() const{
    return m_fki_addresstype_id_isSet;
}

bool Address_Response::is_fki_addresstype_id_Valid() const{
    return m_fki_addresstype_id_isValid;
}

QString Address_Response::getSAddressCivic() const {
    return m_s_address_civic;
}
void Address_Response::setSAddressCivic(const QString &s_address_civic) {
    m_s_address_civic = s_address_civic;
    m_s_address_civic_isSet = true;
}

bool Address_Response::is_s_address_civic_Set() const{
    return m_s_address_civic_isSet;
}

bool Address_Response::is_s_address_civic_Valid() const{
    return m_s_address_civic_isValid;
}

QString Address_Response::getSAddressStreet() const {
    return m_s_address_street;
}
void Address_Response::setSAddressStreet(const QString &s_address_street) {
    m_s_address_street = s_address_street;
    m_s_address_street_isSet = true;
}

bool Address_Response::is_s_address_street_Set() const{
    return m_s_address_street_isSet;
}

bool Address_Response::is_s_address_street_Valid() const{
    return m_s_address_street_isValid;
}

QString Address_Response::getSAddressSuite() const {
    return m_s_address_suite;
}
void Address_Response::setSAddressSuite(const QString &s_address_suite) {
    m_s_address_suite = s_address_suite;
    m_s_address_suite_isSet = true;
}

bool Address_Response::is_s_address_suite_Set() const{
    return m_s_address_suite_isSet;
}

bool Address_Response::is_s_address_suite_Valid() const{
    return m_s_address_suite_isValid;
}

QString Address_Response::getSAddressCity() const {
    return m_s_address_city;
}
void Address_Response::setSAddressCity(const QString &s_address_city) {
    m_s_address_city = s_address_city;
    m_s_address_city_isSet = true;
}

bool Address_Response::is_s_address_city_Set() const{
    return m_s_address_city_isSet;
}

bool Address_Response::is_s_address_city_Valid() const{
    return m_s_address_city_isValid;
}

qint32 Address_Response::getFkiProvinceId() const {
    return m_fki_province_id;
}
void Address_Response::setFkiProvinceId(const qint32 &fki_province_id) {
    m_fki_province_id = fki_province_id;
    m_fki_province_id_isSet = true;
}

bool Address_Response::is_fki_province_id_Set() const{
    return m_fki_province_id_isSet;
}

bool Address_Response::is_fki_province_id_Valid() const{
    return m_fki_province_id_isValid;
}

QString Address_Response::getSProvinceNameX() const {
    return m_s_province_name_x;
}
void Address_Response::setSProvinceNameX(const QString &s_province_name_x) {
    m_s_province_name_x = s_province_name_x;
    m_s_province_name_x_isSet = true;
}

bool Address_Response::is_s_province_name_x_Set() const{
    return m_s_province_name_x_isSet;
}

bool Address_Response::is_s_province_name_x_Valid() const{
    return m_s_province_name_x_isValid;
}

qint32 Address_Response::getFkiCountryId() const {
    return m_fki_country_id;
}
void Address_Response::setFkiCountryId(const qint32 &fki_country_id) {
    m_fki_country_id = fki_country_id;
    m_fki_country_id_isSet = true;
}

bool Address_Response::is_fki_country_id_Set() const{
    return m_fki_country_id_isSet;
}

bool Address_Response::is_fki_country_id_Valid() const{
    return m_fki_country_id_isValid;
}

QString Address_Response::getSCountryNameX() const {
    return m_s_country_name_x;
}
void Address_Response::setSCountryNameX(const QString &s_country_name_x) {
    m_s_country_name_x = s_country_name_x;
    m_s_country_name_x_isSet = true;
}

bool Address_Response::is_s_country_name_x_Set() const{
    return m_s_country_name_x_isSet;
}

bool Address_Response::is_s_country_name_x_Valid() const{
    return m_s_country_name_x_isValid;
}

QString Address_Response::getSAddressZip() const {
    return m_s_address_zip;
}
void Address_Response::setSAddressZip(const QString &s_address_zip) {
    m_s_address_zip = s_address_zip;
    m_s_address_zip_isSet = true;
}

bool Address_Response::is_s_address_zip_Set() const{
    return m_s_address_zip_isSet;
}

bool Address_Response::is_s_address_zip_Valid() const{
    return m_s_address_zip_isValid;
}

QString Address_Response::getFAddressLongitude() const {
    return m_f_address_longitude;
}
void Address_Response::setFAddressLongitude(const QString &f_address_longitude) {
    m_f_address_longitude = f_address_longitude;
    m_f_address_longitude_isSet = true;
}

bool Address_Response::is_f_address_longitude_Set() const{
    return m_f_address_longitude_isSet;
}

bool Address_Response::is_f_address_longitude_Valid() const{
    return m_f_address_longitude_isValid;
}

QString Address_Response::getFAddressLatitude() const {
    return m_f_address_latitude;
}
void Address_Response::setFAddressLatitude(const QString &f_address_latitude) {
    m_f_address_latitude = f_address_latitude;
    m_f_address_latitude_isSet = true;
}

bool Address_Response::is_f_address_latitude_Set() const{
    return m_f_address_latitude_isSet;
}

bool Address_Response::is_f_address_latitude_Valid() const{
    return m_f_address_latitude_isValid;
}

bool Address_Response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_pki_address_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fki_addresstype_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s_address_civic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s_address_street_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s_address_suite_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s_address_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fki_province_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s_province_name_x_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fki_country_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s_country_name_x_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s_address_zip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_f_address_longitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_f_address_latitude_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool Address_Response::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_pki_address_id_isValid && m_fki_addresstype_id_isValid && m_s_address_civic_isValid && m_s_address_street_isValid && m_s_address_city_isValid && m_fki_province_id_isValid && m_s_province_name_x_isValid && m_fki_country_id_isValid && m_s_country_name_x_isValid && m_s_address_zip_isValid && true;
}

} // namespace Ezmaxapi
