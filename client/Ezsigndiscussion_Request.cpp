/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "Ezsigndiscussion_Request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "Helpers.h"

namespace Ezmaxapi {

Ezsigndiscussion_Request::Ezsigndiscussion_Request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

Ezsigndiscussion_Request::Ezsigndiscussion_Request() {
    this->initializeModel();
}

Ezsigndiscussion_Request::~Ezsigndiscussion_Request() {}

void Ezsigndiscussion_Request::initializeModel() {

    m_pki_ezsigndiscussion_id_isSet = false;
    m_pki_ezsigndiscussion_id_isValid = false;

    m_fki_ezsigndocument_id_isSet = false;
    m_fki_ezsigndocument_id_isValid = false;

    m_i_ezsigndiscussion_pagenumber_isSet = false;
    m_i_ezsigndiscussion_pagenumber_isValid = false;

    m_i_ezsigndiscussion_x_isSet = false;
    m_i_ezsigndiscussion_x_isValid = false;

    m_i_ezsigndiscussion_y_isSet = false;
    m_i_ezsigndiscussion_y_isValid = false;

    m_obj_discussion_isSet = false;
    m_obj_discussion_isValid = false;
}

void Ezsigndiscussion_Request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void Ezsigndiscussion_Request::fromJsonObject(QJsonObject json) {

    m_pki_ezsigndiscussion_id_isValid = ::Ezmaxapi::fromJsonValue(m_pki_ezsigndiscussion_id, json[QString("pkiEzsigndiscussionID")]);
    m_pki_ezsigndiscussion_id_isSet = !json[QString("pkiEzsigndiscussionID")].isNull() && m_pki_ezsigndiscussion_id_isValid;

    m_fki_ezsigndocument_id_isValid = ::Ezmaxapi::fromJsonValue(m_fki_ezsigndocument_id, json[QString("fkiEzsigndocumentID")]);
    m_fki_ezsigndocument_id_isSet = !json[QString("fkiEzsigndocumentID")].isNull() && m_fki_ezsigndocument_id_isValid;

    m_i_ezsigndiscussion_pagenumber_isValid = ::Ezmaxapi::fromJsonValue(m_i_ezsigndiscussion_pagenumber, json[QString("iEzsigndiscussionPagenumber")]);
    m_i_ezsigndiscussion_pagenumber_isSet = !json[QString("iEzsigndiscussionPagenumber")].isNull() && m_i_ezsigndiscussion_pagenumber_isValid;

    m_i_ezsigndiscussion_x_isValid = ::Ezmaxapi::fromJsonValue(m_i_ezsigndiscussion_x, json[QString("iEzsigndiscussionX")]);
    m_i_ezsigndiscussion_x_isSet = !json[QString("iEzsigndiscussionX")].isNull() && m_i_ezsigndiscussion_x_isValid;

    m_i_ezsigndiscussion_y_isValid = ::Ezmaxapi::fromJsonValue(m_i_ezsigndiscussion_y, json[QString("iEzsigndiscussionY")]);
    m_i_ezsigndiscussion_y_isSet = !json[QString("iEzsigndiscussionY")].isNull() && m_i_ezsigndiscussion_y_isValid;

    m_obj_discussion_isValid = ::Ezmaxapi::fromJsonValue(m_obj_discussion, json[QString("objDiscussion")]);
    m_obj_discussion_isSet = !json[QString("objDiscussion")].isNull() && m_obj_discussion_isValid;
}

QString Ezsigndiscussion_Request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject Ezsigndiscussion_Request::asJsonObject() const {
    QJsonObject obj;
    if (m_pki_ezsigndiscussion_id_isSet) {
        obj.insert(QString("pkiEzsigndiscussionID"), ::Ezmaxapi::toJsonValue(m_pki_ezsigndiscussion_id));
    }
    if (m_fki_ezsigndocument_id_isSet) {
        obj.insert(QString("fkiEzsigndocumentID"), ::Ezmaxapi::toJsonValue(m_fki_ezsigndocument_id));
    }
    if (m_i_ezsigndiscussion_pagenumber_isSet) {
        obj.insert(QString("iEzsigndiscussionPagenumber"), ::Ezmaxapi::toJsonValue(m_i_ezsigndiscussion_pagenumber));
    }
    if (m_i_ezsigndiscussion_x_isSet) {
        obj.insert(QString("iEzsigndiscussionX"), ::Ezmaxapi::toJsonValue(m_i_ezsigndiscussion_x));
    }
    if (m_i_ezsigndiscussion_y_isSet) {
        obj.insert(QString("iEzsigndiscussionY"), ::Ezmaxapi::toJsonValue(m_i_ezsigndiscussion_y));
    }
    if (m_obj_discussion.isSet()) {
        obj.insert(QString("objDiscussion"), ::Ezmaxapi::toJsonValue(m_obj_discussion));
    }
    return obj;
}

qint32 Ezsigndiscussion_Request::getPkiEzsigndiscussionId() const {
    return m_pki_ezsigndiscussion_id;
}
void Ezsigndiscussion_Request::setPkiEzsigndiscussionId(const qint32 &pki_ezsigndiscussion_id) {
    m_pki_ezsigndiscussion_id = pki_ezsigndiscussion_id;
    m_pki_ezsigndiscussion_id_isSet = true;
}

bool Ezsigndiscussion_Request::is_pki_ezsigndiscussion_id_Set() const{
    return m_pki_ezsigndiscussion_id_isSet;
}

bool Ezsigndiscussion_Request::is_pki_ezsigndiscussion_id_Valid() const{
    return m_pki_ezsigndiscussion_id_isValid;
}

qint32 Ezsigndiscussion_Request::getFkiEzsigndocumentId() const {
    return m_fki_ezsigndocument_id;
}
void Ezsigndiscussion_Request::setFkiEzsigndocumentId(const qint32 &fki_ezsigndocument_id) {
    m_fki_ezsigndocument_id = fki_ezsigndocument_id;
    m_fki_ezsigndocument_id_isSet = true;
}

bool Ezsigndiscussion_Request::is_fki_ezsigndocument_id_Set() const{
    return m_fki_ezsigndocument_id_isSet;
}

bool Ezsigndiscussion_Request::is_fki_ezsigndocument_id_Valid() const{
    return m_fki_ezsigndocument_id_isValid;
}

qint32 Ezsigndiscussion_Request::getIEzsigndiscussionPagenumber() const {
    return m_i_ezsigndiscussion_pagenumber;
}
void Ezsigndiscussion_Request::setIEzsigndiscussionPagenumber(const qint32 &i_ezsigndiscussion_pagenumber) {
    m_i_ezsigndiscussion_pagenumber = i_ezsigndiscussion_pagenumber;
    m_i_ezsigndiscussion_pagenumber_isSet = true;
}

bool Ezsigndiscussion_Request::is_i_ezsigndiscussion_pagenumber_Set() const{
    return m_i_ezsigndiscussion_pagenumber_isSet;
}

bool Ezsigndiscussion_Request::is_i_ezsigndiscussion_pagenumber_Valid() const{
    return m_i_ezsigndiscussion_pagenumber_isValid;
}

qint32 Ezsigndiscussion_Request::getIEzsigndiscussionX() const {
    return m_i_ezsigndiscussion_x;
}
void Ezsigndiscussion_Request::setIEzsigndiscussionX(const qint32 &i_ezsigndiscussion_x) {
    m_i_ezsigndiscussion_x = i_ezsigndiscussion_x;
    m_i_ezsigndiscussion_x_isSet = true;
}

bool Ezsigndiscussion_Request::is_i_ezsigndiscussion_x_Set() const{
    return m_i_ezsigndiscussion_x_isSet;
}

bool Ezsigndiscussion_Request::is_i_ezsigndiscussion_x_Valid() const{
    return m_i_ezsigndiscussion_x_isValid;
}

qint32 Ezsigndiscussion_Request::getIEzsigndiscussionY() const {
    return m_i_ezsigndiscussion_y;
}
void Ezsigndiscussion_Request::setIEzsigndiscussionY(const qint32 &i_ezsigndiscussion_y) {
    m_i_ezsigndiscussion_y = i_ezsigndiscussion_y;
    m_i_ezsigndiscussion_y_isSet = true;
}

bool Ezsigndiscussion_Request::is_i_ezsigndiscussion_y_Set() const{
    return m_i_ezsigndiscussion_y_isSet;
}

bool Ezsigndiscussion_Request::is_i_ezsigndiscussion_y_Valid() const{
    return m_i_ezsigndiscussion_y_isValid;
}

Discussion_Request Ezsigndiscussion_Request::getObjDiscussion() const {
    return m_obj_discussion;
}
void Ezsigndiscussion_Request::setObjDiscussion(const Discussion_Request &obj_discussion) {
    m_obj_discussion = obj_discussion;
    m_obj_discussion_isSet = true;
}

bool Ezsigndiscussion_Request::is_obj_discussion_Set() const{
    return m_obj_discussion_isSet;
}

bool Ezsigndiscussion_Request::is_obj_discussion_Valid() const{
    return m_obj_discussion_isValid;
}

bool Ezsigndiscussion_Request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_pki_ezsigndiscussion_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fki_ezsigndocument_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_i_ezsigndiscussion_pagenumber_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_i_ezsigndiscussion_x_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_i_ezsigndiscussion_y_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_obj_discussion.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool Ezsigndiscussion_Request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_fki_ezsigndocument_id_isValid && m_i_ezsigndiscussion_pagenumber_isValid && m_i_ezsigndiscussion_x_isValid && m_i_ezsigndiscussion_y_isValid && m_obj_discussion_isValid && true;
}

} // namespace Ezmaxapi
