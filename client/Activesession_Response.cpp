/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "Activesession_Response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "Helpers.h"

namespace Ezmaxapi {

Activesession_Response::Activesession_Response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

Activesession_Response::Activesession_Response() {
    this->initializeModel();
}

Activesession_Response::~Activesession_Response() {}

void Activesession_Response::initializeModel() {

    m_e_activesession_usertype_isSet = false;
    m_e_activesession_usertype_isValid = false;

    m_e_activesession_origin_isSet = false;
    m_e_activesession_origin_isValid = false;

    m_e_activesession_weekdaystart_isSet = false;
    m_e_activesession_weekdaystart_isValid = false;

    m_fki_language_id_isSet = false;
    m_fki_language_id_isValid = false;

    m_s_company_name_x_isSet = false;
    m_s_company_name_x_isValid = false;

    m_s_department_name_x_isSet = false;
    m_s_department_name_x_isValid = false;

    m_b_activesession_debug_isSet = false;
    m_b_activesession_debug_isValid = false;

    m_b_activesession_issuperadmin_isSet = false;
    m_b_activesession_issuperadmin_isValid = false;

    m_b_activesession_attachment_isSet = false;
    m_b_activesession_attachment_isValid = false;

    m_b_activesession_canafe_isSet = false;
    m_b_activesession_canafe_isValid = false;

    m_b_activesession_financial_isSet = false;
    m_b_activesession_financial_isValid = false;

    m_b_activesession_realestatecompleted_isSet = false;
    m_b_activesession_realestatecompleted_isValid = false;

    m_e_activesession_ezsign_isSet = false;
    m_e_activesession_ezsign_isValid = false;

    m_e_activesession_ezsignaccess_isSet = false;
    m_e_activesession_ezsignaccess_isValid = false;

    m_e_activesession_ezsignprepaid_isSet = false;
    m_e_activesession_ezsignprepaid_isValid = false;

    m_e_activesession_realestateinprogress_isSet = false;
    m_e_activesession_realestateinprogress_isValid = false;

    m_pks_customer_code_isSet = false;
    m_pks_customer_code_isValid = false;

    m_fki_systemconfigurationtype_id_isSet = false;
    m_fki_systemconfigurationtype_id_isValid = false;

    m_fki_signature_id_isSet = false;
    m_fki_signature_id_isValid = false;
}

void Activesession_Response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void Activesession_Response::fromJsonObject(QJsonObject json) {

    m_e_activesession_usertype_isValid = ::Ezmaxapi::fromJsonValue(m_e_activesession_usertype, json[QString("eActivesessionUsertype")]);
    m_e_activesession_usertype_isSet = !json[QString("eActivesessionUsertype")].isNull() && m_e_activesession_usertype_isValid;

    m_e_activesession_origin_isValid = ::Ezmaxapi::fromJsonValue(m_e_activesession_origin, json[QString("eActivesessionOrigin")]);
    m_e_activesession_origin_isSet = !json[QString("eActivesessionOrigin")].isNull() && m_e_activesession_origin_isValid;

    m_e_activesession_weekdaystart_isValid = ::Ezmaxapi::fromJsonValue(m_e_activesession_weekdaystart, json[QString("eActivesessionWeekdaystart")]);
    m_e_activesession_weekdaystart_isSet = !json[QString("eActivesessionWeekdaystart")].isNull() && m_e_activesession_weekdaystart_isValid;

    m_fki_language_id_isValid = ::Ezmaxapi::fromJsonValue(m_fki_language_id, json[QString("fkiLanguageID")]);
    m_fki_language_id_isSet = !json[QString("fkiLanguageID")].isNull() && m_fki_language_id_isValid;

    m_s_company_name_x_isValid = ::Ezmaxapi::fromJsonValue(m_s_company_name_x, json[QString("sCompanyNameX")]);
    m_s_company_name_x_isSet = !json[QString("sCompanyNameX")].isNull() && m_s_company_name_x_isValid;

    m_s_department_name_x_isValid = ::Ezmaxapi::fromJsonValue(m_s_department_name_x, json[QString("sDepartmentNameX")]);
    m_s_department_name_x_isSet = !json[QString("sDepartmentNameX")].isNull() && m_s_department_name_x_isValid;

    m_b_activesession_debug_isValid = ::Ezmaxapi::fromJsonValue(m_b_activesession_debug, json[QString("bActivesessionDebug")]);
    m_b_activesession_debug_isSet = !json[QString("bActivesessionDebug")].isNull() && m_b_activesession_debug_isValid;

    m_b_activesession_issuperadmin_isValid = ::Ezmaxapi::fromJsonValue(m_b_activesession_issuperadmin, json[QString("bActivesessionIssuperadmin")]);
    m_b_activesession_issuperadmin_isSet = !json[QString("bActivesessionIssuperadmin")].isNull() && m_b_activesession_issuperadmin_isValid;

    m_b_activesession_attachment_isValid = ::Ezmaxapi::fromJsonValue(m_b_activesession_attachment, json[QString("bActivesessionAttachment")]);
    m_b_activesession_attachment_isSet = !json[QString("bActivesessionAttachment")].isNull() && m_b_activesession_attachment_isValid;

    m_b_activesession_canafe_isValid = ::Ezmaxapi::fromJsonValue(m_b_activesession_canafe, json[QString("bActivesessionCanafe")]);
    m_b_activesession_canafe_isSet = !json[QString("bActivesessionCanafe")].isNull() && m_b_activesession_canafe_isValid;

    m_b_activesession_financial_isValid = ::Ezmaxapi::fromJsonValue(m_b_activesession_financial, json[QString("bActivesessionFinancial")]);
    m_b_activesession_financial_isSet = !json[QString("bActivesessionFinancial")].isNull() && m_b_activesession_financial_isValid;

    m_b_activesession_realestatecompleted_isValid = ::Ezmaxapi::fromJsonValue(m_b_activesession_realestatecompleted, json[QString("bActivesessionRealestatecompleted")]);
    m_b_activesession_realestatecompleted_isSet = !json[QString("bActivesessionRealestatecompleted")].isNull() && m_b_activesession_realestatecompleted_isValid;

    m_e_activesession_ezsign_isValid = ::Ezmaxapi::fromJsonValue(m_e_activesession_ezsign, json[QString("eActivesessionEzsign")]);
    m_e_activesession_ezsign_isSet = !json[QString("eActivesessionEzsign")].isNull() && m_e_activesession_ezsign_isValid;

    m_e_activesession_ezsignaccess_isValid = ::Ezmaxapi::fromJsonValue(m_e_activesession_ezsignaccess, json[QString("eActivesessionEzsignaccess")]);
    m_e_activesession_ezsignaccess_isSet = !json[QString("eActivesessionEzsignaccess")].isNull() && m_e_activesession_ezsignaccess_isValid;

    m_e_activesession_ezsignprepaid_isValid = ::Ezmaxapi::fromJsonValue(m_e_activesession_ezsignprepaid, json[QString("eActivesessionEzsignprepaid")]);
    m_e_activesession_ezsignprepaid_isSet = !json[QString("eActivesessionEzsignprepaid")].isNull() && m_e_activesession_ezsignprepaid_isValid;

    m_e_activesession_realestateinprogress_isValid = ::Ezmaxapi::fromJsonValue(m_e_activesession_realestateinprogress, json[QString("eActivesessionRealestateinprogress")]);
    m_e_activesession_realestateinprogress_isSet = !json[QString("eActivesessionRealestateinprogress")].isNull() && m_e_activesession_realestateinprogress_isValid;

    m_pks_customer_code_isValid = ::Ezmaxapi::fromJsonValue(m_pks_customer_code, json[QString("pksCustomerCode")]);
    m_pks_customer_code_isSet = !json[QString("pksCustomerCode")].isNull() && m_pks_customer_code_isValid;

    m_fki_systemconfigurationtype_id_isValid = ::Ezmaxapi::fromJsonValue(m_fki_systemconfigurationtype_id, json[QString("fkiSystemconfigurationtypeID")]);
    m_fki_systemconfigurationtype_id_isSet = !json[QString("fkiSystemconfigurationtypeID")].isNull() && m_fki_systemconfigurationtype_id_isValid;

    m_fki_signature_id_isValid = ::Ezmaxapi::fromJsonValue(m_fki_signature_id, json[QString("fkiSignatureID")]);
    m_fki_signature_id_isSet = !json[QString("fkiSignatureID")].isNull() && m_fki_signature_id_isValid;
}

QString Activesession_Response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject Activesession_Response::asJsonObject() const {
    QJsonObject obj;
    if (m_e_activesession_usertype.isSet()) {
        obj.insert(QString("eActivesessionUsertype"), ::Ezmaxapi::toJsonValue(m_e_activesession_usertype));
    }
    if (m_e_activesession_origin.isSet()) {
        obj.insert(QString("eActivesessionOrigin"), ::Ezmaxapi::toJsonValue(m_e_activesession_origin));
    }
    if (m_e_activesession_weekdaystart.isSet()) {
        obj.insert(QString("eActivesessionWeekdaystart"), ::Ezmaxapi::toJsonValue(m_e_activesession_weekdaystart));
    }
    if (m_fki_language_id_isSet) {
        obj.insert(QString("fkiLanguageID"), ::Ezmaxapi::toJsonValue(m_fki_language_id));
    }
    if (m_s_company_name_x_isSet) {
        obj.insert(QString("sCompanyNameX"), ::Ezmaxapi::toJsonValue(m_s_company_name_x));
    }
    if (m_s_department_name_x_isSet) {
        obj.insert(QString("sDepartmentNameX"), ::Ezmaxapi::toJsonValue(m_s_department_name_x));
    }
    if (m_b_activesession_debug_isSet) {
        obj.insert(QString("bActivesessionDebug"), ::Ezmaxapi::toJsonValue(m_b_activesession_debug));
    }
    if (m_b_activesession_issuperadmin_isSet) {
        obj.insert(QString("bActivesessionIssuperadmin"), ::Ezmaxapi::toJsonValue(m_b_activesession_issuperadmin));
    }
    if (m_b_activesession_attachment_isSet) {
        obj.insert(QString("bActivesessionAttachment"), ::Ezmaxapi::toJsonValue(m_b_activesession_attachment));
    }
    if (m_b_activesession_canafe_isSet) {
        obj.insert(QString("bActivesessionCanafe"), ::Ezmaxapi::toJsonValue(m_b_activesession_canafe));
    }
    if (m_b_activesession_financial_isSet) {
        obj.insert(QString("bActivesessionFinancial"), ::Ezmaxapi::toJsonValue(m_b_activesession_financial));
    }
    if (m_b_activesession_realestatecompleted_isSet) {
        obj.insert(QString("bActivesessionRealestatecompleted"), ::Ezmaxapi::toJsonValue(m_b_activesession_realestatecompleted));
    }
    if (m_e_activesession_ezsign.isSet()) {
        obj.insert(QString("eActivesessionEzsign"), ::Ezmaxapi::toJsonValue(m_e_activesession_ezsign));
    }
    if (m_e_activesession_ezsignaccess.isSet()) {
        obj.insert(QString("eActivesessionEzsignaccess"), ::Ezmaxapi::toJsonValue(m_e_activesession_ezsignaccess));
    }
    if (m_e_activesession_ezsignprepaid.isSet()) {
        obj.insert(QString("eActivesessionEzsignprepaid"), ::Ezmaxapi::toJsonValue(m_e_activesession_ezsignprepaid));
    }
    if (m_e_activesession_realestateinprogress.isSet()) {
        obj.insert(QString("eActivesessionRealestateinprogress"), ::Ezmaxapi::toJsonValue(m_e_activesession_realestateinprogress));
    }
    if (m_pks_customer_code_isSet) {
        obj.insert(QString("pksCustomerCode"), ::Ezmaxapi::toJsonValue(m_pks_customer_code));
    }
    if (m_fki_systemconfigurationtype_id_isSet) {
        obj.insert(QString("fkiSystemconfigurationtypeID"), ::Ezmaxapi::toJsonValue(m_fki_systemconfigurationtype_id));
    }
    if (m_fki_signature_id_isSet) {
        obj.insert(QString("fkiSignatureID"), ::Ezmaxapi::toJsonValue(m_fki_signature_id));
    }
    return obj;
}

Field_eActivesessionUsertype Activesession_Response::getEActivesessionUsertype() const {
    return m_e_activesession_usertype;
}
void Activesession_Response::setEActivesessionUsertype(const Field_eActivesessionUsertype &e_activesession_usertype) {
    m_e_activesession_usertype = e_activesession_usertype;
    m_e_activesession_usertype_isSet = true;
}

bool Activesession_Response::is_e_activesession_usertype_Set() const{
    return m_e_activesession_usertype_isSet;
}

bool Activesession_Response::is_e_activesession_usertype_Valid() const{
    return m_e_activesession_usertype_isValid;
}

Field_eActivesessionOrigin Activesession_Response::getEActivesessionOrigin() const {
    return m_e_activesession_origin;
}
void Activesession_Response::setEActivesessionOrigin(const Field_eActivesessionOrigin &e_activesession_origin) {
    m_e_activesession_origin = e_activesession_origin;
    m_e_activesession_origin_isSet = true;
}

bool Activesession_Response::is_e_activesession_origin_Set() const{
    return m_e_activesession_origin_isSet;
}

bool Activesession_Response::is_e_activesession_origin_Valid() const{
    return m_e_activesession_origin_isValid;
}

Field_eActivesessionWeekdaystart Activesession_Response::getEActivesessionWeekdaystart() const {
    return m_e_activesession_weekdaystart;
}
void Activesession_Response::setEActivesessionWeekdaystart(const Field_eActivesessionWeekdaystart &e_activesession_weekdaystart) {
    m_e_activesession_weekdaystart = e_activesession_weekdaystart;
    m_e_activesession_weekdaystart_isSet = true;
}

bool Activesession_Response::is_e_activesession_weekdaystart_Set() const{
    return m_e_activesession_weekdaystart_isSet;
}

bool Activesession_Response::is_e_activesession_weekdaystart_Valid() const{
    return m_e_activesession_weekdaystart_isValid;
}

qint32 Activesession_Response::getFkiLanguageId() const {
    return m_fki_language_id;
}
void Activesession_Response::setFkiLanguageId(const qint32 &fki_language_id) {
    m_fki_language_id = fki_language_id;
    m_fki_language_id_isSet = true;
}

bool Activesession_Response::is_fki_language_id_Set() const{
    return m_fki_language_id_isSet;
}

bool Activesession_Response::is_fki_language_id_Valid() const{
    return m_fki_language_id_isValid;
}

QString Activesession_Response::getSCompanyNameX() const {
    return m_s_company_name_x;
}
void Activesession_Response::setSCompanyNameX(const QString &s_company_name_x) {
    m_s_company_name_x = s_company_name_x;
    m_s_company_name_x_isSet = true;
}

bool Activesession_Response::is_s_company_name_x_Set() const{
    return m_s_company_name_x_isSet;
}

bool Activesession_Response::is_s_company_name_x_Valid() const{
    return m_s_company_name_x_isValid;
}

QString Activesession_Response::getSDepartmentNameX() const {
    return m_s_department_name_x;
}
void Activesession_Response::setSDepartmentNameX(const QString &s_department_name_x) {
    m_s_department_name_x = s_department_name_x;
    m_s_department_name_x_isSet = true;
}

bool Activesession_Response::is_s_department_name_x_Set() const{
    return m_s_department_name_x_isSet;
}

bool Activesession_Response::is_s_department_name_x_Valid() const{
    return m_s_department_name_x_isValid;
}

bool Activesession_Response::isBActivesessionDebug() const {
    return m_b_activesession_debug;
}
void Activesession_Response::setBActivesessionDebug(const bool &b_activesession_debug) {
    m_b_activesession_debug = b_activesession_debug;
    m_b_activesession_debug_isSet = true;
}

bool Activesession_Response::is_b_activesession_debug_Set() const{
    return m_b_activesession_debug_isSet;
}

bool Activesession_Response::is_b_activesession_debug_Valid() const{
    return m_b_activesession_debug_isValid;
}

bool Activesession_Response::isBActivesessionIssuperadmin() const {
    return m_b_activesession_issuperadmin;
}
void Activesession_Response::setBActivesessionIssuperadmin(const bool &b_activesession_issuperadmin) {
    m_b_activesession_issuperadmin = b_activesession_issuperadmin;
    m_b_activesession_issuperadmin_isSet = true;
}

bool Activesession_Response::is_b_activesession_issuperadmin_Set() const{
    return m_b_activesession_issuperadmin_isSet;
}

bool Activesession_Response::is_b_activesession_issuperadmin_Valid() const{
    return m_b_activesession_issuperadmin_isValid;
}

bool Activesession_Response::isBActivesessionAttachment() const {
    return m_b_activesession_attachment;
}
void Activesession_Response::setBActivesessionAttachment(const bool &b_activesession_attachment) {
    m_b_activesession_attachment = b_activesession_attachment;
    m_b_activesession_attachment_isSet = true;
}

bool Activesession_Response::is_b_activesession_attachment_Set() const{
    return m_b_activesession_attachment_isSet;
}

bool Activesession_Response::is_b_activesession_attachment_Valid() const{
    return m_b_activesession_attachment_isValid;
}

bool Activesession_Response::isBActivesessionCanafe() const {
    return m_b_activesession_canafe;
}
void Activesession_Response::setBActivesessionCanafe(const bool &b_activesession_canafe) {
    m_b_activesession_canafe = b_activesession_canafe;
    m_b_activesession_canafe_isSet = true;
}

bool Activesession_Response::is_b_activesession_canafe_Set() const{
    return m_b_activesession_canafe_isSet;
}

bool Activesession_Response::is_b_activesession_canafe_Valid() const{
    return m_b_activesession_canafe_isValid;
}

bool Activesession_Response::isBActivesessionFinancial() const {
    return m_b_activesession_financial;
}
void Activesession_Response::setBActivesessionFinancial(const bool &b_activesession_financial) {
    m_b_activesession_financial = b_activesession_financial;
    m_b_activesession_financial_isSet = true;
}

bool Activesession_Response::is_b_activesession_financial_Set() const{
    return m_b_activesession_financial_isSet;
}

bool Activesession_Response::is_b_activesession_financial_Valid() const{
    return m_b_activesession_financial_isValid;
}

bool Activesession_Response::isBActivesessionRealestatecompleted() const {
    return m_b_activesession_realestatecompleted;
}
void Activesession_Response::setBActivesessionRealestatecompleted(const bool &b_activesession_realestatecompleted) {
    m_b_activesession_realestatecompleted = b_activesession_realestatecompleted;
    m_b_activesession_realestatecompleted_isSet = true;
}

bool Activesession_Response::is_b_activesession_realestatecompleted_Set() const{
    return m_b_activesession_realestatecompleted_isSet;
}

bool Activesession_Response::is_b_activesession_realestatecompleted_Valid() const{
    return m_b_activesession_realestatecompleted_isValid;
}

Field_eActivesessionEzsign Activesession_Response::getEActivesessionEzsign() const {
    return m_e_activesession_ezsign;
}
void Activesession_Response::setEActivesessionEzsign(const Field_eActivesessionEzsign &e_activesession_ezsign) {
    m_e_activesession_ezsign = e_activesession_ezsign;
    m_e_activesession_ezsign_isSet = true;
}

bool Activesession_Response::is_e_activesession_ezsign_Set() const{
    return m_e_activesession_ezsign_isSet;
}

bool Activesession_Response::is_e_activesession_ezsign_Valid() const{
    return m_e_activesession_ezsign_isValid;
}

Field_eActivesessionEzsignaccess Activesession_Response::getEActivesessionEzsignaccess() const {
    return m_e_activesession_ezsignaccess;
}
void Activesession_Response::setEActivesessionEzsignaccess(const Field_eActivesessionEzsignaccess &e_activesession_ezsignaccess) {
    m_e_activesession_ezsignaccess = e_activesession_ezsignaccess;
    m_e_activesession_ezsignaccess_isSet = true;
}

bool Activesession_Response::is_e_activesession_ezsignaccess_Set() const{
    return m_e_activesession_ezsignaccess_isSet;
}

bool Activesession_Response::is_e_activesession_ezsignaccess_Valid() const{
    return m_e_activesession_ezsignaccess_isValid;
}

Field_eActivesessionEzsignprepaid Activesession_Response::getEActivesessionEzsignprepaid() const {
    return m_e_activesession_ezsignprepaid;
}
void Activesession_Response::setEActivesessionEzsignprepaid(const Field_eActivesessionEzsignprepaid &e_activesession_ezsignprepaid) {
    m_e_activesession_ezsignprepaid = e_activesession_ezsignprepaid;
    m_e_activesession_ezsignprepaid_isSet = true;
}

bool Activesession_Response::is_e_activesession_ezsignprepaid_Set() const{
    return m_e_activesession_ezsignprepaid_isSet;
}

bool Activesession_Response::is_e_activesession_ezsignprepaid_Valid() const{
    return m_e_activesession_ezsignprepaid_isValid;
}

Field_eActivesessionRealestateinprogress Activesession_Response::getEActivesessionRealestateinprogress() const {
    return m_e_activesession_realestateinprogress;
}
void Activesession_Response::setEActivesessionRealestateinprogress(const Field_eActivesessionRealestateinprogress &e_activesession_realestateinprogress) {
    m_e_activesession_realestateinprogress = e_activesession_realestateinprogress;
    m_e_activesession_realestateinprogress_isSet = true;
}

bool Activesession_Response::is_e_activesession_realestateinprogress_Set() const{
    return m_e_activesession_realestateinprogress_isSet;
}

bool Activesession_Response::is_e_activesession_realestateinprogress_Valid() const{
    return m_e_activesession_realestateinprogress_isValid;
}

QString Activesession_Response::getPksCustomerCode() const {
    return m_pks_customer_code;
}
void Activesession_Response::setPksCustomerCode(const QString &pks_customer_code) {
    m_pks_customer_code = pks_customer_code;
    m_pks_customer_code_isSet = true;
}

bool Activesession_Response::is_pks_customer_code_Set() const{
    return m_pks_customer_code_isSet;
}

bool Activesession_Response::is_pks_customer_code_Valid() const{
    return m_pks_customer_code_isValid;
}

qint32 Activesession_Response::getFkiSystemconfigurationtypeId() const {
    return m_fki_systemconfigurationtype_id;
}
void Activesession_Response::setFkiSystemconfigurationtypeId(const qint32 &fki_systemconfigurationtype_id) {
    m_fki_systemconfigurationtype_id = fki_systemconfigurationtype_id;
    m_fki_systemconfigurationtype_id_isSet = true;
}

bool Activesession_Response::is_fki_systemconfigurationtype_id_Set() const{
    return m_fki_systemconfigurationtype_id_isSet;
}

bool Activesession_Response::is_fki_systemconfigurationtype_id_Valid() const{
    return m_fki_systemconfigurationtype_id_isValid;
}

qint32 Activesession_Response::getFkiSignatureId() const {
    return m_fki_signature_id;
}
void Activesession_Response::setFkiSignatureId(const qint32 &fki_signature_id) {
    m_fki_signature_id = fki_signature_id;
    m_fki_signature_id_isSet = true;
}

bool Activesession_Response::is_fki_signature_id_Set() const{
    return m_fki_signature_id_isSet;
}

bool Activesession_Response::is_fki_signature_id_Valid() const{
    return m_fki_signature_id_isValid;
}

bool Activesession_Response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_e_activesession_usertype.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_e_activesession_origin.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_e_activesession_weekdaystart.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fki_language_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s_company_name_x_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s_department_name_x_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_b_activesession_debug_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_b_activesession_issuperadmin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_b_activesession_attachment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_b_activesession_canafe_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_b_activesession_financial_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_b_activesession_realestatecompleted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_e_activesession_ezsign.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_e_activesession_ezsignaccess.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_e_activesession_ezsignprepaid.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_e_activesession_realestateinprogress.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pks_customer_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fki_systemconfigurationtype_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fki_signature_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool Activesession_Response::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_e_activesession_usertype_isValid && m_e_activesession_origin_isValid && m_e_activesession_weekdaystart_isValid && m_fki_language_id_isValid && m_s_company_name_x_isValid && m_s_department_name_x_isValid && m_b_activesession_debug_isValid && m_b_activesession_issuperadmin_isValid && m_e_activesession_ezsignaccess_isValid && m_pks_customer_code_isValid && m_fki_systemconfigurationtype_id_isValid && true;
}

} // namespace Ezmaxapi
