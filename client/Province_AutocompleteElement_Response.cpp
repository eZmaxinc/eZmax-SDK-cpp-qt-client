/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "Province_AutocompleteElement_Response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "Helpers.h"

namespace Ezmaxapi {

Province_AutocompleteElement_Response::Province_AutocompleteElement_Response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

Province_AutocompleteElement_Response::Province_AutocompleteElement_Response() {
    this->initializeModel();
}

Province_AutocompleteElement_Response::~Province_AutocompleteElement_Response() {}

void Province_AutocompleteElement_Response::initializeModel() {

    m_pki_province_id_isSet = false;
    m_pki_province_id_isValid = false;

    m_fki_country_id_isSet = false;
    m_fki_country_id_isValid = false;

    m_s_province_name_x_isSet = false;
    m_s_province_name_x_isValid = false;

    m_s_province_shortname_isSet = false;
    m_s_province_shortname_isValid = false;

    m_b_province_isactive_isSet = false;
    m_b_province_isactive_isValid = false;
}

void Province_AutocompleteElement_Response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void Province_AutocompleteElement_Response::fromJsonObject(QJsonObject json) {

    m_pki_province_id_isValid = ::Ezmaxapi::fromJsonValue(m_pki_province_id, json[QString("pkiProvinceID")]);
    m_pki_province_id_isSet = !json[QString("pkiProvinceID")].isNull() && m_pki_province_id_isValid;

    m_fki_country_id_isValid = ::Ezmaxapi::fromJsonValue(m_fki_country_id, json[QString("fkiCountryID")]);
    m_fki_country_id_isSet = !json[QString("fkiCountryID")].isNull() && m_fki_country_id_isValid;

    m_s_province_name_x_isValid = ::Ezmaxapi::fromJsonValue(m_s_province_name_x, json[QString("sProvinceNameX")]);
    m_s_province_name_x_isSet = !json[QString("sProvinceNameX")].isNull() && m_s_province_name_x_isValid;

    m_s_province_shortname_isValid = ::Ezmaxapi::fromJsonValue(m_s_province_shortname, json[QString("sProvinceShortname")]);
    m_s_province_shortname_isSet = !json[QString("sProvinceShortname")].isNull() && m_s_province_shortname_isValid;

    m_b_province_isactive_isValid = ::Ezmaxapi::fromJsonValue(m_b_province_isactive, json[QString("bProvinceIsactive")]);
    m_b_province_isactive_isSet = !json[QString("bProvinceIsactive")].isNull() && m_b_province_isactive_isValid;
}

QString Province_AutocompleteElement_Response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject Province_AutocompleteElement_Response::asJsonObject() const {
    QJsonObject obj;
    if (m_pki_province_id_isSet) {
        obj.insert(QString("pkiProvinceID"), ::Ezmaxapi::toJsonValue(m_pki_province_id));
    }
    if (m_fki_country_id_isSet) {
        obj.insert(QString("fkiCountryID"), ::Ezmaxapi::toJsonValue(m_fki_country_id));
    }
    if (m_s_province_name_x_isSet) {
        obj.insert(QString("sProvinceNameX"), ::Ezmaxapi::toJsonValue(m_s_province_name_x));
    }
    if (m_s_province_shortname_isSet) {
        obj.insert(QString("sProvinceShortname"), ::Ezmaxapi::toJsonValue(m_s_province_shortname));
    }
    if (m_b_province_isactive_isSet) {
        obj.insert(QString("bProvinceIsactive"), ::Ezmaxapi::toJsonValue(m_b_province_isactive));
    }
    return obj;
}

qint32 Province_AutocompleteElement_Response::getPkiProvinceId() const {
    return m_pki_province_id;
}
void Province_AutocompleteElement_Response::setPkiProvinceId(const qint32 &pki_province_id) {
    m_pki_province_id = pki_province_id;
    m_pki_province_id_isSet = true;
}

bool Province_AutocompleteElement_Response::is_pki_province_id_Set() const{
    return m_pki_province_id_isSet;
}

bool Province_AutocompleteElement_Response::is_pki_province_id_Valid() const{
    return m_pki_province_id_isValid;
}

qint32 Province_AutocompleteElement_Response::getFkiCountryId() const {
    return m_fki_country_id;
}
void Province_AutocompleteElement_Response::setFkiCountryId(const qint32 &fki_country_id) {
    m_fki_country_id = fki_country_id;
    m_fki_country_id_isSet = true;
}

bool Province_AutocompleteElement_Response::is_fki_country_id_Set() const{
    return m_fki_country_id_isSet;
}

bool Province_AutocompleteElement_Response::is_fki_country_id_Valid() const{
    return m_fki_country_id_isValid;
}

QString Province_AutocompleteElement_Response::getSProvinceNameX() const {
    return m_s_province_name_x;
}
void Province_AutocompleteElement_Response::setSProvinceNameX(const QString &s_province_name_x) {
    m_s_province_name_x = s_province_name_x;
    m_s_province_name_x_isSet = true;
}

bool Province_AutocompleteElement_Response::is_s_province_name_x_Set() const{
    return m_s_province_name_x_isSet;
}

bool Province_AutocompleteElement_Response::is_s_province_name_x_Valid() const{
    return m_s_province_name_x_isValid;
}

QString Province_AutocompleteElement_Response::getSProvinceShortname() const {
    return m_s_province_shortname;
}
void Province_AutocompleteElement_Response::setSProvinceShortname(const QString &s_province_shortname) {
    m_s_province_shortname = s_province_shortname;
    m_s_province_shortname_isSet = true;
}

bool Province_AutocompleteElement_Response::is_s_province_shortname_Set() const{
    return m_s_province_shortname_isSet;
}

bool Province_AutocompleteElement_Response::is_s_province_shortname_Valid() const{
    return m_s_province_shortname_isValid;
}

bool Province_AutocompleteElement_Response::isBProvinceIsactive() const {
    return m_b_province_isactive;
}
void Province_AutocompleteElement_Response::setBProvinceIsactive(const bool &b_province_isactive) {
    m_b_province_isactive = b_province_isactive;
    m_b_province_isactive_isSet = true;
}

bool Province_AutocompleteElement_Response::is_b_province_isactive_Set() const{
    return m_b_province_isactive_isSet;
}

bool Province_AutocompleteElement_Response::is_b_province_isactive_Valid() const{
    return m_b_province_isactive_isValid;
}

bool Province_AutocompleteElement_Response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_pki_province_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fki_country_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s_province_name_x_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s_province_shortname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_b_province_isactive_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool Province_AutocompleteElement_Response::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_pki_province_id_isValid && m_fki_country_id_isValid && m_s_province_name_x_isValid && m_s_province_shortname_isValid && m_b_province_isactive_isValid && true;
}

} // namespace Ezmaxapi
