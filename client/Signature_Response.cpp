/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "Signature_Response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "Helpers.h"

namespace Ezmaxapi {

Signature_Response::Signature_Response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

Signature_Response::Signature_Response() {
    this->initializeModel();
}

Signature_Response::~Signature_Response() {}

void Signature_Response::initializeModel() {

    m_pki_signature_id_isSet = false;
    m_pki_signature_id_isValid = false;

    m_fki_font_id_isSet = false;
    m_fki_font_id_isValid = false;

    m_s_signature_url_isSet = false;
    m_s_signature_url_isValid = false;

    m_s_signature_urlinitials_isSet = false;
    m_s_signature_urlinitials_isValid = false;
}

void Signature_Response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void Signature_Response::fromJsonObject(QJsonObject json) {

    m_pki_signature_id_isValid = ::Ezmaxapi::fromJsonValue(m_pki_signature_id, json[QString("pkiSignatureID")]);
    m_pki_signature_id_isSet = !json[QString("pkiSignatureID")].isNull() && m_pki_signature_id_isValid;

    m_fki_font_id_isValid = ::Ezmaxapi::fromJsonValue(m_fki_font_id, json[QString("fkiFontID")]);
    m_fki_font_id_isSet = !json[QString("fkiFontID")].isNull() && m_fki_font_id_isValid;

    m_s_signature_url_isValid = ::Ezmaxapi::fromJsonValue(m_s_signature_url, json[QString("sSignatureUrl")]);
    m_s_signature_url_isSet = !json[QString("sSignatureUrl")].isNull() && m_s_signature_url_isValid;

    m_s_signature_urlinitials_isValid = ::Ezmaxapi::fromJsonValue(m_s_signature_urlinitials, json[QString("sSignatureUrlinitials")]);
    m_s_signature_urlinitials_isSet = !json[QString("sSignatureUrlinitials")].isNull() && m_s_signature_urlinitials_isValid;
}

QString Signature_Response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject Signature_Response::asJsonObject() const {
    QJsonObject obj;
    if (m_pki_signature_id_isSet) {
        obj.insert(QString("pkiSignatureID"), ::Ezmaxapi::toJsonValue(m_pki_signature_id));
    }
    if (m_fki_font_id_isSet) {
        obj.insert(QString("fkiFontID"), ::Ezmaxapi::toJsonValue(m_fki_font_id));
    }
    if (m_s_signature_url_isSet) {
        obj.insert(QString("sSignatureUrl"), ::Ezmaxapi::toJsonValue(m_s_signature_url));
    }
    if (m_s_signature_urlinitials_isSet) {
        obj.insert(QString("sSignatureUrlinitials"), ::Ezmaxapi::toJsonValue(m_s_signature_urlinitials));
    }
    return obj;
}

qint32 Signature_Response::getPkiSignatureId() const {
    return m_pki_signature_id;
}
void Signature_Response::setPkiSignatureId(const qint32 &pki_signature_id) {
    m_pki_signature_id = pki_signature_id;
    m_pki_signature_id_isSet = true;
}

bool Signature_Response::is_pki_signature_id_Set() const{
    return m_pki_signature_id_isSet;
}

bool Signature_Response::is_pki_signature_id_Valid() const{
    return m_pki_signature_id_isValid;
}

qint32 Signature_Response::getFkiFontId() const {
    return m_fki_font_id;
}
void Signature_Response::setFkiFontId(const qint32 &fki_font_id) {
    m_fki_font_id = fki_font_id;
    m_fki_font_id_isSet = true;
}

bool Signature_Response::is_fki_font_id_Set() const{
    return m_fki_font_id_isSet;
}

bool Signature_Response::is_fki_font_id_Valid() const{
    return m_fki_font_id_isValid;
}

QString Signature_Response::getSSignatureUrl() const {
    return m_s_signature_url;
}
void Signature_Response::setSSignatureUrl(const QString &s_signature_url) {
    m_s_signature_url = s_signature_url;
    m_s_signature_url_isSet = true;
}

bool Signature_Response::is_s_signature_url_Set() const{
    return m_s_signature_url_isSet;
}

bool Signature_Response::is_s_signature_url_Valid() const{
    return m_s_signature_url_isValid;
}

QString Signature_Response::getSSignatureUrlinitials() const {
    return m_s_signature_urlinitials;
}
void Signature_Response::setSSignatureUrlinitials(const QString &s_signature_urlinitials) {
    m_s_signature_urlinitials = s_signature_urlinitials;
    m_s_signature_urlinitials_isSet = true;
}

bool Signature_Response::is_s_signature_urlinitials_Set() const{
    return m_s_signature_urlinitials_isSet;
}

bool Signature_Response::is_s_signature_urlinitials_Valid() const{
    return m_s_signature_urlinitials_isValid;
}

bool Signature_Response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_pki_signature_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fki_font_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s_signature_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s_signature_urlinitials_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool Signature_Response::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_pki_signature_id_isValid && true;
}

} // namespace Ezmaxapi
