/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "Communication_ResponseCompound.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "Helpers.h"

namespace Ezmaxapi {

Communication_ResponseCompound::Communication_ResponseCompound(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

Communication_ResponseCompound::Communication_ResponseCompound() {
    this->initializeModel();
}

Communication_ResponseCompound::~Communication_ResponseCompound() {}

void Communication_ResponseCompound::initializeModel() {

    m_pki_communication_id_isSet = false;
    m_pki_communication_id_isValid = false;

    m_e_communication_importance_isSet = false;
    m_e_communication_importance_isValid = false;

    m_e_communication_type_isSet = false;
    m_e_communication_type_isValid = false;

    m_s_communication_subject_isSet = false;
    m_s_communication_subject_isValid = false;

    m_s_communication_bodyurl_isSet = false;
    m_s_communication_bodyurl_isValid = false;

    m_e_communication_direction_isSet = false;
    m_e_communication_direction_isValid = false;

    m_i_communicationrecipient_count_isSet = false;
    m_i_communicationrecipient_count_isValid = false;

    m_b_communication_private_isSet = false;
    m_b_communication_private_isValid = false;

    m_obj_descriptionstatic_sender_isSet = false;
    m_obj_descriptionstatic_sender_isValid = false;

    m_obj_emailstatic_sender_isSet = false;
    m_obj_emailstatic_sender_isValid = false;

    m_obj_phonestatic_sender_isSet = false;
    m_obj_phonestatic_sender_isValid = false;

    m_obj_audit_isSet = false;
    m_obj_audit_isValid = false;

    m_a_obj_communicationattachment_isSet = false;
    m_a_obj_communicationattachment_isValid = false;

    m_a_obj_communicationrecipient_isSet = false;
    m_a_obj_communicationrecipient_isValid = false;

    m_a_obj_communicationexternalrecipient_isSet = false;
    m_a_obj_communicationexternalrecipient_isValid = false;
}

void Communication_ResponseCompound::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void Communication_ResponseCompound::fromJsonObject(QJsonObject json) {

    m_pki_communication_id_isValid = ::Ezmaxapi::fromJsonValue(m_pki_communication_id, json[QString("pkiCommunicationID")]);
    m_pki_communication_id_isSet = !json[QString("pkiCommunicationID")].isNull() && m_pki_communication_id_isValid;

    m_e_communication_importance_isValid = ::Ezmaxapi::fromJsonValue(m_e_communication_importance, json[QString("eCommunicationImportance")]);
    m_e_communication_importance_isSet = !json[QString("eCommunicationImportance")].isNull() && m_e_communication_importance_isValid;

    m_e_communication_type_isValid = ::Ezmaxapi::fromJsonValue(m_e_communication_type, json[QString("eCommunicationType")]);
    m_e_communication_type_isSet = !json[QString("eCommunicationType")].isNull() && m_e_communication_type_isValid;

    m_s_communication_subject_isValid = ::Ezmaxapi::fromJsonValue(m_s_communication_subject, json[QString("sCommunicationSubject")]);
    m_s_communication_subject_isSet = !json[QString("sCommunicationSubject")].isNull() && m_s_communication_subject_isValid;

    m_s_communication_bodyurl_isValid = ::Ezmaxapi::fromJsonValue(m_s_communication_bodyurl, json[QString("sCommunicationBodyurl")]);
    m_s_communication_bodyurl_isSet = !json[QString("sCommunicationBodyurl")].isNull() && m_s_communication_bodyurl_isValid;

    m_e_communication_direction_isValid = ::Ezmaxapi::fromJsonValue(m_e_communication_direction, json[QString("eCommunicationDirection")]);
    m_e_communication_direction_isSet = !json[QString("eCommunicationDirection")].isNull() && m_e_communication_direction_isValid;

    m_i_communicationrecipient_count_isValid = ::Ezmaxapi::fromJsonValue(m_i_communicationrecipient_count, json[QString("iCommunicationrecipientCount")]);
    m_i_communicationrecipient_count_isSet = !json[QString("iCommunicationrecipientCount")].isNull() && m_i_communicationrecipient_count_isValid;

    m_b_communication_private_isValid = ::Ezmaxapi::fromJsonValue(m_b_communication_private, json[QString("bCommunicationPrivate")]);
    m_b_communication_private_isSet = !json[QString("bCommunicationPrivate")].isNull() && m_b_communication_private_isValid;

    m_obj_descriptionstatic_sender_isValid = ::Ezmaxapi::fromJsonValue(m_obj_descriptionstatic_sender, json[QString("objDescriptionstaticSender")]);
    m_obj_descriptionstatic_sender_isSet = !json[QString("objDescriptionstaticSender")].isNull() && m_obj_descriptionstatic_sender_isValid;

    m_obj_emailstatic_sender_isValid = ::Ezmaxapi::fromJsonValue(m_obj_emailstatic_sender, json[QString("objEmailstaticSender")]);
    m_obj_emailstatic_sender_isSet = !json[QString("objEmailstaticSender")].isNull() && m_obj_emailstatic_sender_isValid;

    m_obj_phonestatic_sender_isValid = ::Ezmaxapi::fromJsonValue(m_obj_phonestatic_sender, json[QString("objPhonestaticSender")]);
    m_obj_phonestatic_sender_isSet = !json[QString("objPhonestaticSender")].isNull() && m_obj_phonestatic_sender_isValid;

    m_obj_audit_isValid = ::Ezmaxapi::fromJsonValue(m_obj_audit, json[QString("objAudit")]);
    m_obj_audit_isSet = !json[QString("objAudit")].isNull() && m_obj_audit_isValid;

    m_a_obj_communicationattachment_isValid = ::Ezmaxapi::fromJsonValue(m_a_obj_communicationattachment, json[QString("a_objCommunicationattachment")]);
    m_a_obj_communicationattachment_isSet = !json[QString("a_objCommunicationattachment")].isNull() && m_a_obj_communicationattachment_isValid;

    m_a_obj_communicationrecipient_isValid = ::Ezmaxapi::fromJsonValue(m_a_obj_communicationrecipient, json[QString("a_objCommunicationrecipient")]);
    m_a_obj_communicationrecipient_isSet = !json[QString("a_objCommunicationrecipient")].isNull() && m_a_obj_communicationrecipient_isValid;

    m_a_obj_communicationexternalrecipient_isValid = ::Ezmaxapi::fromJsonValue(m_a_obj_communicationexternalrecipient, json[QString("a_objCommunicationexternalrecipient")]);
    m_a_obj_communicationexternalrecipient_isSet = !json[QString("a_objCommunicationexternalrecipient")].isNull() && m_a_obj_communicationexternalrecipient_isValid;
}

QString Communication_ResponseCompound::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject Communication_ResponseCompound::asJsonObject() const {
    QJsonObject obj;
    if (m_pki_communication_id_isSet) {
        obj.insert(QString("pkiCommunicationID"), ::Ezmaxapi::toJsonValue(m_pki_communication_id));
    }
    if (m_e_communication_importance.isSet()) {
        obj.insert(QString("eCommunicationImportance"), ::Ezmaxapi::toJsonValue(m_e_communication_importance));
    }
    if (m_e_communication_type.isSet()) {
        obj.insert(QString("eCommunicationType"), ::Ezmaxapi::toJsonValue(m_e_communication_type));
    }
    if (m_s_communication_subject_isSet) {
        obj.insert(QString("sCommunicationSubject"), ::Ezmaxapi::toJsonValue(m_s_communication_subject));
    }
    if (m_s_communication_bodyurl_isSet) {
        obj.insert(QString("sCommunicationBodyurl"), ::Ezmaxapi::toJsonValue(m_s_communication_bodyurl));
    }
    if (m_e_communication_direction.isSet()) {
        obj.insert(QString("eCommunicationDirection"), ::Ezmaxapi::toJsonValue(m_e_communication_direction));
    }
    if (m_i_communicationrecipient_count_isSet) {
        obj.insert(QString("iCommunicationrecipientCount"), ::Ezmaxapi::toJsonValue(m_i_communicationrecipient_count));
    }
    if (m_b_communication_private_isSet) {
        obj.insert(QString("bCommunicationPrivate"), ::Ezmaxapi::toJsonValue(m_b_communication_private));
    }
    if (m_obj_descriptionstatic_sender.isSet()) {
        obj.insert(QString("objDescriptionstaticSender"), ::Ezmaxapi::toJsonValue(m_obj_descriptionstatic_sender));
    }
    if (m_obj_emailstatic_sender.isSet()) {
        obj.insert(QString("objEmailstaticSender"), ::Ezmaxapi::toJsonValue(m_obj_emailstatic_sender));
    }
    if (m_obj_phonestatic_sender.isSet()) {
        obj.insert(QString("objPhonestaticSender"), ::Ezmaxapi::toJsonValue(m_obj_phonestatic_sender));
    }
    if (m_obj_audit.isSet()) {
        obj.insert(QString("objAudit"), ::Ezmaxapi::toJsonValue(m_obj_audit));
    }
    if (m_a_obj_communicationattachment.size() > 0) {
        obj.insert(QString("a_objCommunicationattachment"), ::Ezmaxapi::toJsonValue(m_a_obj_communicationattachment));
    }
    if (m_a_obj_communicationrecipient.size() > 0) {
        obj.insert(QString("a_objCommunicationrecipient"), ::Ezmaxapi::toJsonValue(m_a_obj_communicationrecipient));
    }
    if (m_a_obj_communicationexternalrecipient.size() > 0) {
        obj.insert(QString("a_objCommunicationexternalrecipient"), ::Ezmaxapi::toJsonValue(m_a_obj_communicationexternalrecipient));
    }
    return obj;
}

qint32 Communication_ResponseCompound::getPkiCommunicationId() const {
    return m_pki_communication_id;
}
void Communication_ResponseCompound::setPkiCommunicationId(const qint32 &pki_communication_id) {
    m_pki_communication_id = pki_communication_id;
    m_pki_communication_id_isSet = true;
}

bool Communication_ResponseCompound::is_pki_communication_id_Set() const{
    return m_pki_communication_id_isSet;
}

bool Communication_ResponseCompound::is_pki_communication_id_Valid() const{
    return m_pki_communication_id_isValid;
}

Field_eCommunicationImportance Communication_ResponseCompound::getECommunicationImportance() const {
    return m_e_communication_importance;
}
void Communication_ResponseCompound::setECommunicationImportance(const Field_eCommunicationImportance &e_communication_importance) {
    m_e_communication_importance = e_communication_importance;
    m_e_communication_importance_isSet = true;
}

bool Communication_ResponseCompound::is_e_communication_importance_Set() const{
    return m_e_communication_importance_isSet;
}

bool Communication_ResponseCompound::is_e_communication_importance_Valid() const{
    return m_e_communication_importance_isValid;
}

Field_eCommunicationType Communication_ResponseCompound::getECommunicationType() const {
    return m_e_communication_type;
}
void Communication_ResponseCompound::setECommunicationType(const Field_eCommunicationType &e_communication_type) {
    m_e_communication_type = e_communication_type;
    m_e_communication_type_isSet = true;
}

bool Communication_ResponseCompound::is_e_communication_type_Set() const{
    return m_e_communication_type_isSet;
}

bool Communication_ResponseCompound::is_e_communication_type_Valid() const{
    return m_e_communication_type_isValid;
}

QString Communication_ResponseCompound::getSCommunicationSubject() const {
    return m_s_communication_subject;
}
void Communication_ResponseCompound::setSCommunicationSubject(const QString &s_communication_subject) {
    m_s_communication_subject = s_communication_subject;
    m_s_communication_subject_isSet = true;
}

bool Communication_ResponseCompound::is_s_communication_subject_Set() const{
    return m_s_communication_subject_isSet;
}

bool Communication_ResponseCompound::is_s_communication_subject_Valid() const{
    return m_s_communication_subject_isValid;
}

QString Communication_ResponseCompound::getSCommunicationBodyurl() const {
    return m_s_communication_bodyurl;
}
void Communication_ResponseCompound::setSCommunicationBodyurl(const QString &s_communication_bodyurl) {
    m_s_communication_bodyurl = s_communication_bodyurl;
    m_s_communication_bodyurl_isSet = true;
}

bool Communication_ResponseCompound::is_s_communication_bodyurl_Set() const{
    return m_s_communication_bodyurl_isSet;
}

bool Communication_ResponseCompound::is_s_communication_bodyurl_Valid() const{
    return m_s_communication_bodyurl_isValid;
}

Computed_eCommunicationDirection Communication_ResponseCompound::getECommunicationDirection() const {
    return m_e_communication_direction;
}
void Communication_ResponseCompound::setECommunicationDirection(const Computed_eCommunicationDirection &e_communication_direction) {
    m_e_communication_direction = e_communication_direction;
    m_e_communication_direction_isSet = true;
}

bool Communication_ResponseCompound::is_e_communication_direction_Set() const{
    return m_e_communication_direction_isSet;
}

bool Communication_ResponseCompound::is_e_communication_direction_Valid() const{
    return m_e_communication_direction_isValid;
}

qint32 Communication_ResponseCompound::getICommunicationrecipientCount() const {
    return m_i_communicationrecipient_count;
}
void Communication_ResponseCompound::setICommunicationrecipientCount(const qint32 &i_communicationrecipient_count) {
    m_i_communicationrecipient_count = i_communicationrecipient_count;
    m_i_communicationrecipient_count_isSet = true;
}

bool Communication_ResponseCompound::is_i_communicationrecipient_count_Set() const{
    return m_i_communicationrecipient_count_isSet;
}

bool Communication_ResponseCompound::is_i_communicationrecipient_count_Valid() const{
    return m_i_communicationrecipient_count_isValid;
}

bool Communication_ResponseCompound::isBCommunicationPrivate() const {
    return m_b_communication_private;
}
void Communication_ResponseCompound::setBCommunicationPrivate(const bool &b_communication_private) {
    m_b_communication_private = b_communication_private;
    m_b_communication_private_isSet = true;
}

bool Communication_ResponseCompound::is_b_communication_private_Set() const{
    return m_b_communication_private_isSet;
}

bool Communication_ResponseCompound::is_b_communication_private_Valid() const{
    return m_b_communication_private_isValid;
}

Descriptionstatic_Response Communication_ResponseCompound::getObjDescriptionstaticSender() const {
    return m_obj_descriptionstatic_sender;
}
void Communication_ResponseCompound::setObjDescriptionstaticSender(const Descriptionstatic_Response &obj_descriptionstatic_sender) {
    m_obj_descriptionstatic_sender = obj_descriptionstatic_sender;
    m_obj_descriptionstatic_sender_isSet = true;
}

bool Communication_ResponseCompound::is_obj_descriptionstatic_sender_Set() const{
    return m_obj_descriptionstatic_sender_isSet;
}

bool Communication_ResponseCompound::is_obj_descriptionstatic_sender_Valid() const{
    return m_obj_descriptionstatic_sender_isValid;
}

Emailstatic_Response Communication_ResponseCompound::getObjEmailstaticSender() const {
    return m_obj_emailstatic_sender;
}
void Communication_ResponseCompound::setObjEmailstaticSender(const Emailstatic_Response &obj_emailstatic_sender) {
    m_obj_emailstatic_sender = obj_emailstatic_sender;
    m_obj_emailstatic_sender_isSet = true;
}

bool Communication_ResponseCompound::is_obj_emailstatic_sender_Set() const{
    return m_obj_emailstatic_sender_isSet;
}

bool Communication_ResponseCompound::is_obj_emailstatic_sender_Valid() const{
    return m_obj_emailstatic_sender_isValid;
}

Phonestatic_Response Communication_ResponseCompound::getObjPhonestaticSender() const {
    return m_obj_phonestatic_sender;
}
void Communication_ResponseCompound::setObjPhonestaticSender(const Phonestatic_Response &obj_phonestatic_sender) {
    m_obj_phonestatic_sender = obj_phonestatic_sender;
    m_obj_phonestatic_sender_isSet = true;
}

bool Communication_ResponseCompound::is_obj_phonestatic_sender_Set() const{
    return m_obj_phonestatic_sender_isSet;
}

bool Communication_ResponseCompound::is_obj_phonestatic_sender_Valid() const{
    return m_obj_phonestatic_sender_isValid;
}

Common_Audit Communication_ResponseCompound::getObjAudit() const {
    return m_obj_audit;
}
void Communication_ResponseCompound::setObjAudit(const Common_Audit &obj_audit) {
    m_obj_audit = obj_audit;
    m_obj_audit_isSet = true;
}

bool Communication_ResponseCompound::is_obj_audit_Set() const{
    return m_obj_audit_isSet;
}

bool Communication_ResponseCompound::is_obj_audit_Valid() const{
    return m_obj_audit_isValid;
}

QList<Communicationattachment_ResponseCompound> Communication_ResponseCompound::getAObjCommunicationattachment() const {
    return m_a_obj_communicationattachment;
}
void Communication_ResponseCompound::setAObjCommunicationattachment(const QList<Communicationattachment_ResponseCompound> &a_obj_communicationattachment) {
    m_a_obj_communicationattachment = a_obj_communicationattachment;
    m_a_obj_communicationattachment_isSet = true;
}

bool Communication_ResponseCompound::is_a_obj_communicationattachment_Set() const{
    return m_a_obj_communicationattachment_isSet;
}

bool Communication_ResponseCompound::is_a_obj_communicationattachment_Valid() const{
    return m_a_obj_communicationattachment_isValid;
}

QList<Communicationrecipient_ResponseCompound> Communication_ResponseCompound::getAObjCommunicationrecipient() const {
    return m_a_obj_communicationrecipient;
}
void Communication_ResponseCompound::setAObjCommunicationrecipient(const QList<Communicationrecipient_ResponseCompound> &a_obj_communicationrecipient) {
    m_a_obj_communicationrecipient = a_obj_communicationrecipient;
    m_a_obj_communicationrecipient_isSet = true;
}

bool Communication_ResponseCompound::is_a_obj_communicationrecipient_Set() const{
    return m_a_obj_communicationrecipient_isSet;
}

bool Communication_ResponseCompound::is_a_obj_communicationrecipient_Valid() const{
    return m_a_obj_communicationrecipient_isValid;
}

QList<Communicationexternalrecipient_ResponseCompound> Communication_ResponseCompound::getAObjCommunicationexternalrecipient() const {
    return m_a_obj_communicationexternalrecipient;
}
void Communication_ResponseCompound::setAObjCommunicationexternalrecipient(const QList<Communicationexternalrecipient_ResponseCompound> &a_obj_communicationexternalrecipient) {
    m_a_obj_communicationexternalrecipient = a_obj_communicationexternalrecipient;
    m_a_obj_communicationexternalrecipient_isSet = true;
}

bool Communication_ResponseCompound::is_a_obj_communicationexternalrecipient_Set() const{
    return m_a_obj_communicationexternalrecipient_isSet;
}

bool Communication_ResponseCompound::is_a_obj_communicationexternalrecipient_Valid() const{
    return m_a_obj_communicationexternalrecipient_isValid;
}

bool Communication_ResponseCompound::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_pki_communication_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_e_communication_importance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_e_communication_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_s_communication_subject_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s_communication_bodyurl_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_e_communication_direction.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_i_communicationrecipient_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_b_communication_private_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_obj_descriptionstatic_sender.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_obj_emailstatic_sender.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_obj_phonestatic_sender.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_obj_audit.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_a_obj_communicationattachment.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_a_obj_communicationrecipient.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_a_obj_communicationexternalrecipient.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool Communication_ResponseCompound::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_pki_communication_id_isValid && m_e_communication_importance_isValid && m_e_communication_type_isValid && m_s_communication_subject_isValid && m_e_communication_direction_isValid && m_i_communicationrecipient_count_isValid && m_b_communication_private_isValid && m_obj_audit_isValid && m_a_obj_communicationattachment_isValid && m_a_obj_communicationrecipient_isValid && m_a_obj_communicationexternalrecipient_isValid && true;
}

} // namespace Ezmaxapi
