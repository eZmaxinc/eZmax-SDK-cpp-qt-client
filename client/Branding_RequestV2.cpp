/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "Branding_RequestV2.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "Helpers.h"

namespace Ezmaxapi {

Branding_RequestV2::Branding_RequestV2(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

Branding_RequestV2::Branding_RequestV2() {
    this->initializeModel();
}

Branding_RequestV2::~Branding_RequestV2() {}

void Branding_RequestV2::initializeModel() {

    m_pki_branding_id_isSet = false;
    m_pki_branding_id_isValid = false;

    m_obj_branding_description_isSet = false;
    m_obj_branding_description_isValid = false;

    m_e_branding_logo_isSet = false;
    m_e_branding_logo_isValid = false;

    m_e_branding_alignlogo_isSet = false;
    m_e_branding_alignlogo_isValid = false;

    m_s_branding_base64_isSet = false;
    m_s_branding_base64_isValid = false;

    m_i_branding_color_isSet = false;
    m_i_branding_color_isValid = false;

    m_s_branding_name_isSet = false;
    m_s_branding_name_isValid = false;

    m_s_email_address_isSet = false;
    m_s_email_address_isValid = false;

    m_b_branding_isactive_isSet = false;
    m_b_branding_isactive_isValid = false;
}

void Branding_RequestV2::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void Branding_RequestV2::fromJsonObject(QJsonObject json) {

    m_pki_branding_id_isValid = ::Ezmaxapi::fromJsonValue(m_pki_branding_id, json[QString("pkiBrandingID")]);
    m_pki_branding_id_isSet = !json[QString("pkiBrandingID")].isNull() && m_pki_branding_id_isValid;

    m_obj_branding_description_isValid = ::Ezmaxapi::fromJsonValue(m_obj_branding_description, json[QString("objBrandingDescription")]);
    m_obj_branding_description_isSet = !json[QString("objBrandingDescription")].isNull() && m_obj_branding_description_isValid;

    m_e_branding_logo_isValid = ::Ezmaxapi::fromJsonValue(m_e_branding_logo, json[QString("eBrandingLogo")]);
    m_e_branding_logo_isSet = !json[QString("eBrandingLogo")].isNull() && m_e_branding_logo_isValid;

    m_e_branding_alignlogo_isValid = ::Ezmaxapi::fromJsonValue(m_e_branding_alignlogo, json[QString("eBrandingAlignlogo")]);
    m_e_branding_alignlogo_isSet = !json[QString("eBrandingAlignlogo")].isNull() && m_e_branding_alignlogo_isValid;

    m_s_branding_base64_isValid = ::Ezmaxapi::fromJsonValue(m_s_branding_base64, json[QString("sBrandingBase64")]);
    m_s_branding_base64_isSet = !json[QString("sBrandingBase64")].isNull() && m_s_branding_base64_isValid;

    m_i_branding_color_isValid = ::Ezmaxapi::fromJsonValue(m_i_branding_color, json[QString("iBrandingColor")]);
    m_i_branding_color_isSet = !json[QString("iBrandingColor")].isNull() && m_i_branding_color_isValid;

    m_s_branding_name_isValid = ::Ezmaxapi::fromJsonValue(m_s_branding_name, json[QString("sBrandingName")]);
    m_s_branding_name_isSet = !json[QString("sBrandingName")].isNull() && m_s_branding_name_isValid;

    m_s_email_address_isValid = ::Ezmaxapi::fromJsonValue(m_s_email_address, json[QString("sEmailAddress")]);
    m_s_email_address_isSet = !json[QString("sEmailAddress")].isNull() && m_s_email_address_isValid;

    m_b_branding_isactive_isValid = ::Ezmaxapi::fromJsonValue(m_b_branding_isactive, json[QString("bBrandingIsactive")]);
    m_b_branding_isactive_isSet = !json[QString("bBrandingIsactive")].isNull() && m_b_branding_isactive_isValid;
}

QString Branding_RequestV2::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject Branding_RequestV2::asJsonObject() const {
    QJsonObject obj;
    if (m_pki_branding_id_isSet) {
        obj.insert(QString("pkiBrandingID"), ::Ezmaxapi::toJsonValue(m_pki_branding_id));
    }
    if (m_obj_branding_description.isSet()) {
        obj.insert(QString("objBrandingDescription"), ::Ezmaxapi::toJsonValue(m_obj_branding_description));
    }
    if (m_e_branding_logo.isSet()) {
        obj.insert(QString("eBrandingLogo"), ::Ezmaxapi::toJsonValue(m_e_branding_logo));
    }
    if (m_e_branding_alignlogo.isSet()) {
        obj.insert(QString("eBrandingAlignlogo"), ::Ezmaxapi::toJsonValue(m_e_branding_alignlogo));
    }
    if (m_s_branding_base64_isSet) {
        obj.insert(QString("sBrandingBase64"), ::Ezmaxapi::toJsonValue(m_s_branding_base64));
    }
    if (m_i_branding_color_isSet) {
        obj.insert(QString("iBrandingColor"), ::Ezmaxapi::toJsonValue(m_i_branding_color));
    }
    if (m_s_branding_name_isSet) {
        obj.insert(QString("sBrandingName"), ::Ezmaxapi::toJsonValue(m_s_branding_name));
    }
    if (m_s_email_address_isSet) {
        obj.insert(QString("sEmailAddress"), ::Ezmaxapi::toJsonValue(m_s_email_address));
    }
    if (m_b_branding_isactive_isSet) {
        obj.insert(QString("bBrandingIsactive"), ::Ezmaxapi::toJsonValue(m_b_branding_isactive));
    }
    return obj;
}

qint32 Branding_RequestV2::getPkiBrandingId() const {
    return m_pki_branding_id;
}
void Branding_RequestV2::setPkiBrandingId(const qint32 &pki_branding_id) {
    m_pki_branding_id = pki_branding_id;
    m_pki_branding_id_isSet = true;
}

bool Branding_RequestV2::is_pki_branding_id_Set() const{
    return m_pki_branding_id_isSet;
}

bool Branding_RequestV2::is_pki_branding_id_Valid() const{
    return m_pki_branding_id_isValid;
}

Multilingual_BrandingDescription Branding_RequestV2::getObjBrandingDescription() const {
    return m_obj_branding_description;
}
void Branding_RequestV2::setObjBrandingDescription(const Multilingual_BrandingDescription &obj_branding_description) {
    m_obj_branding_description = obj_branding_description;
    m_obj_branding_description_isSet = true;
}

bool Branding_RequestV2::is_obj_branding_description_Set() const{
    return m_obj_branding_description_isSet;
}

bool Branding_RequestV2::is_obj_branding_description_Valid() const{
    return m_obj_branding_description_isValid;
}

Field_eBrandingLogo Branding_RequestV2::getEBrandingLogo() const {
    return m_e_branding_logo;
}
void Branding_RequestV2::setEBrandingLogo(const Field_eBrandingLogo &e_branding_logo) {
    m_e_branding_logo = e_branding_logo;
    m_e_branding_logo_isSet = true;
}

bool Branding_RequestV2::is_e_branding_logo_Set() const{
    return m_e_branding_logo_isSet;
}

bool Branding_RequestV2::is_e_branding_logo_Valid() const{
    return m_e_branding_logo_isValid;
}

Field_eBrandingAlignlogo Branding_RequestV2::getEBrandingAlignlogo() const {
    return m_e_branding_alignlogo;
}
void Branding_RequestV2::setEBrandingAlignlogo(const Field_eBrandingAlignlogo &e_branding_alignlogo) {
    m_e_branding_alignlogo = e_branding_alignlogo;
    m_e_branding_alignlogo_isSet = true;
}

bool Branding_RequestV2::is_e_branding_alignlogo_Set() const{
    return m_e_branding_alignlogo_isSet;
}

bool Branding_RequestV2::is_e_branding_alignlogo_Valid() const{
    return m_e_branding_alignlogo_isValid;
}

QByteArray Branding_RequestV2::getSBrandingBase64() const {
    return m_s_branding_base64;
}
void Branding_RequestV2::setSBrandingBase64(const QByteArray &s_branding_base64) {
    m_s_branding_base64 = s_branding_base64;
    m_s_branding_base64_isSet = true;
}

bool Branding_RequestV2::is_s_branding_base64_Set() const{
    return m_s_branding_base64_isSet;
}

bool Branding_RequestV2::is_s_branding_base64_Valid() const{
    return m_s_branding_base64_isValid;
}

qint32 Branding_RequestV2::getIBrandingColor() const {
    return m_i_branding_color;
}
void Branding_RequestV2::setIBrandingColor(const qint32 &i_branding_color) {
    m_i_branding_color = i_branding_color;
    m_i_branding_color_isSet = true;
}

bool Branding_RequestV2::is_i_branding_color_Set() const{
    return m_i_branding_color_isSet;
}

bool Branding_RequestV2::is_i_branding_color_Valid() const{
    return m_i_branding_color_isValid;
}

QString Branding_RequestV2::getSBrandingName() const {
    return m_s_branding_name;
}
void Branding_RequestV2::setSBrandingName(const QString &s_branding_name) {
    m_s_branding_name = s_branding_name;
    m_s_branding_name_isSet = true;
}

bool Branding_RequestV2::is_s_branding_name_Set() const{
    return m_s_branding_name_isSet;
}

bool Branding_RequestV2::is_s_branding_name_Valid() const{
    return m_s_branding_name_isValid;
}

QString Branding_RequestV2::getSEmailAddress() const {
    return m_s_email_address;
}
void Branding_RequestV2::setSEmailAddress(const QString &s_email_address) {
    m_s_email_address = s_email_address;
    m_s_email_address_isSet = true;
}

bool Branding_RequestV2::is_s_email_address_Set() const{
    return m_s_email_address_isSet;
}

bool Branding_RequestV2::is_s_email_address_Valid() const{
    return m_s_email_address_isValid;
}

bool Branding_RequestV2::isBBrandingIsactive() const {
    return m_b_branding_isactive;
}
void Branding_RequestV2::setBBrandingIsactive(const bool &b_branding_isactive) {
    m_b_branding_isactive = b_branding_isactive;
    m_b_branding_isactive_isSet = true;
}

bool Branding_RequestV2::is_b_branding_isactive_Set() const{
    return m_b_branding_isactive_isSet;
}

bool Branding_RequestV2::is_b_branding_isactive_Valid() const{
    return m_b_branding_isactive_isValid;
}

bool Branding_RequestV2::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_pki_branding_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_obj_branding_description.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_e_branding_logo.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_e_branding_alignlogo.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_s_branding_base64_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_i_branding_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s_branding_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s_email_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_b_branding_isactive_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool Branding_RequestV2::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_obj_branding_description_isValid && m_e_branding_logo_isValid && m_i_branding_color_isValid && m_b_branding_isactive_isValid && true;
}

} // namespace Ezmaxapi
