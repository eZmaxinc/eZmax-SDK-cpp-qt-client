/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "User_AutocompleteElement_Response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "Helpers.h"

namespace Ezmaxapi {

User_AutocompleteElement_Response::User_AutocompleteElement_Response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

User_AutocompleteElement_Response::User_AutocompleteElement_Response() {
    this->initializeModel();
}

User_AutocompleteElement_Response::~User_AutocompleteElement_Response() {}

void User_AutocompleteElement_Response::initializeModel() {

    m_e_user_type_isSet = false;
    m_e_user_type_isValid = false;

    m_s_user_name_isSet = false;
    m_s_user_name_isValid = false;

    m_pki_user_id_isSet = false;
    m_pki_user_id_isValid = false;

    m_b_user_isactive_isSet = false;
    m_b_user_isactive_isValid = false;
}

void User_AutocompleteElement_Response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void User_AutocompleteElement_Response::fromJsonObject(QJsonObject json) {

    m_e_user_type_isValid = ::Ezmaxapi::fromJsonValue(m_e_user_type, json[QString("eUserType")]);
    m_e_user_type_isSet = !json[QString("eUserType")].isNull() && m_e_user_type_isValid;

    m_s_user_name_isValid = ::Ezmaxapi::fromJsonValue(m_s_user_name, json[QString("sUserName")]);
    m_s_user_name_isSet = !json[QString("sUserName")].isNull() && m_s_user_name_isValid;

    m_pki_user_id_isValid = ::Ezmaxapi::fromJsonValue(m_pki_user_id, json[QString("pkiUserID")]);
    m_pki_user_id_isSet = !json[QString("pkiUserID")].isNull() && m_pki_user_id_isValid;

    m_b_user_isactive_isValid = ::Ezmaxapi::fromJsonValue(m_b_user_isactive, json[QString("bUserIsactive")]);
    m_b_user_isactive_isSet = !json[QString("bUserIsactive")].isNull() && m_b_user_isactive_isValid;
}

QString User_AutocompleteElement_Response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject User_AutocompleteElement_Response::asJsonObject() const {
    QJsonObject obj;
    if (m_e_user_type.isSet()) {
        obj.insert(QString("eUserType"), ::Ezmaxapi::toJsonValue(m_e_user_type));
    }
    if (m_s_user_name_isSet) {
        obj.insert(QString("sUserName"), ::Ezmaxapi::toJsonValue(m_s_user_name));
    }
    if (m_pki_user_id_isSet) {
        obj.insert(QString("pkiUserID"), ::Ezmaxapi::toJsonValue(m_pki_user_id));
    }
    if (m_b_user_isactive_isSet) {
        obj.insert(QString("bUserIsactive"), ::Ezmaxapi::toJsonValue(m_b_user_isactive));
    }
    return obj;
}

Field_eUserType User_AutocompleteElement_Response::getEUserType() const {
    return m_e_user_type;
}
void User_AutocompleteElement_Response::setEUserType(const Field_eUserType &e_user_type) {
    m_e_user_type = e_user_type;
    m_e_user_type_isSet = true;
}

bool User_AutocompleteElement_Response::is_e_user_type_Set() const{
    return m_e_user_type_isSet;
}

bool User_AutocompleteElement_Response::is_e_user_type_Valid() const{
    return m_e_user_type_isValid;
}

QString User_AutocompleteElement_Response::getSUserName() const {
    return m_s_user_name;
}
void User_AutocompleteElement_Response::setSUserName(const QString &s_user_name) {
    m_s_user_name = s_user_name;
    m_s_user_name_isSet = true;
}

bool User_AutocompleteElement_Response::is_s_user_name_Set() const{
    return m_s_user_name_isSet;
}

bool User_AutocompleteElement_Response::is_s_user_name_Valid() const{
    return m_s_user_name_isValid;
}

qint32 User_AutocompleteElement_Response::getPkiUserId() const {
    return m_pki_user_id;
}
void User_AutocompleteElement_Response::setPkiUserId(const qint32 &pki_user_id) {
    m_pki_user_id = pki_user_id;
    m_pki_user_id_isSet = true;
}

bool User_AutocompleteElement_Response::is_pki_user_id_Set() const{
    return m_pki_user_id_isSet;
}

bool User_AutocompleteElement_Response::is_pki_user_id_Valid() const{
    return m_pki_user_id_isValid;
}

bool User_AutocompleteElement_Response::isBUserIsactive() const {
    return m_b_user_isactive;
}
void User_AutocompleteElement_Response::setBUserIsactive(const bool &b_user_isactive) {
    m_b_user_isactive = b_user_isactive;
    m_b_user_isactive_isSet = true;
}

bool User_AutocompleteElement_Response::is_b_user_isactive_Set() const{
    return m_b_user_isactive_isSet;
}

bool User_AutocompleteElement_Response::is_b_user_isactive_Valid() const{
    return m_b_user_isactive_isValid;
}

bool User_AutocompleteElement_Response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_e_user_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_s_user_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pki_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_b_user_isactive_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool User_AutocompleteElement_Response::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_e_user_type_isValid && m_s_user_name_isValid && m_pki_user_id_isValid && m_b_user_isactive_isValid && true;
}

} // namespace Ezmaxapi
