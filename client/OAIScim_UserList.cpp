/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.18
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScim_UserList.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScim_UserList::OAIScim_UserList(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScim_UserList::OAIScim_UserList() {
    this->initializeModel();
}

OAIScim_UserList::~OAIScim_UserList() {}

void OAIScim_UserList::initializeModel() {

    m_total_results_isSet = false;
    m_total_results_isValid = false;

    m_items_per_page_isSet = false;
    m_items_per_page_isValid = false;

    m_start_index_isSet = false;
    m_start_index_isValid = false;

    m_schemas_isSet = false;
    m_schemas_isValid = false;

    m_resources_isSet = false;
    m_resources_isValid = false;
}

void OAIScim_UserList::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScim_UserList::fromJsonObject(QJsonObject json) {

    m_total_results_isValid = ::OpenAPI::fromJsonValue(total_results, json[QString("totalResults")]);
    m_total_results_isSet = !json[QString("totalResults")].isNull() && m_total_results_isValid;

    m_items_per_page_isValid = ::OpenAPI::fromJsonValue(items_per_page, json[QString("itemsPerPage")]);
    m_items_per_page_isSet = !json[QString("itemsPerPage")].isNull() && m_items_per_page_isValid;

    m_start_index_isValid = ::OpenAPI::fromJsonValue(start_index, json[QString("startIndex")]);
    m_start_index_isSet = !json[QString("startIndex")].isNull() && m_start_index_isValid;

    m_schemas_isValid = ::OpenAPI::fromJsonValue(schemas, json[QString("schemas")]);
    m_schemas_isSet = !json[QString("schemas")].isNull() && m_schemas_isValid;

    m_resources_isValid = ::OpenAPI::fromJsonValue(resources, json[QString("Resources")]);
    m_resources_isSet = !json[QString("Resources")].isNull() && m_resources_isValid;
}

QString OAIScim_UserList::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScim_UserList::asJsonObject() const {
    QJsonObject obj;
    if (m_total_results_isSet) {
        obj.insert(QString("totalResults"), ::OpenAPI::toJsonValue(total_results));
    }
    if (m_items_per_page_isSet) {
        obj.insert(QString("itemsPerPage"), ::OpenAPI::toJsonValue(items_per_page));
    }
    if (m_start_index_isSet) {
        obj.insert(QString("startIndex"), ::OpenAPI::toJsonValue(start_index));
    }
    if (schemas.size() > 0) {
        obj.insert(QString("schemas"), ::OpenAPI::toJsonValue(schemas));
    }
    if (resources.size() > 0) {
        obj.insert(QString("Resources"), ::OpenAPI::toJsonValue(resources));
    }
    return obj;
}

qint32 OAIScim_UserList::getTotalResults() const {
    return total_results;
}
void OAIScim_UserList::setTotalResults(const qint32 &total_results) {
    this->total_results = total_results;
    this->m_total_results_isSet = true;
}

bool OAIScim_UserList::is_total_results_Set() const{
    return m_total_results_isSet;
}

bool OAIScim_UserList::is_total_results_Valid() const{
    return m_total_results_isValid;
}

qint32 OAIScim_UserList::getItemsPerPage() const {
    return items_per_page;
}
void OAIScim_UserList::setItemsPerPage(const qint32 &items_per_page) {
    this->items_per_page = items_per_page;
    this->m_items_per_page_isSet = true;
}

bool OAIScim_UserList::is_items_per_page_Set() const{
    return m_items_per_page_isSet;
}

bool OAIScim_UserList::is_items_per_page_Valid() const{
    return m_items_per_page_isValid;
}

qint32 OAIScim_UserList::getStartIndex() const {
    return start_index;
}
void OAIScim_UserList::setStartIndex(const qint32 &start_index) {
    this->start_index = start_index;
    this->m_start_index_isSet = true;
}

bool OAIScim_UserList::is_start_index_Set() const{
    return m_start_index_isSet;
}

bool OAIScim_UserList::is_start_index_Valid() const{
    return m_start_index_isValid;
}

QList<QString> OAIScim_UserList::getSchemas() const {
    return schemas;
}
void OAIScim_UserList::setSchemas(const QList<QString> &schemas) {
    this->schemas = schemas;
    this->m_schemas_isSet = true;
}

bool OAIScim_UserList::is_schemas_Set() const{
    return m_schemas_isSet;
}

bool OAIScim_UserList::is_schemas_Valid() const{
    return m_schemas_isValid;
}

QList<OAIScim_User> OAIScim_UserList::getResources() const {
    return resources;
}
void OAIScim_UserList::setResources(const QList<OAIScim_User> &resources) {
    this->resources = resources;
    this->m_resources_isSet = true;
}

bool OAIScim_UserList::is_resources_Set() const{
    return m_resources_isSet;
}

bool OAIScim_UserList::is_resources_Valid() const{
    return m_resources_isValid;
}

bool OAIScim_UserList::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_total_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items_per_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (schemas.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (resources.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScim_UserList::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
