/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "Custom_Ezsignfoldertype_Response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "Helpers.h"

namespace Ezmaxapi {

Custom_Ezsignfoldertype_Response::Custom_Ezsignfoldertype_Response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

Custom_Ezsignfoldertype_Response::Custom_Ezsignfoldertype_Response() {
    this->initializeModel();
}

Custom_Ezsignfoldertype_Response::~Custom_Ezsignfoldertype_Response() {}

void Custom_Ezsignfoldertype_Response::initializeModel() {

    m_pki_ezsignfoldertype_id_isSet = false;
    m_pki_ezsignfoldertype_id_isValid = false;

    m_fki_font_id_annotation_isSet = false;
    m_fki_font_id_annotation_isValid = false;

    m_fki_font_id_formfield_isSet = false;
    m_fki_font_id_formfield_isValid = false;

    m_fki_font_id_signature_isSet = false;
    m_fki_font_id_signature_isValid = false;

    m_s_ezsignfoldertype_name_x_isSet = false;
    m_s_ezsignfoldertype_name_x_isValid = false;

    m_b_ezsignfoldertype_sendproofezsignsigner_isSet = false;
    m_b_ezsignfoldertype_sendproofezsignsigner_isValid = false;

    m_b_ezsignfoldertype_allowdownloadattachmentezsignsigner_isSet = false;
    m_b_ezsignfoldertype_allowdownloadattachmentezsignsigner_isValid = false;

    m_b_ezsignfoldertype_allowdownloadproofezsignsigner_isSet = false;
    m_b_ezsignfoldertype_allowdownloadproofezsignsigner_isValid = false;

    m_b_ezsignfoldertype_automaticsignature_isSet = false;
    m_b_ezsignfoldertype_automaticsignature_isValid = false;

    m_b_ezsignfoldertype_delegate_isSet = false;
    m_b_ezsignfoldertype_delegate_isValid = false;

    m_b_ezsignfoldertype_discussion_isSet = false;
    m_b_ezsignfoldertype_discussion_isValid = false;

    m_b_ezsignfoldertype_reassignezsignsigner_isSet = false;
    m_b_ezsignfoldertype_reassignezsignsigner_isValid = false;

    m_b_ezsignfoldertype_reassignuser_isSet = false;
    m_b_ezsignfoldertype_reassignuser_isValid = false;

    m_b_ezsignfoldertype_reassigngroup_isSet = false;
    m_b_ezsignfoldertype_reassigngroup_isValid = false;

    m_i_ezsignfoldertype_deadlinedays_isSet = false;
    m_i_ezsignfoldertype_deadlinedays_isValid = false;

    m_i_ezsignfoldertype_fontsizeannotation_isSet = false;
    m_i_ezsignfoldertype_fontsizeannotation_isValid = false;

    m_i_ezsignfoldertype_fontsizeformfield_isSet = false;
    m_i_ezsignfoldertype_fontsizeformfield_isValid = false;
}

void Custom_Ezsignfoldertype_Response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void Custom_Ezsignfoldertype_Response::fromJsonObject(QJsonObject json) {

    m_pki_ezsignfoldertype_id_isValid = ::Ezmaxapi::fromJsonValue(m_pki_ezsignfoldertype_id, json[QString("pkiEzsignfoldertypeID")]);
    m_pki_ezsignfoldertype_id_isSet = !json[QString("pkiEzsignfoldertypeID")].isNull() && m_pki_ezsignfoldertype_id_isValid;

    m_fki_font_id_annotation_isValid = ::Ezmaxapi::fromJsonValue(m_fki_font_id_annotation, json[QString("fkiFontIDAnnotation")]);
    m_fki_font_id_annotation_isSet = !json[QString("fkiFontIDAnnotation")].isNull() && m_fki_font_id_annotation_isValid;

    m_fki_font_id_formfield_isValid = ::Ezmaxapi::fromJsonValue(m_fki_font_id_formfield, json[QString("fkiFontIDFormfield")]);
    m_fki_font_id_formfield_isSet = !json[QString("fkiFontIDFormfield")].isNull() && m_fki_font_id_formfield_isValid;

    m_fki_font_id_signature_isValid = ::Ezmaxapi::fromJsonValue(m_fki_font_id_signature, json[QString("fkiFontIDSignature")]);
    m_fki_font_id_signature_isSet = !json[QString("fkiFontIDSignature")].isNull() && m_fki_font_id_signature_isValid;

    m_s_ezsignfoldertype_name_x_isValid = ::Ezmaxapi::fromJsonValue(m_s_ezsignfoldertype_name_x, json[QString("sEzsignfoldertypeNameX")]);
    m_s_ezsignfoldertype_name_x_isSet = !json[QString("sEzsignfoldertypeNameX")].isNull() && m_s_ezsignfoldertype_name_x_isValid;

    m_b_ezsignfoldertype_sendproofezsignsigner_isValid = ::Ezmaxapi::fromJsonValue(m_b_ezsignfoldertype_sendproofezsignsigner, json[QString("bEzsignfoldertypeSendproofezsignsigner")]);
    m_b_ezsignfoldertype_sendproofezsignsigner_isSet = !json[QString("bEzsignfoldertypeSendproofezsignsigner")].isNull() && m_b_ezsignfoldertype_sendproofezsignsigner_isValid;

    m_b_ezsignfoldertype_allowdownloadattachmentezsignsigner_isValid = ::Ezmaxapi::fromJsonValue(m_b_ezsignfoldertype_allowdownloadattachmentezsignsigner, json[QString("bEzsignfoldertypeAllowdownloadattachmentezsignsigner")]);
    m_b_ezsignfoldertype_allowdownloadattachmentezsignsigner_isSet = !json[QString("bEzsignfoldertypeAllowdownloadattachmentezsignsigner")].isNull() && m_b_ezsignfoldertype_allowdownloadattachmentezsignsigner_isValid;

    m_b_ezsignfoldertype_allowdownloadproofezsignsigner_isValid = ::Ezmaxapi::fromJsonValue(m_b_ezsignfoldertype_allowdownloadproofezsignsigner, json[QString("bEzsignfoldertypeAllowdownloadproofezsignsigner")]);
    m_b_ezsignfoldertype_allowdownloadproofezsignsigner_isSet = !json[QString("bEzsignfoldertypeAllowdownloadproofezsignsigner")].isNull() && m_b_ezsignfoldertype_allowdownloadproofezsignsigner_isValid;

    m_b_ezsignfoldertype_automaticsignature_isValid = ::Ezmaxapi::fromJsonValue(m_b_ezsignfoldertype_automaticsignature, json[QString("bEzsignfoldertypeAutomaticsignature")]);
    m_b_ezsignfoldertype_automaticsignature_isSet = !json[QString("bEzsignfoldertypeAutomaticsignature")].isNull() && m_b_ezsignfoldertype_automaticsignature_isValid;

    m_b_ezsignfoldertype_delegate_isValid = ::Ezmaxapi::fromJsonValue(m_b_ezsignfoldertype_delegate, json[QString("bEzsignfoldertypeDelegate")]);
    m_b_ezsignfoldertype_delegate_isSet = !json[QString("bEzsignfoldertypeDelegate")].isNull() && m_b_ezsignfoldertype_delegate_isValid;

    m_b_ezsignfoldertype_discussion_isValid = ::Ezmaxapi::fromJsonValue(m_b_ezsignfoldertype_discussion, json[QString("bEzsignfoldertypeDiscussion")]);
    m_b_ezsignfoldertype_discussion_isSet = !json[QString("bEzsignfoldertypeDiscussion")].isNull() && m_b_ezsignfoldertype_discussion_isValid;

    m_b_ezsignfoldertype_reassignezsignsigner_isValid = ::Ezmaxapi::fromJsonValue(m_b_ezsignfoldertype_reassignezsignsigner, json[QString("bEzsignfoldertypeReassignezsignsigner")]);
    m_b_ezsignfoldertype_reassignezsignsigner_isSet = !json[QString("bEzsignfoldertypeReassignezsignsigner")].isNull() && m_b_ezsignfoldertype_reassignezsignsigner_isValid;

    m_b_ezsignfoldertype_reassignuser_isValid = ::Ezmaxapi::fromJsonValue(m_b_ezsignfoldertype_reassignuser, json[QString("bEzsignfoldertypeReassignuser")]);
    m_b_ezsignfoldertype_reassignuser_isSet = !json[QString("bEzsignfoldertypeReassignuser")].isNull() && m_b_ezsignfoldertype_reassignuser_isValid;

    m_b_ezsignfoldertype_reassigngroup_isValid = ::Ezmaxapi::fromJsonValue(m_b_ezsignfoldertype_reassigngroup, json[QString("bEzsignfoldertypeReassigngroup")]);
    m_b_ezsignfoldertype_reassigngroup_isSet = !json[QString("bEzsignfoldertypeReassigngroup")].isNull() && m_b_ezsignfoldertype_reassigngroup_isValid;

    m_i_ezsignfoldertype_deadlinedays_isValid = ::Ezmaxapi::fromJsonValue(m_i_ezsignfoldertype_deadlinedays, json[QString("iEzsignfoldertypeDeadlinedays")]);
    m_i_ezsignfoldertype_deadlinedays_isSet = !json[QString("iEzsignfoldertypeDeadlinedays")].isNull() && m_i_ezsignfoldertype_deadlinedays_isValid;

    m_i_ezsignfoldertype_fontsizeannotation_isValid = ::Ezmaxapi::fromJsonValue(m_i_ezsignfoldertype_fontsizeannotation, json[QString("iEzsignfoldertypeFontsizeannotation")]);
    m_i_ezsignfoldertype_fontsizeannotation_isSet = !json[QString("iEzsignfoldertypeFontsizeannotation")].isNull() && m_i_ezsignfoldertype_fontsizeannotation_isValid;

    m_i_ezsignfoldertype_fontsizeformfield_isValid = ::Ezmaxapi::fromJsonValue(m_i_ezsignfoldertype_fontsizeformfield, json[QString("iEzsignfoldertypeFontsizeformfield")]);
    m_i_ezsignfoldertype_fontsizeformfield_isSet = !json[QString("iEzsignfoldertypeFontsizeformfield")].isNull() && m_i_ezsignfoldertype_fontsizeformfield_isValid;
}

QString Custom_Ezsignfoldertype_Response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject Custom_Ezsignfoldertype_Response::asJsonObject() const {
    QJsonObject obj;
    if (m_pki_ezsignfoldertype_id_isSet) {
        obj.insert(QString("pkiEzsignfoldertypeID"), ::Ezmaxapi::toJsonValue(m_pki_ezsignfoldertype_id));
    }
    if (m_fki_font_id_annotation_isSet) {
        obj.insert(QString("fkiFontIDAnnotation"), ::Ezmaxapi::toJsonValue(m_fki_font_id_annotation));
    }
    if (m_fki_font_id_formfield_isSet) {
        obj.insert(QString("fkiFontIDFormfield"), ::Ezmaxapi::toJsonValue(m_fki_font_id_formfield));
    }
    if (m_fki_font_id_signature_isSet) {
        obj.insert(QString("fkiFontIDSignature"), ::Ezmaxapi::toJsonValue(m_fki_font_id_signature));
    }
    if (m_s_ezsignfoldertype_name_x_isSet) {
        obj.insert(QString("sEzsignfoldertypeNameX"), ::Ezmaxapi::toJsonValue(m_s_ezsignfoldertype_name_x));
    }
    if (m_b_ezsignfoldertype_sendproofezsignsigner_isSet) {
        obj.insert(QString("bEzsignfoldertypeSendproofezsignsigner"), ::Ezmaxapi::toJsonValue(m_b_ezsignfoldertype_sendproofezsignsigner));
    }
    if (m_b_ezsignfoldertype_allowdownloadattachmentezsignsigner_isSet) {
        obj.insert(QString("bEzsignfoldertypeAllowdownloadattachmentezsignsigner"), ::Ezmaxapi::toJsonValue(m_b_ezsignfoldertype_allowdownloadattachmentezsignsigner));
    }
    if (m_b_ezsignfoldertype_allowdownloadproofezsignsigner_isSet) {
        obj.insert(QString("bEzsignfoldertypeAllowdownloadproofezsignsigner"), ::Ezmaxapi::toJsonValue(m_b_ezsignfoldertype_allowdownloadproofezsignsigner));
    }
    if (m_b_ezsignfoldertype_automaticsignature_isSet) {
        obj.insert(QString("bEzsignfoldertypeAutomaticsignature"), ::Ezmaxapi::toJsonValue(m_b_ezsignfoldertype_automaticsignature));
    }
    if (m_b_ezsignfoldertype_delegate_isSet) {
        obj.insert(QString("bEzsignfoldertypeDelegate"), ::Ezmaxapi::toJsonValue(m_b_ezsignfoldertype_delegate));
    }
    if (m_b_ezsignfoldertype_discussion_isSet) {
        obj.insert(QString("bEzsignfoldertypeDiscussion"), ::Ezmaxapi::toJsonValue(m_b_ezsignfoldertype_discussion));
    }
    if (m_b_ezsignfoldertype_reassignezsignsigner_isSet) {
        obj.insert(QString("bEzsignfoldertypeReassignezsignsigner"), ::Ezmaxapi::toJsonValue(m_b_ezsignfoldertype_reassignezsignsigner));
    }
    if (m_b_ezsignfoldertype_reassignuser_isSet) {
        obj.insert(QString("bEzsignfoldertypeReassignuser"), ::Ezmaxapi::toJsonValue(m_b_ezsignfoldertype_reassignuser));
    }
    if (m_b_ezsignfoldertype_reassigngroup_isSet) {
        obj.insert(QString("bEzsignfoldertypeReassigngroup"), ::Ezmaxapi::toJsonValue(m_b_ezsignfoldertype_reassigngroup));
    }
    if (m_i_ezsignfoldertype_deadlinedays_isSet) {
        obj.insert(QString("iEzsignfoldertypeDeadlinedays"), ::Ezmaxapi::toJsonValue(m_i_ezsignfoldertype_deadlinedays));
    }
    if (m_i_ezsignfoldertype_fontsizeannotation_isSet) {
        obj.insert(QString("iEzsignfoldertypeFontsizeannotation"), ::Ezmaxapi::toJsonValue(m_i_ezsignfoldertype_fontsizeannotation));
    }
    if (m_i_ezsignfoldertype_fontsizeformfield_isSet) {
        obj.insert(QString("iEzsignfoldertypeFontsizeformfield"), ::Ezmaxapi::toJsonValue(m_i_ezsignfoldertype_fontsizeformfield));
    }
    return obj;
}

qint32 Custom_Ezsignfoldertype_Response::getPkiEzsignfoldertypeId() const {
    return m_pki_ezsignfoldertype_id;
}
void Custom_Ezsignfoldertype_Response::setPkiEzsignfoldertypeId(const qint32 &pki_ezsignfoldertype_id) {
    m_pki_ezsignfoldertype_id = pki_ezsignfoldertype_id;
    m_pki_ezsignfoldertype_id_isSet = true;
}

bool Custom_Ezsignfoldertype_Response::is_pki_ezsignfoldertype_id_Set() const{
    return m_pki_ezsignfoldertype_id_isSet;
}

bool Custom_Ezsignfoldertype_Response::is_pki_ezsignfoldertype_id_Valid() const{
    return m_pki_ezsignfoldertype_id_isValid;
}

qint32 Custom_Ezsignfoldertype_Response::getFkiFontIdAnnotation() const {
    return m_fki_font_id_annotation;
}
void Custom_Ezsignfoldertype_Response::setFkiFontIdAnnotation(const qint32 &fki_font_id_annotation) {
    m_fki_font_id_annotation = fki_font_id_annotation;
    m_fki_font_id_annotation_isSet = true;
}

bool Custom_Ezsignfoldertype_Response::is_fki_font_id_annotation_Set() const{
    return m_fki_font_id_annotation_isSet;
}

bool Custom_Ezsignfoldertype_Response::is_fki_font_id_annotation_Valid() const{
    return m_fki_font_id_annotation_isValid;
}

qint32 Custom_Ezsignfoldertype_Response::getFkiFontIdFormfield() const {
    return m_fki_font_id_formfield;
}
void Custom_Ezsignfoldertype_Response::setFkiFontIdFormfield(const qint32 &fki_font_id_formfield) {
    m_fki_font_id_formfield = fki_font_id_formfield;
    m_fki_font_id_formfield_isSet = true;
}

bool Custom_Ezsignfoldertype_Response::is_fki_font_id_formfield_Set() const{
    return m_fki_font_id_formfield_isSet;
}

bool Custom_Ezsignfoldertype_Response::is_fki_font_id_formfield_Valid() const{
    return m_fki_font_id_formfield_isValid;
}

qint32 Custom_Ezsignfoldertype_Response::getFkiFontIdSignature() const {
    return m_fki_font_id_signature;
}
void Custom_Ezsignfoldertype_Response::setFkiFontIdSignature(const qint32 &fki_font_id_signature) {
    m_fki_font_id_signature = fki_font_id_signature;
    m_fki_font_id_signature_isSet = true;
}

bool Custom_Ezsignfoldertype_Response::is_fki_font_id_signature_Set() const{
    return m_fki_font_id_signature_isSet;
}

bool Custom_Ezsignfoldertype_Response::is_fki_font_id_signature_Valid() const{
    return m_fki_font_id_signature_isValid;
}

QString Custom_Ezsignfoldertype_Response::getSEzsignfoldertypeNameX() const {
    return m_s_ezsignfoldertype_name_x;
}
void Custom_Ezsignfoldertype_Response::setSEzsignfoldertypeNameX(const QString &s_ezsignfoldertype_name_x) {
    m_s_ezsignfoldertype_name_x = s_ezsignfoldertype_name_x;
    m_s_ezsignfoldertype_name_x_isSet = true;
}

bool Custom_Ezsignfoldertype_Response::is_s_ezsignfoldertype_name_x_Set() const{
    return m_s_ezsignfoldertype_name_x_isSet;
}

bool Custom_Ezsignfoldertype_Response::is_s_ezsignfoldertype_name_x_Valid() const{
    return m_s_ezsignfoldertype_name_x_isValid;
}

bool Custom_Ezsignfoldertype_Response::isBEzsignfoldertypeSendproofezsignsigner() const {
    return m_b_ezsignfoldertype_sendproofezsignsigner;
}
void Custom_Ezsignfoldertype_Response::setBEzsignfoldertypeSendproofezsignsigner(const bool &b_ezsignfoldertype_sendproofezsignsigner) {
    m_b_ezsignfoldertype_sendproofezsignsigner = b_ezsignfoldertype_sendproofezsignsigner;
    m_b_ezsignfoldertype_sendproofezsignsigner_isSet = true;
}

bool Custom_Ezsignfoldertype_Response::is_b_ezsignfoldertype_sendproofezsignsigner_Set() const{
    return m_b_ezsignfoldertype_sendproofezsignsigner_isSet;
}

bool Custom_Ezsignfoldertype_Response::is_b_ezsignfoldertype_sendproofezsignsigner_Valid() const{
    return m_b_ezsignfoldertype_sendproofezsignsigner_isValid;
}

bool Custom_Ezsignfoldertype_Response::isBEzsignfoldertypeAllowdownloadattachmentezsignsigner() const {
    return m_b_ezsignfoldertype_allowdownloadattachmentezsignsigner;
}
void Custom_Ezsignfoldertype_Response::setBEzsignfoldertypeAllowdownloadattachmentezsignsigner(const bool &b_ezsignfoldertype_allowdownloadattachmentezsignsigner) {
    m_b_ezsignfoldertype_allowdownloadattachmentezsignsigner = b_ezsignfoldertype_allowdownloadattachmentezsignsigner;
    m_b_ezsignfoldertype_allowdownloadattachmentezsignsigner_isSet = true;
}

bool Custom_Ezsignfoldertype_Response::is_b_ezsignfoldertype_allowdownloadattachmentezsignsigner_Set() const{
    return m_b_ezsignfoldertype_allowdownloadattachmentezsignsigner_isSet;
}

bool Custom_Ezsignfoldertype_Response::is_b_ezsignfoldertype_allowdownloadattachmentezsignsigner_Valid() const{
    return m_b_ezsignfoldertype_allowdownloadattachmentezsignsigner_isValid;
}

bool Custom_Ezsignfoldertype_Response::isBEzsignfoldertypeAllowdownloadproofezsignsigner() const {
    return m_b_ezsignfoldertype_allowdownloadproofezsignsigner;
}
void Custom_Ezsignfoldertype_Response::setBEzsignfoldertypeAllowdownloadproofezsignsigner(const bool &b_ezsignfoldertype_allowdownloadproofezsignsigner) {
    m_b_ezsignfoldertype_allowdownloadproofezsignsigner = b_ezsignfoldertype_allowdownloadproofezsignsigner;
    m_b_ezsignfoldertype_allowdownloadproofezsignsigner_isSet = true;
}

bool Custom_Ezsignfoldertype_Response::is_b_ezsignfoldertype_allowdownloadproofezsignsigner_Set() const{
    return m_b_ezsignfoldertype_allowdownloadproofezsignsigner_isSet;
}

bool Custom_Ezsignfoldertype_Response::is_b_ezsignfoldertype_allowdownloadproofezsignsigner_Valid() const{
    return m_b_ezsignfoldertype_allowdownloadproofezsignsigner_isValid;
}

bool Custom_Ezsignfoldertype_Response::isBEzsignfoldertypeAutomaticsignature() const {
    return m_b_ezsignfoldertype_automaticsignature;
}
void Custom_Ezsignfoldertype_Response::setBEzsignfoldertypeAutomaticsignature(const bool &b_ezsignfoldertype_automaticsignature) {
    m_b_ezsignfoldertype_automaticsignature = b_ezsignfoldertype_automaticsignature;
    m_b_ezsignfoldertype_automaticsignature_isSet = true;
}

bool Custom_Ezsignfoldertype_Response::is_b_ezsignfoldertype_automaticsignature_Set() const{
    return m_b_ezsignfoldertype_automaticsignature_isSet;
}

bool Custom_Ezsignfoldertype_Response::is_b_ezsignfoldertype_automaticsignature_Valid() const{
    return m_b_ezsignfoldertype_automaticsignature_isValid;
}

bool Custom_Ezsignfoldertype_Response::isBEzsignfoldertypeDelegate() const {
    return m_b_ezsignfoldertype_delegate;
}
void Custom_Ezsignfoldertype_Response::setBEzsignfoldertypeDelegate(const bool &b_ezsignfoldertype_delegate) {
    m_b_ezsignfoldertype_delegate = b_ezsignfoldertype_delegate;
    m_b_ezsignfoldertype_delegate_isSet = true;
}

bool Custom_Ezsignfoldertype_Response::is_b_ezsignfoldertype_delegate_Set() const{
    return m_b_ezsignfoldertype_delegate_isSet;
}

bool Custom_Ezsignfoldertype_Response::is_b_ezsignfoldertype_delegate_Valid() const{
    return m_b_ezsignfoldertype_delegate_isValid;
}

bool Custom_Ezsignfoldertype_Response::isBEzsignfoldertypeDiscussion() const {
    return m_b_ezsignfoldertype_discussion;
}
void Custom_Ezsignfoldertype_Response::setBEzsignfoldertypeDiscussion(const bool &b_ezsignfoldertype_discussion) {
    m_b_ezsignfoldertype_discussion = b_ezsignfoldertype_discussion;
    m_b_ezsignfoldertype_discussion_isSet = true;
}

bool Custom_Ezsignfoldertype_Response::is_b_ezsignfoldertype_discussion_Set() const{
    return m_b_ezsignfoldertype_discussion_isSet;
}

bool Custom_Ezsignfoldertype_Response::is_b_ezsignfoldertype_discussion_Valid() const{
    return m_b_ezsignfoldertype_discussion_isValid;
}

bool Custom_Ezsignfoldertype_Response::isBEzsignfoldertypeReassignezsignsigner() const {
    return m_b_ezsignfoldertype_reassignezsignsigner;
}
void Custom_Ezsignfoldertype_Response::setBEzsignfoldertypeReassignezsignsigner(const bool &b_ezsignfoldertype_reassignezsignsigner) {
    m_b_ezsignfoldertype_reassignezsignsigner = b_ezsignfoldertype_reassignezsignsigner;
    m_b_ezsignfoldertype_reassignezsignsigner_isSet = true;
}

bool Custom_Ezsignfoldertype_Response::is_b_ezsignfoldertype_reassignezsignsigner_Set() const{
    return m_b_ezsignfoldertype_reassignezsignsigner_isSet;
}

bool Custom_Ezsignfoldertype_Response::is_b_ezsignfoldertype_reassignezsignsigner_Valid() const{
    return m_b_ezsignfoldertype_reassignezsignsigner_isValid;
}

bool Custom_Ezsignfoldertype_Response::isBEzsignfoldertypeReassignuser() const {
    return m_b_ezsignfoldertype_reassignuser;
}
void Custom_Ezsignfoldertype_Response::setBEzsignfoldertypeReassignuser(const bool &b_ezsignfoldertype_reassignuser) {
    m_b_ezsignfoldertype_reassignuser = b_ezsignfoldertype_reassignuser;
    m_b_ezsignfoldertype_reassignuser_isSet = true;
}

bool Custom_Ezsignfoldertype_Response::is_b_ezsignfoldertype_reassignuser_Set() const{
    return m_b_ezsignfoldertype_reassignuser_isSet;
}

bool Custom_Ezsignfoldertype_Response::is_b_ezsignfoldertype_reassignuser_Valid() const{
    return m_b_ezsignfoldertype_reassignuser_isValid;
}

bool Custom_Ezsignfoldertype_Response::isBEzsignfoldertypeReassigngroup() const {
    return m_b_ezsignfoldertype_reassigngroup;
}
void Custom_Ezsignfoldertype_Response::setBEzsignfoldertypeReassigngroup(const bool &b_ezsignfoldertype_reassigngroup) {
    m_b_ezsignfoldertype_reassigngroup = b_ezsignfoldertype_reassigngroup;
    m_b_ezsignfoldertype_reassigngroup_isSet = true;
}

bool Custom_Ezsignfoldertype_Response::is_b_ezsignfoldertype_reassigngroup_Set() const{
    return m_b_ezsignfoldertype_reassigngroup_isSet;
}

bool Custom_Ezsignfoldertype_Response::is_b_ezsignfoldertype_reassigngroup_Valid() const{
    return m_b_ezsignfoldertype_reassigngroup_isValid;
}

qint32 Custom_Ezsignfoldertype_Response::getIEzsignfoldertypeDeadlinedays() const {
    return m_i_ezsignfoldertype_deadlinedays;
}
void Custom_Ezsignfoldertype_Response::setIEzsignfoldertypeDeadlinedays(const qint32 &i_ezsignfoldertype_deadlinedays) {
    m_i_ezsignfoldertype_deadlinedays = i_ezsignfoldertype_deadlinedays;
    m_i_ezsignfoldertype_deadlinedays_isSet = true;
}

bool Custom_Ezsignfoldertype_Response::is_i_ezsignfoldertype_deadlinedays_Set() const{
    return m_i_ezsignfoldertype_deadlinedays_isSet;
}

bool Custom_Ezsignfoldertype_Response::is_i_ezsignfoldertype_deadlinedays_Valid() const{
    return m_i_ezsignfoldertype_deadlinedays_isValid;
}

qint32 Custom_Ezsignfoldertype_Response::getIEzsignfoldertypeFontsizeannotation() const {
    return m_i_ezsignfoldertype_fontsizeannotation;
}
void Custom_Ezsignfoldertype_Response::setIEzsignfoldertypeFontsizeannotation(const qint32 &i_ezsignfoldertype_fontsizeannotation) {
    m_i_ezsignfoldertype_fontsizeannotation = i_ezsignfoldertype_fontsizeannotation;
    m_i_ezsignfoldertype_fontsizeannotation_isSet = true;
}

bool Custom_Ezsignfoldertype_Response::is_i_ezsignfoldertype_fontsizeannotation_Set() const{
    return m_i_ezsignfoldertype_fontsizeannotation_isSet;
}

bool Custom_Ezsignfoldertype_Response::is_i_ezsignfoldertype_fontsizeannotation_Valid() const{
    return m_i_ezsignfoldertype_fontsizeannotation_isValid;
}

qint32 Custom_Ezsignfoldertype_Response::getIEzsignfoldertypeFontsizeformfield() const {
    return m_i_ezsignfoldertype_fontsizeformfield;
}
void Custom_Ezsignfoldertype_Response::setIEzsignfoldertypeFontsizeformfield(const qint32 &i_ezsignfoldertype_fontsizeformfield) {
    m_i_ezsignfoldertype_fontsizeformfield = i_ezsignfoldertype_fontsizeformfield;
    m_i_ezsignfoldertype_fontsizeformfield_isSet = true;
}

bool Custom_Ezsignfoldertype_Response::is_i_ezsignfoldertype_fontsizeformfield_Set() const{
    return m_i_ezsignfoldertype_fontsizeformfield_isSet;
}

bool Custom_Ezsignfoldertype_Response::is_i_ezsignfoldertype_fontsizeformfield_Valid() const{
    return m_i_ezsignfoldertype_fontsizeformfield_isValid;
}

bool Custom_Ezsignfoldertype_Response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_pki_ezsignfoldertype_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fki_font_id_annotation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fki_font_id_formfield_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fki_font_id_signature_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s_ezsignfoldertype_name_x_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_b_ezsignfoldertype_sendproofezsignsigner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_b_ezsignfoldertype_allowdownloadattachmentezsignsigner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_b_ezsignfoldertype_allowdownloadproofezsignsigner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_b_ezsignfoldertype_automaticsignature_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_b_ezsignfoldertype_delegate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_b_ezsignfoldertype_discussion_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_b_ezsignfoldertype_reassignezsignsigner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_b_ezsignfoldertype_reassignuser_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_b_ezsignfoldertype_reassigngroup_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_i_ezsignfoldertype_deadlinedays_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_i_ezsignfoldertype_fontsizeannotation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_i_ezsignfoldertype_fontsizeformfield_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool Custom_Ezsignfoldertype_Response::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_pki_ezsignfoldertype_id_isValid && true;
}

} // namespace Ezmaxapi
