/**
 * eZmax API Definition
 * This API expose all the functionnalities for the eZmax and eZsign application.  We provide SDKs for customers. They are generated using OpenAPI codegen, we encourage customers to use them as we also provide samples for them.  You can choose to build your own implementation manually or can use any compatible OpenAPI 3.0 generator like Swagger Codegen, OpenAPI codegen or any commercial generators.  If you need helping understanding how to use this API, don't waste too much time looking for it. Contact support-api@ezmax.ca, we're here to help. We are developpers so we know programmers don't like bad documentation. If you don't find what you need in the documentation, let us know, we'll improve it and put you rapidly up on track.
 *
 * The version of the OpenAPI document: 1.0.28
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIObjectEzsignfoldersignerassociationApi.h"
#include "OAIHelpers.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIObjectEzsignfoldersignerassociationApi::OAIObjectEzsignfoldersignerassociationApi(const QString &scheme, const QString &host, int port, const QString &basePath, const int timeOut)
    : _scheme(scheme),
      _host(host),
      _port(port),
      _basePath(basePath),
      _timeOut(timeOut),
      _manager(nullptr),
      isResponseCompressionEnabled(false),
      isRequestCompressionEnabled(false) {
      initializeServerConfigs();
      }

OAIObjectEzsignfoldersignerassociationApi::~OAIObjectEzsignfoldersignerassociationApi() {
}

void OAIObjectEzsignfoldersignerassociationApi::initializeServerConfigs(){

//Default server
QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
//varying endpoint server 
QList<OAIServerConfiguration> serverConf = QList<OAIServerConfiguration>();
defaultConf.append(OAIServerConfiguration(
    "https://{sInfrastructureenvironmenttypeDescription}.api.appcluster01.{sInfrastructureregionCode}.ezmax.com/rest",
    "The server endpoint where to send your API requests.",
    QMap<QString, OAIServerVariable>{ 
    {"sInfrastructureenvironmenttypeDescription", OAIServerVariable("The environment on on which to call the API. Should always be "prod" unless instructed otherwise by support.","prod",
    QSet<QString>{ {"prod"},{"stg"},{"qa"},{"dev"} })},
    
    {"sInfrastructureregionCode", OAIServerVariable("The region where your services are hosted.","ca-central-1",
    QSet<QString>{ {"ca-central-1"},{"local"} })}, }));
    
_serverConfigs.insert("ezsignfoldersignerassociationCreateObjectV1",defaultConf);
_serverIndices.insert("ezsignfoldersignerassociationCreateObjectV1",0);

_serverConfigs.insert("ezsignfoldersignerassociationDeleteObjectV1",defaultConf);
_serverIndices.insert("ezsignfoldersignerassociationDeleteObjectV1",0);

_serverConfigs.insert("ezsignfoldersignerassociationEditObjectV1",defaultConf);
_serverIndices.insert("ezsignfoldersignerassociationEditObjectV1",0);

_serverConfigs.insert("ezsignfoldersignerassociationGetInPersonLoginUrlV1",defaultConf);
_serverIndices.insert("ezsignfoldersignerassociationGetInPersonLoginUrlV1",0);

_serverConfigs.insert("ezsignfoldersignerassociationGetObjectGetChildrenV1",defaultConf);
_serverIndices.insert("ezsignfoldersignerassociationGetObjectGetChildrenV1",0);

_serverConfigs.insert("ezsignfoldersignerassociationGetObjectV1",defaultConf);
_serverIndices.insert("ezsignfoldersignerassociationGetObjectV1",0);


}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found 
*/
int OAIObjectEzsignfoldersignerassociationApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value){
    auto it = _serverConfigs.find(operation);
    if(it != _serverConfigs.end() && serverIndex < it.value().size() ){
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIObjectEzsignfoldersignerassociationApi::setServerIndex(const QString &operation, int serverIndex){
    if(_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size() )
        _serverIndices[operation] = serverIndex;
}

void OAIObjectEzsignfoldersignerassociationApi::setScheme(const QString &scheme) {
    _scheme = scheme;
}

void OAIObjectEzsignfoldersignerassociationApi::setHost(const QString &host) {
    _host = host;
}

void OAIObjectEzsignfoldersignerassociationApi::setPort(int port) {
    _port = port;
}

void OAIObjectEzsignfoldersignerassociationApi::setApiKey(const QString &apiKeyName, const QString &apiKey){
    _apiKeys.insert(apiKeyName,apiKey);
}

void OAIObjectEzsignfoldersignerassociationApi::setBearerToken(const QString &token){
    _bearerToken = token;
}

void OAIObjectEzsignfoldersignerassociationApi::setUsername(const QString &username) {
    _username = username;
}

void OAIObjectEzsignfoldersignerassociationApi::setPassword(const QString &password) {
    _password = password;
}

void OAIObjectEzsignfoldersignerassociationApi::setBasePath(const QString &basePath) {
    _basePath = basePath;
}

void OAIObjectEzsignfoldersignerassociationApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIObjectEzsignfoldersignerassociationApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIObjectEzsignfoldersignerassociationApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;  
}

void OAIObjectEzsignfoldersignerassociationApi::addHeaders(const QString &key, const QString &value) {
    defaultHeaders.insert(key, value);
}

void OAIObjectEzsignfoldersignerassociationApi::enableRequestCompression() {
    isRequestCompressionEnabled = true;
}

void OAIObjectEzsignfoldersignerassociationApi::enableResponseCompression() {
    isResponseCompressionEnabled = true;
}

void OAIObjectEzsignfoldersignerassociationApi::abortRequests(){
    emit abortRequestsSignal();
}

void OAIObjectEzsignfoldersignerassociationApi::ezsignfoldersignerassociationCreateObjectV1(const QList<OAIEzsignfoldersignerassociation_createObject_v1_Request> &oai_ezsignfoldersignerassociation_create_object_v1_request) {
    QString fullPath = QString(_serverConfigs["ezsignfoldersignerassociationCreateObjectV1"][_serverIndices.value("ezsignfoldersignerassociationCreateObjectV1")].URL()+"/1/object/ezsignfoldersignerassociation");

    if(_apiKeys.contains("Authorization")){
        addHeaders("Authorization",_apiKeys.find("Authorization").value());
    }
    

    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    QJsonDocument doc(::OpenAPI::toJsonValue(oai_ezsignfoldersignerassociation_create_object_v1_request).toArray());
    QByteArray bytes = doc.toJson();
    input.request_body.append(bytes);

    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIObjectEzsignfoldersignerassociationApi::ezsignfoldersignerassociationCreateObjectV1Callback);
    connect(this, &OAIObjectEzsignfoldersignerassociationApi::abortRequestsSignal, worker, &QObject::deleteLater); 
    worker->execute(&input);
}

void OAIObjectEzsignfoldersignerassociationApi::ezsignfoldersignerassociationCreateObjectV1Callback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    OAIEzsignfoldersignerassociation_createObject_v1_Response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit ezsignfoldersignerassociationCreateObjectV1Signal(output);
        emit ezsignfoldersignerassociationCreateObjectV1SignalFull(worker, output);
    } else {
        emit ezsignfoldersignerassociationCreateObjectV1SignalE(output, error_type, error_str);
        emit ezsignfoldersignerassociationCreateObjectV1SignalEFull(worker, error_type, error_str);
    }
}

void OAIObjectEzsignfoldersignerassociationApi::ezsignfoldersignerassociationDeleteObjectV1(const qint32 &pki_ezsignfoldersignerassociation_id) {
    QString fullPath = QString(_serverConfigs["ezsignfoldersignerassociationDeleteObjectV1"][_serverIndices.value("ezsignfoldersignerassociationDeleteObjectV1")].URL()+"/1/object/ezsignfoldersignerassociation/{pkiEzsignfoldersignerassociationID}");
    QString pki_ezsignfoldersignerassociation_idPathParam("{");
    pki_ezsignfoldersignerassociation_idPathParam.append("pkiEzsignfoldersignerassociationID").append("}");
    fullPath.replace(pki_ezsignfoldersignerassociation_idPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(pki_ezsignfoldersignerassociation_id)));
    
    if(_apiKeys.contains("Authorization")){
        addHeaders("Authorization",_apiKeys.find("Authorization").value());
    }
    

    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");

    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIObjectEzsignfoldersignerassociationApi::ezsignfoldersignerassociationDeleteObjectV1Callback);
    connect(this, &OAIObjectEzsignfoldersignerassociationApi::abortRequestsSignal, worker, &QObject::deleteLater); 
    worker->execute(&input);
}

void OAIObjectEzsignfoldersignerassociationApi::ezsignfoldersignerassociationDeleteObjectV1Callback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    OAIEzsignfoldersignerassociation_deleteObject_v1_Response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit ezsignfoldersignerassociationDeleteObjectV1Signal(output);
        emit ezsignfoldersignerassociationDeleteObjectV1SignalFull(worker, output);
    } else {
        emit ezsignfoldersignerassociationDeleteObjectV1SignalE(output, error_type, error_str);
        emit ezsignfoldersignerassociationDeleteObjectV1SignalEFull(worker, error_type, error_str);
    }
}

void OAIObjectEzsignfoldersignerassociationApi::ezsignfoldersignerassociationEditObjectV1(const qint32 &pki_ezsignfoldersignerassociation_id, const OAIEzsignfoldersignerassociation_editObject_v1_Request &oai_ezsignfoldersignerassociation_edit_object_v1_request) {
    QString fullPath = QString(_serverConfigs["ezsignfoldersignerassociationEditObjectV1"][_serverIndices.value("ezsignfoldersignerassociationEditObjectV1")].URL()+"/1/object/ezsignfoldersignerassociation/{pkiEzsignfoldersignerassociationID}");
    QString pki_ezsignfoldersignerassociation_idPathParam("{");
    pki_ezsignfoldersignerassociation_idPathParam.append("pkiEzsignfoldersignerassociationID").append("}");
    fullPath.replace(pki_ezsignfoldersignerassociation_idPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(pki_ezsignfoldersignerassociation_id)));
    
    if(_apiKeys.contains("Authorization")){
        addHeaders("Authorization",_apiKeys.find("Authorization").value());
    }
    

    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    QByteArray output = oai_ezsignfoldersignerassociation_edit_object_v1_request.asJson().toUtf8();
    input.request_body.append(output);

    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIObjectEzsignfoldersignerassociationApi::ezsignfoldersignerassociationEditObjectV1Callback);
    connect(this, &OAIObjectEzsignfoldersignerassociationApi::abortRequestsSignal, worker, &QObject::deleteLater); 
    worker->execute(&input);
}

void OAIObjectEzsignfoldersignerassociationApi::ezsignfoldersignerassociationEditObjectV1Callback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    OAIEzsignfoldersignerassociation_editObject_v1_Response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit ezsignfoldersignerassociationEditObjectV1Signal(output);
        emit ezsignfoldersignerassociationEditObjectV1SignalFull(worker, output);
    } else {
        emit ezsignfoldersignerassociationEditObjectV1SignalE(output, error_type, error_str);
        emit ezsignfoldersignerassociationEditObjectV1SignalEFull(worker, error_type, error_str);
    }
}

void OAIObjectEzsignfoldersignerassociationApi::ezsignfoldersignerassociationGetInPersonLoginUrlV1(const qint32 &pki_ezsignfoldersignerassociation_id) {
    QString fullPath = QString(_serverConfigs["ezsignfoldersignerassociationGetInPersonLoginUrlV1"][_serverIndices.value("ezsignfoldersignerassociationGetInPersonLoginUrlV1")].URL()+"/1/object/ezsignfoldersignerassociation/{pkiEzsignfoldersignerassociationID}/getInPersonLoginUrl");
    QString pki_ezsignfoldersignerassociation_idPathParam("{");
    pki_ezsignfoldersignerassociation_idPathParam.append("pkiEzsignfoldersignerassociationID").append("}");
    fullPath.replace(pki_ezsignfoldersignerassociation_idPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(pki_ezsignfoldersignerassociation_id)));
    
    if(_apiKeys.contains("Authorization")){
        addHeaders("Authorization",_apiKeys.find("Authorization").value());
    }
    

    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");

    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIObjectEzsignfoldersignerassociationApi::ezsignfoldersignerassociationGetInPersonLoginUrlV1Callback);
    connect(this, &OAIObjectEzsignfoldersignerassociationApi::abortRequestsSignal, worker, &QObject::deleteLater); 
    worker->execute(&input);
}

void OAIObjectEzsignfoldersignerassociationApi::ezsignfoldersignerassociationGetInPersonLoginUrlV1Callback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    OAIEzsignfoldersignerassociation_getInPersonLoginUrl_v1_Response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit ezsignfoldersignerassociationGetInPersonLoginUrlV1Signal(output);
        emit ezsignfoldersignerassociationGetInPersonLoginUrlV1SignalFull(worker, output);
    } else {
        emit ezsignfoldersignerassociationGetInPersonLoginUrlV1SignalE(output, error_type, error_str);
        emit ezsignfoldersignerassociationGetInPersonLoginUrlV1SignalEFull(worker, error_type, error_str);
    }
}

void OAIObjectEzsignfoldersignerassociationApi::ezsignfoldersignerassociationGetObjectGetChildrenV1(const qint32 &pki_ezsignfoldersignerassociation_id) {
    QString fullPath = QString(_serverConfigs["ezsignfoldersignerassociationGetObjectGetChildrenV1"][_serverIndices.value("ezsignfoldersignerassociationGetObjectGetChildrenV1")].URL()+"/1/object/ezsignfoldersignerassociation/{pkiEzsignfoldersignerassociationID}/getChildren");
    QString pki_ezsignfoldersignerassociation_idPathParam("{");
    pki_ezsignfoldersignerassociation_idPathParam.append("pkiEzsignfoldersignerassociationID").append("}");
    fullPath.replace(pki_ezsignfoldersignerassociation_idPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(pki_ezsignfoldersignerassociation_id)));
    
    if(_apiKeys.contains("Authorization")){
        addHeaders("Authorization",_apiKeys.find("Authorization").value());
    }
    

    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");

    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIObjectEzsignfoldersignerassociationApi::ezsignfoldersignerassociationGetObjectGetChildrenV1Callback);
    connect(this, &OAIObjectEzsignfoldersignerassociationApi::abortRequestsSignal, worker, &QObject::deleteLater); 
    worker->execute(&input);
}

void OAIObjectEzsignfoldersignerassociationApi::ezsignfoldersignerassociationGetObjectGetChildrenV1Callback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit ezsignfoldersignerassociationGetObjectGetChildrenV1Signal();
        emit ezsignfoldersignerassociationGetObjectGetChildrenV1SignalFull(worker);
    } else {
        emit ezsignfoldersignerassociationGetObjectGetChildrenV1SignalE(error_type, error_str);
        emit ezsignfoldersignerassociationGetObjectGetChildrenV1SignalEFull(worker, error_type, error_str);
    }
}

void OAIObjectEzsignfoldersignerassociationApi::ezsignfoldersignerassociationGetObjectV1(const qint32 &pki_ezsignfoldersignerassociation_id) {
    QString fullPath = QString(_serverConfigs["ezsignfoldersignerassociationGetObjectV1"][_serverIndices.value("ezsignfoldersignerassociationGetObjectV1")].URL()+"/1/object/ezsignfoldersignerassociation/{pkiEzsignfoldersignerassociationID}");
    QString pki_ezsignfoldersignerassociation_idPathParam("{");
    pki_ezsignfoldersignerassociation_idPathParam.append("pkiEzsignfoldersignerassociationID").append("}");
    fullPath.replace(pki_ezsignfoldersignerassociation_idPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(pki_ezsignfoldersignerassociation_id)));
    
    if(_apiKeys.contains("Authorization")){
        addHeaders("Authorization",_apiKeys.find("Authorization").value());
    }
    

    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");

    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIObjectEzsignfoldersignerassociationApi::ezsignfoldersignerassociationGetObjectV1Callback);
    connect(this, &OAIObjectEzsignfoldersignerassociationApi::abortRequestsSignal, worker, &QObject::deleteLater); 
    worker->execute(&input);
}

void OAIObjectEzsignfoldersignerassociationApi::ezsignfoldersignerassociationGetObjectV1Callback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    OAIEzsignfoldersignerassociation_getObject_v1_Response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit ezsignfoldersignerassociationGetObjectV1Signal(output);
        emit ezsignfoldersignerassociationGetObjectV1SignalFull(worker, output);
    } else {
        emit ezsignfoldersignerassociationGetObjectV1SignalE(output, error_type, error_str);
        emit ezsignfoldersignerassociationGetObjectV1SignalEFull(worker, error_type, error_str);
    }
}

} // namespace OpenAPI
