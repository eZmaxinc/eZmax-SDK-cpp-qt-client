/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Discussionmessage_Response.h
 *
 * A Discussionmessage Object
 */

#ifndef Discussionmessage_Response_H
#define Discussionmessage_Response_H

#include <QJsonObject>

#include "Common_Audit.h"
#include "Field_eDiscussionmessageStatus.h"
#include <QString>

#include "Enum.h"
#include "Object.h"

namespace Ezmaxapi {
class Common_Audit;

class Discussionmessage_Response : public Object {
public:
    Discussionmessage_Response();
    Discussionmessage_Response(QString json);
    ~Discussionmessage_Response() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getPkiDiscussionmessageId() const;
    void setPkiDiscussionmessageId(const qint32 &pki_discussionmessage_id);
    bool is_pki_discussionmessage_id_Set() const;
    bool is_pki_discussionmessage_id_Valid() const;

    qint32 getFkiDiscussionId() const;
    void setFkiDiscussionId(const qint32 &fki_discussion_id);
    bool is_fki_discussion_id_Set() const;
    bool is_fki_discussion_id_Valid() const;

    qint32 getFkiDiscussionmembershipId() const;
    void setFkiDiscussionmembershipId(const qint32 &fki_discussionmembership_id);
    bool is_fki_discussionmembership_id_Set() const;
    bool is_fki_discussionmembership_id_Valid() const;

    qint32 getFkiDiscussionmembershipIdActionrequired() const;
    void setFkiDiscussionmembershipIdActionrequired(const qint32 &fki_discussionmembership_id_actionrequired);
    bool is_fki_discussionmembership_id_actionrequired_Set() const;
    bool is_fki_discussionmembership_id_actionrequired_Valid() const;

    Field_eDiscussionmessageStatus getEDiscussionmessageStatus() const;
    void setEDiscussionmessageStatus(const Field_eDiscussionmessageStatus &e_discussionmessage_status);
    bool is_e_discussionmessage_status_Set() const;
    bool is_e_discussionmessage_status_Valid() const;

    QString getTDiscussionmessageContent() const;
    void setTDiscussionmessageContent(const QString &t_discussionmessage_content);
    bool is_t_discussionmessage_content_Set() const;
    bool is_t_discussionmessage_content_Valid() const;

    QString getSDiscussionmessageCreatorname() const;
    void setSDiscussionmessageCreatorname(const QString &s_discussionmessage_creatorname);
    bool is_s_discussionmessage_creatorname_Set() const;
    bool is_s_discussionmessage_creatorname_Valid() const;

    QString getSDiscussionmessageActionrequiredname() const;
    void setSDiscussionmessageActionrequiredname(const QString &s_discussionmessage_actionrequiredname);
    bool is_s_discussionmessage_actionrequiredname_Set() const;
    bool is_s_discussionmessage_actionrequiredname_Valid() const;

    Common_Audit getObjAudit() const;
    void setObjAudit(const Common_Audit &obj_audit);
    bool is_obj_audit_Set() const;
    bool is_obj_audit_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_pki_discussionmessage_id;
    bool m_pki_discussionmessage_id_isSet;
    bool m_pki_discussionmessage_id_isValid;

    qint32 m_fki_discussion_id;
    bool m_fki_discussion_id_isSet;
    bool m_fki_discussion_id_isValid;

    qint32 m_fki_discussionmembership_id;
    bool m_fki_discussionmembership_id_isSet;
    bool m_fki_discussionmembership_id_isValid;

    qint32 m_fki_discussionmembership_id_actionrequired;
    bool m_fki_discussionmembership_id_actionrequired_isSet;
    bool m_fki_discussionmembership_id_actionrequired_isValid;

    Field_eDiscussionmessageStatus m_e_discussionmessage_status;
    bool m_e_discussionmessage_status_isSet;
    bool m_e_discussionmessage_status_isValid;

    QString m_t_discussionmessage_content;
    bool m_t_discussionmessage_content_isSet;
    bool m_t_discussionmessage_content_isValid;

    QString m_s_discussionmessage_creatorname;
    bool m_s_discussionmessage_creatorname_isSet;
    bool m_s_discussionmessage_creatorname_isValid;

    QString m_s_discussionmessage_actionrequiredname;
    bool m_s_discussionmessage_actionrequiredname_isSet;
    bool m_s_discussionmessage_actionrequiredname_isValid;

    Common_Audit m_obj_audit;
    bool m_obj_audit_isSet;
    bool m_obj_audit_isValid;
};

} // namespace Ezmaxapi

Q_DECLARE_METATYPE(Ezmaxapi::Discussionmessage_Response)

#endif // Discussionmessage_Response_H
