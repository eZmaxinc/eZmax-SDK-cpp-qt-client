/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "Attachmentlog_ResponseCompound.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "Helpers.h"

namespace Ezmaxapi {

Attachmentlog_ResponseCompound::Attachmentlog_ResponseCompound(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

Attachmentlog_ResponseCompound::Attachmentlog_ResponseCompound() {
    this->initializeModel();
}

Attachmentlog_ResponseCompound::~Attachmentlog_ResponseCompound() {}

void Attachmentlog_ResponseCompound::initializeModel() {

    m_fki_attachment_id_isSet = false;
    m_fki_attachment_id_isValid = false;

    m_fki_user_id_isSet = false;
    m_fki_user_id_isValid = false;

    m_dt_attachmentlog_datetime_isSet = false;
    m_dt_attachmentlog_datetime_isValid = false;

    m_e_attachmentlog_type_isSet = false;
    m_e_attachmentlog_type_isValid = false;

    m_s_attachmentlog_detail_isSet = false;
    m_s_attachmentlog_detail_isValid = false;
}

void Attachmentlog_ResponseCompound::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void Attachmentlog_ResponseCompound::fromJsonObject(QJsonObject json) {

    m_fki_attachment_id_isValid = ::Ezmaxapi::fromJsonValue(m_fki_attachment_id, json[QString("fkiAttachmentID")]);
    m_fki_attachment_id_isSet = !json[QString("fkiAttachmentID")].isNull() && m_fki_attachment_id_isValid;

    m_fki_user_id_isValid = ::Ezmaxapi::fromJsonValue(m_fki_user_id, json[QString("fkiUserID")]);
    m_fki_user_id_isSet = !json[QString("fkiUserID")].isNull() && m_fki_user_id_isValid;

    m_dt_attachmentlog_datetime_isValid = ::Ezmaxapi::fromJsonValue(m_dt_attachmentlog_datetime, json[QString("dtAttachmentlogDatetime")]);
    m_dt_attachmentlog_datetime_isSet = !json[QString("dtAttachmentlogDatetime")].isNull() && m_dt_attachmentlog_datetime_isValid;

    m_e_attachmentlog_type_isValid = ::Ezmaxapi::fromJsonValue(m_e_attachmentlog_type, json[QString("eAttachmentlogType")]);
    m_e_attachmentlog_type_isSet = !json[QString("eAttachmentlogType")].isNull() && m_e_attachmentlog_type_isValid;

    m_s_attachmentlog_detail_isValid = ::Ezmaxapi::fromJsonValue(m_s_attachmentlog_detail, json[QString("sAttachmentlogDetail")]);
    m_s_attachmentlog_detail_isSet = !json[QString("sAttachmentlogDetail")].isNull() && m_s_attachmentlog_detail_isValid;
}

QString Attachmentlog_ResponseCompound::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject Attachmentlog_ResponseCompound::asJsonObject() const {
    QJsonObject obj;
    if (m_fki_attachment_id_isSet) {
        obj.insert(QString("fkiAttachmentID"), ::Ezmaxapi::toJsonValue(m_fki_attachment_id));
    }
    if (m_fki_user_id_isSet) {
        obj.insert(QString("fkiUserID"), ::Ezmaxapi::toJsonValue(m_fki_user_id));
    }
    if (m_dt_attachmentlog_datetime_isSet) {
        obj.insert(QString("dtAttachmentlogDatetime"), ::Ezmaxapi::toJsonValue(m_dt_attachmentlog_datetime));
    }
    if (m_e_attachmentlog_type.isSet()) {
        obj.insert(QString("eAttachmentlogType"), ::Ezmaxapi::toJsonValue(m_e_attachmentlog_type));
    }
    if (m_s_attachmentlog_detail_isSet) {
        obj.insert(QString("sAttachmentlogDetail"), ::Ezmaxapi::toJsonValue(m_s_attachmentlog_detail));
    }
    return obj;
}

qint32 Attachmentlog_ResponseCompound::getFkiAttachmentId() const {
    return m_fki_attachment_id;
}
void Attachmentlog_ResponseCompound::setFkiAttachmentId(const qint32 &fki_attachment_id) {
    m_fki_attachment_id = fki_attachment_id;
    m_fki_attachment_id_isSet = true;
}

bool Attachmentlog_ResponseCompound::is_fki_attachment_id_Set() const{
    return m_fki_attachment_id_isSet;
}

bool Attachmentlog_ResponseCompound::is_fki_attachment_id_Valid() const{
    return m_fki_attachment_id_isValid;
}

qint32 Attachmentlog_ResponseCompound::getFkiUserId() const {
    return m_fki_user_id;
}
void Attachmentlog_ResponseCompound::setFkiUserId(const qint32 &fki_user_id) {
    m_fki_user_id = fki_user_id;
    m_fki_user_id_isSet = true;
}

bool Attachmentlog_ResponseCompound::is_fki_user_id_Set() const{
    return m_fki_user_id_isSet;
}

bool Attachmentlog_ResponseCompound::is_fki_user_id_Valid() const{
    return m_fki_user_id_isValid;
}

QString Attachmentlog_ResponseCompound::getDtAttachmentlogDatetime() const {
    return m_dt_attachmentlog_datetime;
}
void Attachmentlog_ResponseCompound::setDtAttachmentlogDatetime(const QString &dt_attachmentlog_datetime) {
    m_dt_attachmentlog_datetime = dt_attachmentlog_datetime;
    m_dt_attachmentlog_datetime_isSet = true;
}

bool Attachmentlog_ResponseCompound::is_dt_attachmentlog_datetime_Set() const{
    return m_dt_attachmentlog_datetime_isSet;
}

bool Attachmentlog_ResponseCompound::is_dt_attachmentlog_datetime_Valid() const{
    return m_dt_attachmentlog_datetime_isValid;
}

Field_eAttachmentlogType Attachmentlog_ResponseCompound::getEAttachmentlogType() const {
    return m_e_attachmentlog_type;
}
void Attachmentlog_ResponseCompound::setEAttachmentlogType(const Field_eAttachmentlogType &e_attachmentlog_type) {
    m_e_attachmentlog_type = e_attachmentlog_type;
    m_e_attachmentlog_type_isSet = true;
}

bool Attachmentlog_ResponseCompound::is_e_attachmentlog_type_Set() const{
    return m_e_attachmentlog_type_isSet;
}

bool Attachmentlog_ResponseCompound::is_e_attachmentlog_type_Valid() const{
    return m_e_attachmentlog_type_isValid;
}

QString Attachmentlog_ResponseCompound::getSAttachmentlogDetail() const {
    return m_s_attachmentlog_detail;
}
void Attachmentlog_ResponseCompound::setSAttachmentlogDetail(const QString &s_attachmentlog_detail) {
    m_s_attachmentlog_detail = s_attachmentlog_detail;
    m_s_attachmentlog_detail_isSet = true;
}

bool Attachmentlog_ResponseCompound::is_s_attachmentlog_detail_Set() const{
    return m_s_attachmentlog_detail_isSet;
}

bool Attachmentlog_ResponseCompound::is_s_attachmentlog_detail_Valid() const{
    return m_s_attachmentlog_detail_isValid;
}

bool Attachmentlog_ResponseCompound::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_fki_attachment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fki_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dt_attachmentlog_datetime_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_e_attachmentlog_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_s_attachmentlog_detail_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool Attachmentlog_ResponseCompound::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_fki_attachment_id_isValid && m_fki_user_id_isValid && m_dt_attachmentlog_datetime_isValid && m_e_attachmentlog_type_isValid && true;
}

} // namespace Ezmaxapi
