/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.18
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApikey_Request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApikey_Request::OAIApikey_Request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApikey_Request::OAIApikey_Request() {
    this->initializeModel();
}

OAIApikey_Request::~OAIApikey_Request() {}

void OAIApikey_Request::initializeModel() {

    m_pki_apikey_id_isSet = false;
    m_pki_apikey_id_isValid = false;

    m_fki_user_id_isSet = false;
    m_fki_user_id_isValid = false;

    m_obj_apikey_description_isSet = false;
    m_obj_apikey_description_isValid = false;

    m_b_apikey_isactive_isSet = false;
    m_b_apikey_isactive_isValid = false;

    m_b_apikey_issigned_isSet = false;
    m_b_apikey_issigned_isValid = false;
}

void OAIApikey_Request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApikey_Request::fromJsonObject(QJsonObject json) {

    m_pki_apikey_id_isValid = ::OpenAPI::fromJsonValue(pki_apikey_id, json[QString("pkiApikeyID")]);
    m_pki_apikey_id_isSet = !json[QString("pkiApikeyID")].isNull() && m_pki_apikey_id_isValid;

    m_fki_user_id_isValid = ::OpenAPI::fromJsonValue(fki_user_id, json[QString("fkiUserID")]);
    m_fki_user_id_isSet = !json[QString("fkiUserID")].isNull() && m_fki_user_id_isValid;

    m_obj_apikey_description_isValid = ::OpenAPI::fromJsonValue(obj_apikey_description, json[QString("objApikeyDescription")]);
    m_obj_apikey_description_isSet = !json[QString("objApikeyDescription")].isNull() && m_obj_apikey_description_isValid;

    m_b_apikey_isactive_isValid = ::OpenAPI::fromJsonValue(b_apikey_isactive, json[QString("bApikeyIsactive")]);
    m_b_apikey_isactive_isSet = !json[QString("bApikeyIsactive")].isNull() && m_b_apikey_isactive_isValid;

    m_b_apikey_issigned_isValid = ::OpenAPI::fromJsonValue(b_apikey_issigned, json[QString("bApikeyIssigned")]);
    m_b_apikey_issigned_isSet = !json[QString("bApikeyIssigned")].isNull() && m_b_apikey_issigned_isValid;
}

QString OAIApikey_Request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApikey_Request::asJsonObject() const {
    QJsonObject obj;
    if (m_pki_apikey_id_isSet) {
        obj.insert(QString("pkiApikeyID"), ::OpenAPI::toJsonValue(pki_apikey_id));
    }
    if (m_fki_user_id_isSet) {
        obj.insert(QString("fkiUserID"), ::OpenAPI::toJsonValue(fki_user_id));
    }
    if (obj_apikey_description.isSet()) {
        obj.insert(QString("objApikeyDescription"), ::OpenAPI::toJsonValue(obj_apikey_description));
    }
    if (m_b_apikey_isactive_isSet) {
        obj.insert(QString("bApikeyIsactive"), ::OpenAPI::toJsonValue(b_apikey_isactive));
    }
    if (m_b_apikey_issigned_isSet) {
        obj.insert(QString("bApikeyIssigned"), ::OpenAPI::toJsonValue(b_apikey_issigned));
    }
    return obj;
}

qint32 OAIApikey_Request::getPkiApikeyId() const {
    return pki_apikey_id;
}
void OAIApikey_Request::setPkiApikeyId(const qint32 &pki_apikey_id) {
    this->pki_apikey_id = pki_apikey_id;
    this->m_pki_apikey_id_isSet = true;
}

bool OAIApikey_Request::is_pki_apikey_id_Set() const{
    return m_pki_apikey_id_isSet;
}

bool OAIApikey_Request::is_pki_apikey_id_Valid() const{
    return m_pki_apikey_id_isValid;
}

qint32 OAIApikey_Request::getFkiUserId() const {
    return fki_user_id;
}
void OAIApikey_Request::setFkiUserId(const qint32 &fki_user_id) {
    this->fki_user_id = fki_user_id;
    this->m_fki_user_id_isSet = true;
}

bool OAIApikey_Request::is_fki_user_id_Set() const{
    return m_fki_user_id_isSet;
}

bool OAIApikey_Request::is_fki_user_id_Valid() const{
    return m_fki_user_id_isValid;
}

OAIMultilingual_ApikeyDescription OAIApikey_Request::getObjApikeyDescription() const {
    return obj_apikey_description;
}
void OAIApikey_Request::setObjApikeyDescription(const OAIMultilingual_ApikeyDescription &obj_apikey_description) {
    this->obj_apikey_description = obj_apikey_description;
    this->m_obj_apikey_description_isSet = true;
}

bool OAIApikey_Request::is_obj_apikey_description_Set() const{
    return m_obj_apikey_description_isSet;
}

bool OAIApikey_Request::is_obj_apikey_description_Valid() const{
    return m_obj_apikey_description_isValid;
}

bool OAIApikey_Request::isBApikeyIsactive() const {
    return b_apikey_isactive;
}
void OAIApikey_Request::setBApikeyIsactive(const bool &b_apikey_isactive) {
    this->b_apikey_isactive = b_apikey_isactive;
    this->m_b_apikey_isactive_isSet = true;
}

bool OAIApikey_Request::is_b_apikey_isactive_Set() const{
    return m_b_apikey_isactive_isSet;
}

bool OAIApikey_Request::is_b_apikey_isactive_Valid() const{
    return m_b_apikey_isactive_isValid;
}

bool OAIApikey_Request::isBApikeyIssigned() const {
    return b_apikey_issigned;
}
void OAIApikey_Request::setBApikeyIssigned(const bool &b_apikey_issigned) {
    this->b_apikey_issigned = b_apikey_issigned;
    this->m_b_apikey_issigned_isSet = true;
}

bool OAIApikey_Request::is_b_apikey_issigned_Set() const{
    return m_b_apikey_issigned_isSet;
}

bool OAIApikey_Request::is_b_apikey_issigned_Valid() const{
    return m_b_apikey_issigned_isValid;
}

bool OAIApikey_Request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_pki_apikey_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fki_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (obj_apikey_description.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_b_apikey_isactive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_b_apikey_issigned_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApikey_Request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_fki_user_id_isValid && m_obj_apikey_description_isValid && true;
}

} // namespace OpenAPI
