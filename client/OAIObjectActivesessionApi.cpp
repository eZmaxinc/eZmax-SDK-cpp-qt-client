/**
 * eZmax API Definition
 * This API expose all the functionnalities for the eZmax and eZsign application.  We provide SDKs for customers. They are generated using OpenAPI codegen, we encourage customers to use them as we also provide samples for them.  You can choose to build your own implementation manually or can use any compatible OpenAPI 3.0 generator like Swagger Codegen, OpenAPI codegen or any commercial generators.  If you need helping understanding how to use this API, don't waste too much time looking for it. Contact support-api@ezmax.ca, we're here to help. We are developpers so we know programmers don't like bad documentation. If you don't find what you need in the documentation, let us know, we'll improve it and put you rapidly up on track.
 *
 * The version of the OpenAPI document: 1.0.28
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIObjectActivesessionApi.h"
#include "OAIHelpers.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIObjectActivesessionApi::OAIObjectActivesessionApi(const QString &scheme, const QString &host, int port, const QString &basePath, const int timeOut)
    : _scheme(scheme),
      _host(host),
      _port(port),
      _basePath(basePath),
      _timeOut(timeOut),
      _manager(nullptr),
      isResponseCompressionEnabled(false),
      isRequestCompressionEnabled(false) {
      initializeServerConfigs();
      }

OAIObjectActivesessionApi::~OAIObjectActivesessionApi() {
}

void OAIObjectActivesessionApi::initializeServerConfigs(){

//Default server
QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
//varying endpoint server 
QList<OAIServerConfiguration> serverConf = QList<OAIServerConfiguration>();
defaultConf.append(OAIServerConfiguration(
    "https://{sInfrastructureenvironmenttypeDescription}.api.appcluster01.{sInfrastructureregionCode}.ezmax.com/rest",
    "The server endpoint where to send your API requests.",
    QMap<QString, OAIServerVariable>{ 
    {"sInfrastructureenvironmenttypeDescription", OAIServerVariable("The environment on on which to call the API. Should always be "prod" unless instructed otherwise by support.","prod",
    QSet<QString>{ {"prod"},{"stg"},{"qa"},{"dev"} })},
    
    {"sInfrastructureregionCode", OAIServerVariable("The region where your services are hosted.","ca-central-1",
    QSet<QString>{ {"ca-central-1"},{"local"} })}, }));
    
_serverConfigs.insert("activesessionGetCurrentV1",defaultConf);
_serverIndices.insert("activesessionGetCurrentV1",0);


}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found 
*/
int OAIObjectActivesessionApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value){
    auto it = _serverConfigs.find(operation);
    if(it != _serverConfigs.end() && serverIndex < it.value().size() ){
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIObjectActivesessionApi::setServerIndex(const QString &operation, int serverIndex){
    if(_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size() )
        _serverIndices[operation] = serverIndex;
}

void OAIObjectActivesessionApi::setScheme(const QString &scheme) {
    _scheme = scheme;
}

void OAIObjectActivesessionApi::setHost(const QString &host) {
    _host = host;
}

void OAIObjectActivesessionApi::setPort(int port) {
    _port = port;
}

void OAIObjectActivesessionApi::setApiKey(const QString &apiKeyName, const QString &apiKey){
    _apiKeys.insert(apiKeyName,apiKey);
}

void OAIObjectActivesessionApi::setBearerToken(const QString &token){
    _bearerToken = token;
}

void OAIObjectActivesessionApi::setUsername(const QString &username) {
    _username = username;
}

void OAIObjectActivesessionApi::setPassword(const QString &password) {
    _password = password;
}

void OAIObjectActivesessionApi::setBasePath(const QString &basePath) {
    _basePath = basePath;
}

void OAIObjectActivesessionApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIObjectActivesessionApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIObjectActivesessionApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;  
}

void OAIObjectActivesessionApi::addHeaders(const QString &key, const QString &value) {
    defaultHeaders.insert(key, value);
}

void OAIObjectActivesessionApi::enableRequestCompression() {
    isRequestCompressionEnabled = true;
}

void OAIObjectActivesessionApi::enableResponseCompression() {
    isResponseCompressionEnabled = true;
}

void OAIObjectActivesessionApi::abortRequests(){
    emit abortRequestsSignal();
}

void OAIObjectActivesessionApi::activesessionGetCurrentV1() {
    QString fullPath = QString(_serverConfigs["activesessionGetCurrentV1"][_serverIndices.value("activesessionGetCurrentV1")].URL()+"/1/object/activesession/getCurrent");

    if(_apiKeys.contains("Authorization")){
        addHeaders("Authorization",_apiKeys.find("Authorization").value());
    }
    

    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");

    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIObjectActivesessionApi::activesessionGetCurrentV1Callback);
    connect(this, &OAIObjectActivesessionApi::abortRequestsSignal, worker, &QObject::deleteLater); 
    worker->execute(&input);
}

void OAIObjectActivesessionApi::activesessionGetCurrentV1Callback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    OAIActivesession_getCurrent_v1_Response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit activesessionGetCurrentV1Signal(output);
        emit activesessionGetCurrentV1SignalFull(worker, output);
    } else {
        emit activesessionGetCurrentV1SignalE(output, error_type, error_str);
        emit activesessionGetCurrentV1SignalEFull(worker, error_type, error_str);
    }
}

} // namespace OpenAPI
