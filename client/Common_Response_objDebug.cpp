/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "Common_Response_objDebug.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "Helpers.h"

namespace Ezmaxapi {

Common_Response_objDebug::Common_Response_objDebug(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

Common_Response_objDebug::Common_Response_objDebug() {
    this->initializeModel();
}

Common_Response_objDebug::~Common_Response_objDebug() {}

void Common_Response_objDebug::initializeModel() {

    m_s_memory_usage_isSet = false;
    m_s_memory_usage_isValid = false;

    m_s_run_time_isSet = false;
    m_s_run_time_isValid = false;

    m_i_sql_selects_isSet = false;
    m_i_sql_selects_isValid = false;

    m_i_sql_queries_isSet = false;
    m_i_sql_queries_isValid = false;

    m_a_obj_sql_query_isSet = false;
    m_a_obj_sql_query_isValid = false;
}

void Common_Response_objDebug::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void Common_Response_objDebug::fromJsonObject(QJsonObject json) {

    m_s_memory_usage_isValid = ::Ezmaxapi::fromJsonValue(m_s_memory_usage, json[QString("sMemoryUsage")]);
    m_s_memory_usage_isSet = !json[QString("sMemoryUsage")].isNull() && m_s_memory_usage_isValid;

    m_s_run_time_isValid = ::Ezmaxapi::fromJsonValue(m_s_run_time, json[QString("sRunTime")]);
    m_s_run_time_isSet = !json[QString("sRunTime")].isNull() && m_s_run_time_isValid;

    m_i_sql_selects_isValid = ::Ezmaxapi::fromJsonValue(m_i_sql_selects, json[QString("iSQLSelects")]);
    m_i_sql_selects_isSet = !json[QString("iSQLSelects")].isNull() && m_i_sql_selects_isValid;

    m_i_sql_queries_isValid = ::Ezmaxapi::fromJsonValue(m_i_sql_queries, json[QString("iSQLQueries")]);
    m_i_sql_queries_isSet = !json[QString("iSQLQueries")].isNull() && m_i_sql_queries_isValid;

    m_a_obj_sql_query_isValid = ::Ezmaxapi::fromJsonValue(m_a_obj_sql_query, json[QString("a_objSQLQuery")]);
    m_a_obj_sql_query_isSet = !json[QString("a_objSQLQuery")].isNull() && m_a_obj_sql_query_isValid;
}

QString Common_Response_objDebug::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject Common_Response_objDebug::asJsonObject() const {
    QJsonObject obj;
    if (m_s_memory_usage_isSet) {
        obj.insert(QString("sMemoryUsage"), ::Ezmaxapi::toJsonValue(m_s_memory_usage));
    }
    if (m_s_run_time_isSet) {
        obj.insert(QString("sRunTime"), ::Ezmaxapi::toJsonValue(m_s_run_time));
    }
    if (m_i_sql_selects_isSet) {
        obj.insert(QString("iSQLSelects"), ::Ezmaxapi::toJsonValue(m_i_sql_selects));
    }
    if (m_i_sql_queries_isSet) {
        obj.insert(QString("iSQLQueries"), ::Ezmaxapi::toJsonValue(m_i_sql_queries));
    }
    if (m_a_obj_sql_query.size() > 0) {
        obj.insert(QString("a_objSQLQuery"), ::Ezmaxapi::toJsonValue(m_a_obj_sql_query));
    }
    return obj;
}

QString Common_Response_objDebug::getSMemoryUsage() const {
    return m_s_memory_usage;
}
void Common_Response_objDebug::setSMemoryUsage(const QString &s_memory_usage) {
    m_s_memory_usage = s_memory_usage;
    m_s_memory_usage_isSet = true;
}

bool Common_Response_objDebug::is_s_memory_usage_Set() const{
    return m_s_memory_usage_isSet;
}

bool Common_Response_objDebug::is_s_memory_usage_Valid() const{
    return m_s_memory_usage_isValid;
}

QString Common_Response_objDebug::getSRunTime() const {
    return m_s_run_time;
}
void Common_Response_objDebug::setSRunTime(const QString &s_run_time) {
    m_s_run_time = s_run_time;
    m_s_run_time_isSet = true;
}

bool Common_Response_objDebug::is_s_run_time_Set() const{
    return m_s_run_time_isSet;
}

bool Common_Response_objDebug::is_s_run_time_Valid() const{
    return m_s_run_time_isValid;
}

qint32 Common_Response_objDebug::getISqlSelects() const {
    return m_i_sql_selects;
}
void Common_Response_objDebug::setISqlSelects(const qint32 &i_sql_selects) {
    m_i_sql_selects = i_sql_selects;
    m_i_sql_selects_isSet = true;
}

bool Common_Response_objDebug::is_i_sql_selects_Set() const{
    return m_i_sql_selects_isSet;
}

bool Common_Response_objDebug::is_i_sql_selects_Valid() const{
    return m_i_sql_selects_isValid;
}

qint32 Common_Response_objDebug::getISqlQueries() const {
    return m_i_sql_queries;
}
void Common_Response_objDebug::setISqlQueries(const qint32 &i_sql_queries) {
    m_i_sql_queries = i_sql_queries;
    m_i_sql_queries_isSet = true;
}

bool Common_Response_objDebug::is_i_sql_queries_Set() const{
    return m_i_sql_queries_isSet;
}

bool Common_Response_objDebug::is_i_sql_queries_Valid() const{
    return m_i_sql_queries_isValid;
}

QList<Common_Response_objSQLQuery> Common_Response_objDebug::getAObjSqlQuery() const {
    return m_a_obj_sql_query;
}
void Common_Response_objDebug::setAObjSqlQuery(const QList<Common_Response_objSQLQuery> &a_obj_sql_query) {
    m_a_obj_sql_query = a_obj_sql_query;
    m_a_obj_sql_query_isSet = true;
}

bool Common_Response_objDebug::is_a_obj_sql_query_Set() const{
    return m_a_obj_sql_query_isSet;
}

bool Common_Response_objDebug::is_a_obj_sql_query_Valid() const{
    return m_a_obj_sql_query_isValid;
}

bool Common_Response_objDebug::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_s_memory_usage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s_run_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_i_sql_selects_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_i_sql_queries_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_a_obj_sql_query.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool Common_Response_objDebug::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_s_memory_usage_isValid && m_s_run_time_isValid && m_i_sql_selects_isValid && m_i_sql_queries_isValid && m_a_obj_sql_query_isValid && true;
}

} // namespace Ezmaxapi
