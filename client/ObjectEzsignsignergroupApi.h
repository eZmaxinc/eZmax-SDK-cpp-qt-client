/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef _ObjectEzsignsignergroupApi_H
#define _ObjectEzsignsignergroupApi_H

#include "Helpers.h"
#include "HttpRequest.h"
#include "ServerConfiguration.h"
#include "Oauth.h"

#include "Common_Response_Error.h"
#include "Ezsignsignergroup_createObject_v1_Request.h"
#include "Ezsignsignergroup_createObject_v1_Response.h"
#include "Ezsignsignergroup_deleteObject_v1_Response.h"
#include "Ezsignsignergroup_editEzsignsignergroupmemberships_v1_Request.h"
#include "Ezsignsignergroup_editEzsignsignergroupmemberships_v1_Response.h"
#include "Ezsignsignergroup_editObject_v1_Request.h"
#include "Ezsignsignergroup_editObject_v1_Response.h"
#include "Ezsignsignergroup_getEzsignsignergroupmemberships_v1_Response.h"
#include "Ezsignsignergroup_getObject_v2_Response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace Ezmaxapi {

class ObjectEzsignsignergroupApi : public QObject {
    Q_OBJECT

public:
    ObjectEzsignsignergroupApi(const int timeOut = 0);
    ~ObjectEzsignsignergroupApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, ServerVariable> &variables = QMap<QString, ServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, ServerVariable> &variables =  QMap<QString, ServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, ServerVariable> &variables =  QMap<QString, ServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  ezsignsignergroup_create_object_v1_request Ezsignsignergroup_createObject_v1_Request [required]
    */
    void ezsignsignergroupCreateObjectV1(const Ezsignsignergroup_createObject_v1_Request &ezsignsignergroup_create_object_v1_request);

    /**
    * @param[in]  pki_ezsignsignergroup_id qint32 [required]
    */
    void ezsignsignergroupDeleteObjectV1(const qint32 &pki_ezsignsignergroup_id);

    /**
    * @param[in]  pki_ezsignsignergroup_id qint32 [required]
    * @param[in]  ezsignsignergroup_edit_ezsignsignergroupmemberships_v1_request Ezsignsignergroup_editEzsignsignergroupmemberships_v1_Request [required]
    */
    void ezsignsignergroupEditEzsignsignergroupmembershipsV1(const qint32 &pki_ezsignsignergroup_id, const Ezsignsignergroup_editEzsignsignergroupmemberships_v1_Request &ezsignsignergroup_edit_ezsignsignergroupmemberships_v1_request);

    /**
    * @param[in]  pki_ezsignsignergroup_id qint32 [required]
    * @param[in]  ezsignsignergroup_edit_object_v1_request Ezsignsignergroup_editObject_v1_Request [required]
    */
    void ezsignsignergroupEditObjectV1(const qint32 &pki_ezsignsignergroup_id, const Ezsignsignergroup_editObject_v1_Request &ezsignsignergroup_edit_object_v1_request);

    /**
    * @param[in]  pki_ezsignsignergroup_id qint32 [required]
    */
    void ezsignsignergroupGetEzsignsignergroupmembershipsV1(const qint32 &pki_ezsignsignergroup_id);

    /**
    * @param[in]  pki_ezsignsignergroup_id qint32 [required]
    */
    void ezsignsignergroupGetObjectV2(const qint32 &pki_ezsignsignergroup_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<ServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    HttpRequestInput _latestInput;
    HttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void ezsignsignergroupCreateObjectV1Callback(HttpRequestWorker *worker);
    void ezsignsignergroupDeleteObjectV1Callback(HttpRequestWorker *worker);
    void ezsignsignergroupEditEzsignsignergroupmembershipsV1Callback(HttpRequestWorker *worker);
    void ezsignsignergroupEditObjectV1Callback(HttpRequestWorker *worker);
    void ezsignsignergroupGetEzsignsignergroupmembershipsV1Callback(HttpRequestWorker *worker);
    void ezsignsignergroupGetObjectV2Callback(HttpRequestWorker *worker);

Q_SIGNALS:

    void ezsignsignergroupCreateObjectV1Signal(Ezsignsignergroup_createObject_v1_Response summary);
    void ezsignsignergroupDeleteObjectV1Signal(Ezsignsignergroup_deleteObject_v1_Response summary);
    void ezsignsignergroupEditEzsignsignergroupmembershipsV1Signal(Ezsignsignergroup_editEzsignsignergroupmemberships_v1_Response summary);
    void ezsignsignergroupEditObjectV1Signal(Ezsignsignergroup_editObject_v1_Response summary);
    void ezsignsignergroupGetEzsignsignergroupmembershipsV1Signal(Ezsignsignergroup_getEzsignsignergroupmemberships_v1_Response summary);
    void ezsignsignergroupGetObjectV2Signal(Ezsignsignergroup_getObject_v2_Response summary);

    void ezsignsignergroupCreateObjectV1SignalFull(HttpRequestWorker *worker, Ezsignsignergroup_createObject_v1_Response summary);
    void ezsignsignergroupDeleteObjectV1SignalFull(HttpRequestWorker *worker, Ezsignsignergroup_deleteObject_v1_Response summary);
    void ezsignsignergroupEditEzsignsignergroupmembershipsV1SignalFull(HttpRequestWorker *worker, Ezsignsignergroup_editEzsignsignergroupmemberships_v1_Response summary);
    void ezsignsignergroupEditObjectV1SignalFull(HttpRequestWorker *worker, Ezsignsignergroup_editObject_v1_Response summary);
    void ezsignsignergroupGetEzsignsignergroupmembershipsV1SignalFull(HttpRequestWorker *worker, Ezsignsignergroup_getEzsignsignergroupmemberships_v1_Response summary);
    void ezsignsignergroupGetObjectV2SignalFull(HttpRequestWorker *worker, Ezsignsignergroup_getObject_v2_Response summary);

    Q_DECL_DEPRECATED_X("Use ezsignsignergroupCreateObjectV1SignalError() instead")
    void ezsignsignergroupCreateObjectV1SignalE(Ezsignsignergroup_createObject_v1_Response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ezsignsignergroupCreateObjectV1SignalError(Ezsignsignergroup_createObject_v1_Response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ezsignsignergroupDeleteObjectV1SignalError() instead")
    void ezsignsignergroupDeleteObjectV1SignalE(Ezsignsignergroup_deleteObject_v1_Response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ezsignsignergroupDeleteObjectV1SignalError(Ezsignsignergroup_deleteObject_v1_Response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ezsignsignergroupEditEzsignsignergroupmembershipsV1SignalError() instead")
    void ezsignsignergroupEditEzsignsignergroupmembershipsV1SignalE(Ezsignsignergroup_editEzsignsignergroupmemberships_v1_Response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ezsignsignergroupEditEzsignsignergroupmembershipsV1SignalError(Ezsignsignergroup_editEzsignsignergroupmemberships_v1_Response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ezsignsignergroupEditObjectV1SignalError() instead")
    void ezsignsignergroupEditObjectV1SignalE(Ezsignsignergroup_editObject_v1_Response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ezsignsignergroupEditObjectV1SignalError(Ezsignsignergroup_editObject_v1_Response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ezsignsignergroupGetEzsignsignergroupmembershipsV1SignalError() instead")
    void ezsignsignergroupGetEzsignsignergroupmembershipsV1SignalE(Ezsignsignergroup_getEzsignsignergroupmemberships_v1_Response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ezsignsignergroupGetEzsignsignergroupmembershipsV1SignalError(Ezsignsignergroup_getEzsignsignergroupmemberships_v1_Response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ezsignsignergroupGetObjectV2SignalError() instead")
    void ezsignsignergroupGetObjectV2SignalE(Ezsignsignergroup_getObject_v2_Response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ezsignsignergroupGetObjectV2SignalError(Ezsignsignergroup_getObject_v2_Response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use ezsignsignergroupCreateObjectV1SignalErrorFull() instead")
    void ezsignsignergroupCreateObjectV1SignalEFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ezsignsignergroupCreateObjectV1SignalErrorFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ezsignsignergroupDeleteObjectV1SignalErrorFull() instead")
    void ezsignsignergroupDeleteObjectV1SignalEFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ezsignsignergroupDeleteObjectV1SignalErrorFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ezsignsignergroupEditEzsignsignergroupmembershipsV1SignalErrorFull() instead")
    void ezsignsignergroupEditEzsignsignergroupmembershipsV1SignalEFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ezsignsignergroupEditEzsignsignergroupmembershipsV1SignalErrorFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ezsignsignergroupEditObjectV1SignalErrorFull() instead")
    void ezsignsignergroupEditObjectV1SignalEFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ezsignsignergroupEditObjectV1SignalErrorFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ezsignsignergroupGetEzsignsignergroupmembershipsV1SignalErrorFull() instead")
    void ezsignsignergroupGetEzsignsignergroupmembershipsV1SignalEFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ezsignsignergroupGetEzsignsignergroupmembershipsV1SignalErrorFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ezsignsignergroupGetObjectV2SignalErrorFull() instead")
    void ezsignsignergroupGetObjectV2SignalEFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ezsignsignergroupGetObjectV2SignalErrorFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace Ezmaxapi
#endif
