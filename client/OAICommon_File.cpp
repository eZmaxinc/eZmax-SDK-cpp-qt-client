/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.18
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICommon_File.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICommon_File::OAICommon_File(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICommon_File::OAICommon_File() {
    this->initializeModel();
}

OAICommon_File::~OAICommon_File() {}

void OAICommon_File::initializeModel() {

    m_s_file_name_isSet = false;
    m_s_file_name_isValid = false;

    m_s_file_url_isSet = false;
    m_s_file_url_isValid = false;

    m_s_file_base64_isSet = false;
    m_s_file_base64_isValid = false;

    m_e_file_source_isSet = false;
    m_e_file_source_isValid = false;
}

void OAICommon_File::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICommon_File::fromJsonObject(QJsonObject json) {

    m_s_file_name_isValid = ::OpenAPI::fromJsonValue(m_s_file_name, json[QString("sFileName")]);
    m_s_file_name_isSet = !json[QString("sFileName")].isNull() && m_s_file_name_isValid;

    m_s_file_url_isValid = ::OpenAPI::fromJsonValue(m_s_file_url, json[QString("sFileUrl")]);
    m_s_file_url_isSet = !json[QString("sFileUrl")].isNull() && m_s_file_url_isValid;

    m_s_file_base64_isValid = ::OpenAPI::fromJsonValue(m_s_file_base64, json[QString("sFileBase64")]);
    m_s_file_base64_isSet = !json[QString("sFileBase64")].isNull() && m_s_file_base64_isValid;

    m_e_file_source_isValid = ::OpenAPI::fromJsonValue(m_e_file_source, json[QString("eFileSource")]);
    m_e_file_source_isSet = !json[QString("eFileSource")].isNull() && m_e_file_source_isValid;
}

QString OAICommon_File::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICommon_File::asJsonObject() const {
    QJsonObject obj;
    if (m_s_file_name_isSet) {
        obj.insert(QString("sFileName"), ::OpenAPI::toJsonValue(m_s_file_name));
    }
    if (m_s_file_url_isSet) {
        obj.insert(QString("sFileUrl"), ::OpenAPI::toJsonValue(m_s_file_url));
    }
    if (m_s_file_base64_isSet) {
        obj.insert(QString("sFileBase64"), ::OpenAPI::toJsonValue(m_s_file_base64));
    }
    if (m_e_file_source_isSet) {
        obj.insert(QString("eFileSource"), ::OpenAPI::toJsonValue(m_e_file_source));
    }
    return obj;
}

QString OAICommon_File::getSFileName() const {
    return m_s_file_name;
}
void OAICommon_File::setSFileName(const QString &s_file_name) {
    m_s_file_name = s_file_name;
    m_s_file_name_isSet = true;
}

bool OAICommon_File::is_s_file_name_Set() const{
    return m_s_file_name_isSet;
}

bool OAICommon_File::is_s_file_name_Valid() const{
    return m_s_file_name_isValid;
}

QString OAICommon_File::getSFileUrl() const {
    return m_s_file_url;
}
void OAICommon_File::setSFileUrl(const QString &s_file_url) {
    m_s_file_url = s_file_url;
    m_s_file_url_isSet = true;
}

bool OAICommon_File::is_s_file_url_Set() const{
    return m_s_file_url_isSet;
}

bool OAICommon_File::is_s_file_url_Valid() const{
    return m_s_file_url_isValid;
}

QByteArray OAICommon_File::getSFileBase64() const {
    return m_s_file_base64;
}
void OAICommon_File::setSFileBase64(const QByteArray &s_file_base64) {
    m_s_file_base64 = s_file_base64;
    m_s_file_base64_isSet = true;
}

bool OAICommon_File::is_s_file_base64_Set() const{
    return m_s_file_base64_isSet;
}

bool OAICommon_File::is_s_file_base64_Valid() const{
    return m_s_file_base64_isValid;
}

QString OAICommon_File::getEFileSource() const {
    return m_e_file_source;
}
void OAICommon_File::setEFileSource(const QString &e_file_source) {
    m_e_file_source = e_file_source;
    m_e_file_source_isSet = true;
}

bool OAICommon_File::is_e_file_source_Set() const{
    return m_e_file_source_isSet;
}

bool OAICommon_File::is_e_file_source_Valid() const{
    return m_e_file_source_isValid;
}

bool OAICommon_File::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_s_file_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s_file_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s_file_base64_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_e_file_source_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICommon_File::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_s_file_name_isValid && m_e_file_source_isValid && true;
}

} // namespace OpenAPI
