/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "Discussionmembership_ResponseCompound.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "Helpers.h"

namespace Ezmaxapi {

Discussionmembership_ResponseCompound::Discussionmembership_ResponseCompound(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

Discussionmembership_ResponseCompound::Discussionmembership_ResponseCompound() {
    this->initializeModel();
}

Discussionmembership_ResponseCompound::~Discussionmembership_ResponseCompound() {}

void Discussionmembership_ResponseCompound::initializeModel() {

    m_pki_discussionmembership_id_isSet = false;
    m_pki_discussionmembership_id_isValid = false;

    m_fki_discussion_id_isSet = false;
    m_fki_discussion_id_isValid = false;

    m_fki_user_id_isSet = false;
    m_fki_user_id_isValid = false;

    m_fki_usergroup_id_isSet = false;
    m_fki_usergroup_id_isValid = false;

    m_fki_modulesection_id_isSet = false;
    m_fki_modulesection_id_isValid = false;

    m_s_discussionmembership_description_isSet = false;
    m_s_discussionmembership_description_isValid = false;

    m_dt_discussionmembership_joined_isSet = false;
    m_dt_discussionmembership_joined_isValid = false;
}

void Discussionmembership_ResponseCompound::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void Discussionmembership_ResponseCompound::fromJsonObject(QJsonObject json) {

    m_pki_discussionmembership_id_isValid = ::Ezmaxapi::fromJsonValue(m_pki_discussionmembership_id, json[QString("pkiDiscussionmembershipID")]);
    m_pki_discussionmembership_id_isSet = !json[QString("pkiDiscussionmembershipID")].isNull() && m_pki_discussionmembership_id_isValid;

    m_fki_discussion_id_isValid = ::Ezmaxapi::fromJsonValue(m_fki_discussion_id, json[QString("fkiDiscussionID")]);
    m_fki_discussion_id_isSet = !json[QString("fkiDiscussionID")].isNull() && m_fki_discussion_id_isValid;

    m_fki_user_id_isValid = ::Ezmaxapi::fromJsonValue(m_fki_user_id, json[QString("fkiUserID")]);
    m_fki_user_id_isSet = !json[QString("fkiUserID")].isNull() && m_fki_user_id_isValid;

    m_fki_usergroup_id_isValid = ::Ezmaxapi::fromJsonValue(m_fki_usergroup_id, json[QString("fkiUsergroupID")]);
    m_fki_usergroup_id_isSet = !json[QString("fkiUsergroupID")].isNull() && m_fki_usergroup_id_isValid;

    m_fki_modulesection_id_isValid = ::Ezmaxapi::fromJsonValue(m_fki_modulesection_id, json[QString("fkiModulesectionID")]);
    m_fki_modulesection_id_isSet = !json[QString("fkiModulesectionID")].isNull() && m_fki_modulesection_id_isValid;

    m_s_discussionmembership_description_isValid = ::Ezmaxapi::fromJsonValue(m_s_discussionmembership_description, json[QString("sDiscussionmembershipDescription")]);
    m_s_discussionmembership_description_isSet = !json[QString("sDiscussionmembershipDescription")].isNull() && m_s_discussionmembership_description_isValid;

    m_dt_discussionmembership_joined_isValid = ::Ezmaxapi::fromJsonValue(m_dt_discussionmembership_joined, json[QString("dtDiscussionmembershipJoined")]);
    m_dt_discussionmembership_joined_isSet = !json[QString("dtDiscussionmembershipJoined")].isNull() && m_dt_discussionmembership_joined_isValid;
}

QString Discussionmembership_ResponseCompound::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject Discussionmembership_ResponseCompound::asJsonObject() const {
    QJsonObject obj;
    if (m_pki_discussionmembership_id_isSet) {
        obj.insert(QString("pkiDiscussionmembershipID"), ::Ezmaxapi::toJsonValue(m_pki_discussionmembership_id));
    }
    if (m_fki_discussion_id_isSet) {
        obj.insert(QString("fkiDiscussionID"), ::Ezmaxapi::toJsonValue(m_fki_discussion_id));
    }
    if (m_fki_user_id_isSet) {
        obj.insert(QString("fkiUserID"), ::Ezmaxapi::toJsonValue(m_fki_user_id));
    }
    if (m_fki_usergroup_id_isSet) {
        obj.insert(QString("fkiUsergroupID"), ::Ezmaxapi::toJsonValue(m_fki_usergroup_id));
    }
    if (m_fki_modulesection_id_isSet) {
        obj.insert(QString("fkiModulesectionID"), ::Ezmaxapi::toJsonValue(m_fki_modulesection_id));
    }
    if (m_s_discussionmembership_description_isSet) {
        obj.insert(QString("sDiscussionmembershipDescription"), ::Ezmaxapi::toJsonValue(m_s_discussionmembership_description));
    }
    if (m_dt_discussionmembership_joined_isSet) {
        obj.insert(QString("dtDiscussionmembershipJoined"), ::Ezmaxapi::toJsonValue(m_dt_discussionmembership_joined));
    }
    return obj;
}

qint32 Discussionmembership_ResponseCompound::getPkiDiscussionmembershipId() const {
    return m_pki_discussionmembership_id;
}
void Discussionmembership_ResponseCompound::setPkiDiscussionmembershipId(const qint32 &pki_discussionmembership_id) {
    m_pki_discussionmembership_id = pki_discussionmembership_id;
    m_pki_discussionmembership_id_isSet = true;
}

bool Discussionmembership_ResponseCompound::is_pki_discussionmembership_id_Set() const{
    return m_pki_discussionmembership_id_isSet;
}

bool Discussionmembership_ResponseCompound::is_pki_discussionmembership_id_Valid() const{
    return m_pki_discussionmembership_id_isValid;
}

qint32 Discussionmembership_ResponseCompound::getFkiDiscussionId() const {
    return m_fki_discussion_id;
}
void Discussionmembership_ResponseCompound::setFkiDiscussionId(const qint32 &fki_discussion_id) {
    m_fki_discussion_id = fki_discussion_id;
    m_fki_discussion_id_isSet = true;
}

bool Discussionmembership_ResponseCompound::is_fki_discussion_id_Set() const{
    return m_fki_discussion_id_isSet;
}

bool Discussionmembership_ResponseCompound::is_fki_discussion_id_Valid() const{
    return m_fki_discussion_id_isValid;
}

qint32 Discussionmembership_ResponseCompound::getFkiUserId() const {
    return m_fki_user_id;
}
void Discussionmembership_ResponseCompound::setFkiUserId(const qint32 &fki_user_id) {
    m_fki_user_id = fki_user_id;
    m_fki_user_id_isSet = true;
}

bool Discussionmembership_ResponseCompound::is_fki_user_id_Set() const{
    return m_fki_user_id_isSet;
}

bool Discussionmembership_ResponseCompound::is_fki_user_id_Valid() const{
    return m_fki_user_id_isValid;
}

qint32 Discussionmembership_ResponseCompound::getFkiUsergroupId() const {
    return m_fki_usergroup_id;
}
void Discussionmembership_ResponseCompound::setFkiUsergroupId(const qint32 &fki_usergroup_id) {
    m_fki_usergroup_id = fki_usergroup_id;
    m_fki_usergroup_id_isSet = true;
}

bool Discussionmembership_ResponseCompound::is_fki_usergroup_id_Set() const{
    return m_fki_usergroup_id_isSet;
}

bool Discussionmembership_ResponseCompound::is_fki_usergroup_id_Valid() const{
    return m_fki_usergroup_id_isValid;
}

qint32 Discussionmembership_ResponseCompound::getFkiModulesectionId() const {
    return m_fki_modulesection_id;
}
void Discussionmembership_ResponseCompound::setFkiModulesectionId(const qint32 &fki_modulesection_id) {
    m_fki_modulesection_id = fki_modulesection_id;
    m_fki_modulesection_id_isSet = true;
}

bool Discussionmembership_ResponseCompound::is_fki_modulesection_id_Set() const{
    return m_fki_modulesection_id_isSet;
}

bool Discussionmembership_ResponseCompound::is_fki_modulesection_id_Valid() const{
    return m_fki_modulesection_id_isValid;
}

QString Discussionmembership_ResponseCompound::getSDiscussionmembershipDescription() const {
    return m_s_discussionmembership_description;
}
void Discussionmembership_ResponseCompound::setSDiscussionmembershipDescription(const QString &s_discussionmembership_description) {
    m_s_discussionmembership_description = s_discussionmembership_description;
    m_s_discussionmembership_description_isSet = true;
}

bool Discussionmembership_ResponseCompound::is_s_discussionmembership_description_Set() const{
    return m_s_discussionmembership_description_isSet;
}

bool Discussionmembership_ResponseCompound::is_s_discussionmembership_description_Valid() const{
    return m_s_discussionmembership_description_isValid;
}

QString Discussionmembership_ResponseCompound::getDtDiscussionmembershipJoined() const {
    return m_dt_discussionmembership_joined;
}
void Discussionmembership_ResponseCompound::setDtDiscussionmembershipJoined(const QString &dt_discussionmembership_joined) {
    m_dt_discussionmembership_joined = dt_discussionmembership_joined;
    m_dt_discussionmembership_joined_isSet = true;
}

bool Discussionmembership_ResponseCompound::is_dt_discussionmembership_joined_Set() const{
    return m_dt_discussionmembership_joined_isSet;
}

bool Discussionmembership_ResponseCompound::is_dt_discussionmembership_joined_Valid() const{
    return m_dt_discussionmembership_joined_isValid;
}

bool Discussionmembership_ResponseCompound::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_pki_discussionmembership_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fki_discussion_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fki_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fki_usergroup_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fki_modulesection_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s_discussionmembership_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dt_discussionmembership_joined_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool Discussionmembership_ResponseCompound::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_pki_discussionmembership_id_isValid && m_fki_discussion_id_isValid && m_s_discussionmembership_description_isValid && m_dt_discussionmembership_joined_isValid && true;
}

} // namespace Ezmaxapi
