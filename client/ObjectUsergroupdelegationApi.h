/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef _ObjectUsergroupdelegationApi_H
#define _ObjectUsergroupdelegationApi_H

#include "Helpers.h"
#include "HttpRequest.h"
#include "ServerConfiguration.h"
#include "Oauth.h"

#include "Common_Response_Error.h"
#include "Usergroupdelegation_createObject_v1_Request.h"
#include "Usergroupdelegation_createObject_v1_Response.h"
#include "Usergroupdelegation_deleteObject_v1_Response.h"
#include "Usergroupdelegation_editObject_v1_Request.h"
#include "Usergroupdelegation_editObject_v1_Response.h"
#include "Usergroupdelegation_getObject_v2_Response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace Ezmaxapi {

class ObjectUsergroupdelegationApi : public QObject {
    Q_OBJECT

public:
    ObjectUsergroupdelegationApi(const int timeOut = 0);
    ~ObjectUsergroupdelegationApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, ServerVariable> &variables = QMap<QString, ServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, ServerVariable> &variables =  QMap<QString, ServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, ServerVariable> &variables =  QMap<QString, ServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  usergroupdelegation_create_object_v1_request Usergroupdelegation_createObject_v1_Request [required]
    */
    void usergroupdelegationCreateObjectV1(const Usergroupdelegation_createObject_v1_Request &usergroupdelegation_create_object_v1_request);

    /**
    * @param[in]  pki_usergroupdelegation_id qint32 [required]
    */
    void usergroupdelegationDeleteObjectV1(const qint32 &pki_usergroupdelegation_id);

    /**
    * @param[in]  pki_usergroupdelegation_id qint32 [required]
    * @param[in]  usergroupdelegation_edit_object_v1_request Usergroupdelegation_editObject_v1_Request [required]
    */
    void usergroupdelegationEditObjectV1(const qint32 &pki_usergroupdelegation_id, const Usergroupdelegation_editObject_v1_Request &usergroupdelegation_edit_object_v1_request);

    /**
    * @param[in]  pki_usergroupdelegation_id qint32 [required]
    */
    void usergroupdelegationGetObjectV2(const qint32 &pki_usergroupdelegation_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<ServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    HttpRequestInput _latestInput;
    HttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void usergroupdelegationCreateObjectV1Callback(HttpRequestWorker *worker);
    void usergroupdelegationDeleteObjectV1Callback(HttpRequestWorker *worker);
    void usergroupdelegationEditObjectV1Callback(HttpRequestWorker *worker);
    void usergroupdelegationGetObjectV2Callback(HttpRequestWorker *worker);

signals:

    void usergroupdelegationCreateObjectV1Signal(Usergroupdelegation_createObject_v1_Response summary);
    void usergroupdelegationDeleteObjectV1Signal(Usergroupdelegation_deleteObject_v1_Response summary);
    void usergroupdelegationEditObjectV1Signal(Usergroupdelegation_editObject_v1_Response summary);
    void usergroupdelegationGetObjectV2Signal(Usergroupdelegation_getObject_v2_Response summary);

    void usergroupdelegationCreateObjectV1SignalFull(HttpRequestWorker *worker, Usergroupdelegation_createObject_v1_Response summary);
    void usergroupdelegationDeleteObjectV1SignalFull(HttpRequestWorker *worker, Usergroupdelegation_deleteObject_v1_Response summary);
    void usergroupdelegationEditObjectV1SignalFull(HttpRequestWorker *worker, Usergroupdelegation_editObject_v1_Response summary);
    void usergroupdelegationGetObjectV2SignalFull(HttpRequestWorker *worker, Usergroupdelegation_getObject_v2_Response summary);

    Q_DECL_DEPRECATED_X("Use usergroupdelegationCreateObjectV1SignalError() instead")
    void usergroupdelegationCreateObjectV1SignalE(Usergroupdelegation_createObject_v1_Response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usergroupdelegationCreateObjectV1SignalError(Usergroupdelegation_createObject_v1_Response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usergroupdelegationDeleteObjectV1SignalError() instead")
    void usergroupdelegationDeleteObjectV1SignalE(Usergroupdelegation_deleteObject_v1_Response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usergroupdelegationDeleteObjectV1SignalError(Usergroupdelegation_deleteObject_v1_Response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usergroupdelegationEditObjectV1SignalError() instead")
    void usergroupdelegationEditObjectV1SignalE(Usergroupdelegation_editObject_v1_Response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usergroupdelegationEditObjectV1SignalError(Usergroupdelegation_editObject_v1_Response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usergroupdelegationGetObjectV2SignalError() instead")
    void usergroupdelegationGetObjectV2SignalE(Usergroupdelegation_getObject_v2_Response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usergroupdelegationGetObjectV2SignalError(Usergroupdelegation_getObject_v2_Response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use usergroupdelegationCreateObjectV1SignalErrorFull() instead")
    void usergroupdelegationCreateObjectV1SignalEFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usergroupdelegationCreateObjectV1SignalErrorFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usergroupdelegationDeleteObjectV1SignalErrorFull() instead")
    void usergroupdelegationDeleteObjectV1SignalEFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usergroupdelegationDeleteObjectV1SignalErrorFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usergroupdelegationEditObjectV1SignalErrorFull() instead")
    void usergroupdelegationEditObjectV1SignalEFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usergroupdelegationEditObjectV1SignalErrorFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usergroupdelegationGetObjectV2SignalErrorFull() instead")
    void usergroupdelegationGetObjectV2SignalEFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usergroupdelegationGetObjectV2SignalErrorFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public slots:
    void tokenAvailable();
};

} // namespace Ezmaxapi
#endif
