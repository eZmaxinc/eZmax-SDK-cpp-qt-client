/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "Activesession_ListElement.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "Helpers.h"

namespace Ezmaxapi {

Activesession_ListElement::Activesession_ListElement(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

Activesession_ListElement::Activesession_ListElement() {
    this->initializeModel();
}

Activesession_ListElement::~Activesession_ListElement() {}

void Activesession_ListElement::initializeModel() {

    m_pki_activesession_id_isSet = false;
    m_pki_activesession_id_isValid = false;

    m_fki_user_id_isSet = false;
    m_fki_user_id_isValid = false;

    m_fki_computer_id_isSet = false;
    m_fki_computer_id_isValid = false;

    m_fki_company_id_isSet = false;
    m_fki_company_id_isValid = false;

    m_fki_department_id_isSet = false;
    m_fki_department_id_isValid = false;

    m_s_company_name_x_isSet = false;
    m_s_company_name_x_isValid = false;

    m_s_department_name_x_isSet = false;
    m_s_department_name_x_isValid = false;

    m_s_activesession_loginname_isSet = false;
    m_s_activesession_loginname_isValid = false;

    m_s_computer_description_isSet = false;
    m_s_computer_description_isValid = false;

    m_dt_activesession_firsthit_isSet = false;
    m_dt_activesession_firsthit_isValid = false;

    m_dt_activesession_lasthit_isSet = false;
    m_dt_activesession_lasthit_isValid = false;

    m_s_activesession_ip_isSet = false;
    m_s_activesession_ip_isValid = false;
}

void Activesession_ListElement::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void Activesession_ListElement::fromJsonObject(QJsonObject json) {

    m_pki_activesession_id_isValid = ::Ezmaxapi::fromJsonValue(m_pki_activesession_id, json[QString("pkiActivesessionID")]);
    m_pki_activesession_id_isSet = !json[QString("pkiActivesessionID")].isNull() && m_pki_activesession_id_isValid;

    m_fki_user_id_isValid = ::Ezmaxapi::fromJsonValue(m_fki_user_id, json[QString("fkiUserID")]);
    m_fki_user_id_isSet = !json[QString("fkiUserID")].isNull() && m_fki_user_id_isValid;

    m_fki_computer_id_isValid = ::Ezmaxapi::fromJsonValue(m_fki_computer_id, json[QString("fkiComputerID")]);
    m_fki_computer_id_isSet = !json[QString("fkiComputerID")].isNull() && m_fki_computer_id_isValid;

    m_fki_company_id_isValid = ::Ezmaxapi::fromJsonValue(m_fki_company_id, json[QString("fkiCompanyID")]);
    m_fki_company_id_isSet = !json[QString("fkiCompanyID")].isNull() && m_fki_company_id_isValid;

    m_fki_department_id_isValid = ::Ezmaxapi::fromJsonValue(m_fki_department_id, json[QString("fkiDepartmentID")]);
    m_fki_department_id_isSet = !json[QString("fkiDepartmentID")].isNull() && m_fki_department_id_isValid;

    m_s_company_name_x_isValid = ::Ezmaxapi::fromJsonValue(m_s_company_name_x, json[QString("sCompanyNameX")]);
    m_s_company_name_x_isSet = !json[QString("sCompanyNameX")].isNull() && m_s_company_name_x_isValid;

    m_s_department_name_x_isValid = ::Ezmaxapi::fromJsonValue(m_s_department_name_x, json[QString("sDepartmentNameX")]);
    m_s_department_name_x_isSet = !json[QString("sDepartmentNameX")].isNull() && m_s_department_name_x_isValid;

    m_s_activesession_loginname_isValid = ::Ezmaxapi::fromJsonValue(m_s_activesession_loginname, json[QString("sActivesessionLoginname")]);
    m_s_activesession_loginname_isSet = !json[QString("sActivesessionLoginname")].isNull() && m_s_activesession_loginname_isValid;

    m_s_computer_description_isValid = ::Ezmaxapi::fromJsonValue(m_s_computer_description, json[QString("sComputerDescription")]);
    m_s_computer_description_isSet = !json[QString("sComputerDescription")].isNull() && m_s_computer_description_isValid;

    m_dt_activesession_firsthit_isValid = ::Ezmaxapi::fromJsonValue(m_dt_activesession_firsthit, json[QString("dtActivesessionFirsthit")]);
    m_dt_activesession_firsthit_isSet = !json[QString("dtActivesessionFirsthit")].isNull() && m_dt_activesession_firsthit_isValid;

    m_dt_activesession_lasthit_isValid = ::Ezmaxapi::fromJsonValue(m_dt_activesession_lasthit, json[QString("dtActivesessionLasthit")]);
    m_dt_activesession_lasthit_isSet = !json[QString("dtActivesessionLasthit")].isNull() && m_dt_activesession_lasthit_isValid;

    m_s_activesession_ip_isValid = ::Ezmaxapi::fromJsonValue(m_s_activesession_ip, json[QString("sActivesessionIP")]);
    m_s_activesession_ip_isSet = !json[QString("sActivesessionIP")].isNull() && m_s_activesession_ip_isValid;
}

QString Activesession_ListElement::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject Activesession_ListElement::asJsonObject() const {
    QJsonObject obj;
    if (m_pki_activesession_id_isSet) {
        obj.insert(QString("pkiActivesessionID"), ::Ezmaxapi::toJsonValue(m_pki_activesession_id));
    }
    if (m_fki_user_id_isSet) {
        obj.insert(QString("fkiUserID"), ::Ezmaxapi::toJsonValue(m_fki_user_id));
    }
    if (m_fki_computer_id_isSet) {
        obj.insert(QString("fkiComputerID"), ::Ezmaxapi::toJsonValue(m_fki_computer_id));
    }
    if (m_fki_company_id_isSet) {
        obj.insert(QString("fkiCompanyID"), ::Ezmaxapi::toJsonValue(m_fki_company_id));
    }
    if (m_fki_department_id_isSet) {
        obj.insert(QString("fkiDepartmentID"), ::Ezmaxapi::toJsonValue(m_fki_department_id));
    }
    if (m_s_company_name_x_isSet) {
        obj.insert(QString("sCompanyNameX"), ::Ezmaxapi::toJsonValue(m_s_company_name_x));
    }
    if (m_s_department_name_x_isSet) {
        obj.insert(QString("sDepartmentNameX"), ::Ezmaxapi::toJsonValue(m_s_department_name_x));
    }
    if (m_s_activesession_loginname_isSet) {
        obj.insert(QString("sActivesessionLoginname"), ::Ezmaxapi::toJsonValue(m_s_activesession_loginname));
    }
    if (m_s_computer_description_isSet) {
        obj.insert(QString("sComputerDescription"), ::Ezmaxapi::toJsonValue(m_s_computer_description));
    }
    if (m_dt_activesession_firsthit_isSet) {
        obj.insert(QString("dtActivesessionFirsthit"), ::Ezmaxapi::toJsonValue(m_dt_activesession_firsthit));
    }
    if (m_dt_activesession_lasthit_isSet) {
        obj.insert(QString("dtActivesessionLasthit"), ::Ezmaxapi::toJsonValue(m_dt_activesession_lasthit));
    }
    if (m_s_activesession_ip_isSet) {
        obj.insert(QString("sActivesessionIP"), ::Ezmaxapi::toJsonValue(m_s_activesession_ip));
    }
    return obj;
}

qint32 Activesession_ListElement::getPkiActivesessionId() const {
    return m_pki_activesession_id;
}
void Activesession_ListElement::setPkiActivesessionId(const qint32 &pki_activesession_id) {
    m_pki_activesession_id = pki_activesession_id;
    m_pki_activesession_id_isSet = true;
}

bool Activesession_ListElement::is_pki_activesession_id_Set() const{
    return m_pki_activesession_id_isSet;
}

bool Activesession_ListElement::is_pki_activesession_id_Valid() const{
    return m_pki_activesession_id_isValid;
}

qint32 Activesession_ListElement::getFkiUserId() const {
    return m_fki_user_id;
}
void Activesession_ListElement::setFkiUserId(const qint32 &fki_user_id) {
    m_fki_user_id = fki_user_id;
    m_fki_user_id_isSet = true;
}

bool Activesession_ListElement::is_fki_user_id_Set() const{
    return m_fki_user_id_isSet;
}

bool Activesession_ListElement::is_fki_user_id_Valid() const{
    return m_fki_user_id_isValid;
}

qint32 Activesession_ListElement::getFkiComputerId() const {
    return m_fki_computer_id;
}
void Activesession_ListElement::setFkiComputerId(const qint32 &fki_computer_id) {
    m_fki_computer_id = fki_computer_id;
    m_fki_computer_id_isSet = true;
}

bool Activesession_ListElement::is_fki_computer_id_Set() const{
    return m_fki_computer_id_isSet;
}

bool Activesession_ListElement::is_fki_computer_id_Valid() const{
    return m_fki_computer_id_isValid;
}

qint32 Activesession_ListElement::getFkiCompanyId() const {
    return m_fki_company_id;
}
void Activesession_ListElement::setFkiCompanyId(const qint32 &fki_company_id) {
    m_fki_company_id = fki_company_id;
    m_fki_company_id_isSet = true;
}

bool Activesession_ListElement::is_fki_company_id_Set() const{
    return m_fki_company_id_isSet;
}

bool Activesession_ListElement::is_fki_company_id_Valid() const{
    return m_fki_company_id_isValid;
}

qint32 Activesession_ListElement::getFkiDepartmentId() const {
    return m_fki_department_id;
}
void Activesession_ListElement::setFkiDepartmentId(const qint32 &fki_department_id) {
    m_fki_department_id = fki_department_id;
    m_fki_department_id_isSet = true;
}

bool Activesession_ListElement::is_fki_department_id_Set() const{
    return m_fki_department_id_isSet;
}

bool Activesession_ListElement::is_fki_department_id_Valid() const{
    return m_fki_department_id_isValid;
}

QString Activesession_ListElement::getSCompanyNameX() const {
    return m_s_company_name_x;
}
void Activesession_ListElement::setSCompanyNameX(const QString &s_company_name_x) {
    m_s_company_name_x = s_company_name_x;
    m_s_company_name_x_isSet = true;
}

bool Activesession_ListElement::is_s_company_name_x_Set() const{
    return m_s_company_name_x_isSet;
}

bool Activesession_ListElement::is_s_company_name_x_Valid() const{
    return m_s_company_name_x_isValid;
}

QString Activesession_ListElement::getSDepartmentNameX() const {
    return m_s_department_name_x;
}
void Activesession_ListElement::setSDepartmentNameX(const QString &s_department_name_x) {
    m_s_department_name_x = s_department_name_x;
    m_s_department_name_x_isSet = true;
}

bool Activesession_ListElement::is_s_department_name_x_Set() const{
    return m_s_department_name_x_isSet;
}

bool Activesession_ListElement::is_s_department_name_x_Valid() const{
    return m_s_department_name_x_isValid;
}

QString Activesession_ListElement::getSActivesessionLoginname() const {
    return m_s_activesession_loginname;
}
void Activesession_ListElement::setSActivesessionLoginname(const QString &s_activesession_loginname) {
    m_s_activesession_loginname = s_activesession_loginname;
    m_s_activesession_loginname_isSet = true;
}

bool Activesession_ListElement::is_s_activesession_loginname_Set() const{
    return m_s_activesession_loginname_isSet;
}

bool Activesession_ListElement::is_s_activesession_loginname_Valid() const{
    return m_s_activesession_loginname_isValid;
}

QString Activesession_ListElement::getSComputerDescription() const {
    return m_s_computer_description;
}
void Activesession_ListElement::setSComputerDescription(const QString &s_computer_description) {
    m_s_computer_description = s_computer_description;
    m_s_computer_description_isSet = true;
}

bool Activesession_ListElement::is_s_computer_description_Set() const{
    return m_s_computer_description_isSet;
}

bool Activesession_ListElement::is_s_computer_description_Valid() const{
    return m_s_computer_description_isValid;
}

QString Activesession_ListElement::getDtActivesessionFirsthit() const {
    return m_dt_activesession_firsthit;
}
void Activesession_ListElement::setDtActivesessionFirsthit(const QString &dt_activesession_firsthit) {
    m_dt_activesession_firsthit = dt_activesession_firsthit;
    m_dt_activesession_firsthit_isSet = true;
}

bool Activesession_ListElement::is_dt_activesession_firsthit_Set() const{
    return m_dt_activesession_firsthit_isSet;
}

bool Activesession_ListElement::is_dt_activesession_firsthit_Valid() const{
    return m_dt_activesession_firsthit_isValid;
}

QString Activesession_ListElement::getDtActivesessionLasthit() const {
    return m_dt_activesession_lasthit;
}
void Activesession_ListElement::setDtActivesessionLasthit(const QString &dt_activesession_lasthit) {
    m_dt_activesession_lasthit = dt_activesession_lasthit;
    m_dt_activesession_lasthit_isSet = true;
}

bool Activesession_ListElement::is_dt_activesession_lasthit_Set() const{
    return m_dt_activesession_lasthit_isSet;
}

bool Activesession_ListElement::is_dt_activesession_lasthit_Valid() const{
    return m_dt_activesession_lasthit_isValid;
}

QString Activesession_ListElement::getSActivesessionIp() const {
    return m_s_activesession_ip;
}
void Activesession_ListElement::setSActivesessionIp(const QString &s_activesession_ip) {
    m_s_activesession_ip = s_activesession_ip;
    m_s_activesession_ip_isSet = true;
}

bool Activesession_ListElement::is_s_activesession_ip_Set() const{
    return m_s_activesession_ip_isSet;
}

bool Activesession_ListElement::is_s_activesession_ip_Valid() const{
    return m_s_activesession_ip_isValid;
}

bool Activesession_ListElement::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_pki_activesession_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fki_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fki_computer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fki_company_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fki_department_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s_company_name_x_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s_department_name_x_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s_activesession_loginname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s_computer_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dt_activesession_firsthit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dt_activesession_lasthit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s_activesession_ip_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool Activesession_ListElement::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_pki_activesession_id_isValid && m_fki_user_id_isValid && m_fki_computer_id_isValid && m_fki_company_id_isValid && m_fki_department_id_isValid && m_s_company_name_x_isValid && m_s_department_name_x_isValid && m_s_activesession_loginname_isValid && m_s_computer_description_isValid && m_dt_activesession_firsthit_isValid && m_dt_activesession_lasthit_isValid && m_s_activesession_ip_isValid && true;
}

} // namespace Ezmaxapi
