/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "User_ListElement.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "Helpers.h"

namespace Ezmaxapi {

User_ListElement::User_ListElement(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

User_ListElement::User_ListElement() {
    this->initializeModel();
}

User_ListElement::~User_ListElement() {}

void User_ListElement::initializeModel() {

    m_pki_user_id_isSet = false;
    m_pki_user_id_isValid = false;

    m_s_user_firstname_isSet = false;
    m_s_user_firstname_isValid = false;

    m_s_user_lastname_isSet = false;
    m_s_user_lastname_isValid = false;

    m_s_user_loginname_isSet = false;
    m_s_user_loginname_isValid = false;

    m_b_user_isactive_isSet = false;
    m_b_user_isactive_isValid = false;

    m_e_user_type_isSet = false;
    m_e_user_type_isValid = false;

    m_e_user_origin_isSet = false;
    m_e_user_origin_isValid = false;

    m_e_user_ezsignaccess_isSet = false;
    m_e_user_ezsignaccess_isValid = false;

    m_dt_user_ezsignprepaidexpiration_isSet = false;
    m_dt_user_ezsignprepaidexpiration_isValid = false;

    m_s_email_address_isSet = false;
    m_s_email_address_isValid = false;
}

void User_ListElement::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void User_ListElement::fromJsonObject(QJsonObject json) {

    m_pki_user_id_isValid = ::Ezmaxapi::fromJsonValue(m_pki_user_id, json[QString("pkiUserID")]);
    m_pki_user_id_isSet = !json[QString("pkiUserID")].isNull() && m_pki_user_id_isValid;

    m_s_user_firstname_isValid = ::Ezmaxapi::fromJsonValue(m_s_user_firstname, json[QString("sUserFirstname")]);
    m_s_user_firstname_isSet = !json[QString("sUserFirstname")].isNull() && m_s_user_firstname_isValid;

    m_s_user_lastname_isValid = ::Ezmaxapi::fromJsonValue(m_s_user_lastname, json[QString("sUserLastname")]);
    m_s_user_lastname_isSet = !json[QString("sUserLastname")].isNull() && m_s_user_lastname_isValid;

    m_s_user_loginname_isValid = ::Ezmaxapi::fromJsonValue(m_s_user_loginname, json[QString("sUserLoginname")]);
    m_s_user_loginname_isSet = !json[QString("sUserLoginname")].isNull() && m_s_user_loginname_isValid;

    m_b_user_isactive_isValid = ::Ezmaxapi::fromJsonValue(m_b_user_isactive, json[QString("bUserIsactive")]);
    m_b_user_isactive_isSet = !json[QString("bUserIsactive")].isNull() && m_b_user_isactive_isValid;

    m_e_user_type_isValid = ::Ezmaxapi::fromJsonValue(m_e_user_type, json[QString("eUserType")]);
    m_e_user_type_isSet = !json[QString("eUserType")].isNull() && m_e_user_type_isValid;

    m_e_user_origin_isValid = ::Ezmaxapi::fromJsonValue(m_e_user_origin, json[QString("eUserOrigin")]);
    m_e_user_origin_isSet = !json[QString("eUserOrigin")].isNull() && m_e_user_origin_isValid;

    m_e_user_ezsignaccess_isValid = ::Ezmaxapi::fromJsonValue(m_e_user_ezsignaccess, json[QString("eUserEzsignaccess")]);
    m_e_user_ezsignaccess_isSet = !json[QString("eUserEzsignaccess")].isNull() && m_e_user_ezsignaccess_isValid;

    m_dt_user_ezsignprepaidexpiration_isValid = ::Ezmaxapi::fromJsonValue(m_dt_user_ezsignprepaidexpiration, json[QString("dtUserEzsignprepaidexpiration")]);
    m_dt_user_ezsignprepaidexpiration_isSet = !json[QString("dtUserEzsignprepaidexpiration")].isNull() && m_dt_user_ezsignprepaidexpiration_isValid;

    m_s_email_address_isValid = ::Ezmaxapi::fromJsonValue(m_s_email_address, json[QString("sEmailAddress")]);
    m_s_email_address_isSet = !json[QString("sEmailAddress")].isNull() && m_s_email_address_isValid;
}

QString User_ListElement::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject User_ListElement::asJsonObject() const {
    QJsonObject obj;
    if (m_pki_user_id_isSet) {
        obj.insert(QString("pkiUserID"), ::Ezmaxapi::toJsonValue(m_pki_user_id));
    }
    if (m_s_user_firstname_isSet) {
        obj.insert(QString("sUserFirstname"), ::Ezmaxapi::toJsonValue(m_s_user_firstname));
    }
    if (m_s_user_lastname_isSet) {
        obj.insert(QString("sUserLastname"), ::Ezmaxapi::toJsonValue(m_s_user_lastname));
    }
    if (m_s_user_loginname_isSet) {
        obj.insert(QString("sUserLoginname"), ::Ezmaxapi::toJsonValue(m_s_user_loginname));
    }
    if (m_b_user_isactive_isSet) {
        obj.insert(QString("bUserIsactive"), ::Ezmaxapi::toJsonValue(m_b_user_isactive));
    }
    if (m_e_user_type.isSet()) {
        obj.insert(QString("eUserType"), ::Ezmaxapi::toJsonValue(m_e_user_type));
    }
    if (m_e_user_origin.isSet()) {
        obj.insert(QString("eUserOrigin"), ::Ezmaxapi::toJsonValue(m_e_user_origin));
    }
    if (m_e_user_ezsignaccess.isSet()) {
        obj.insert(QString("eUserEzsignaccess"), ::Ezmaxapi::toJsonValue(m_e_user_ezsignaccess));
    }
    if (m_dt_user_ezsignprepaidexpiration_isSet) {
        obj.insert(QString("dtUserEzsignprepaidexpiration"), ::Ezmaxapi::toJsonValue(m_dt_user_ezsignprepaidexpiration));
    }
    if (m_s_email_address_isSet) {
        obj.insert(QString("sEmailAddress"), ::Ezmaxapi::toJsonValue(m_s_email_address));
    }
    return obj;
}

qint32 User_ListElement::getPkiUserId() const {
    return m_pki_user_id;
}
void User_ListElement::setPkiUserId(const qint32 &pki_user_id) {
    m_pki_user_id = pki_user_id;
    m_pki_user_id_isSet = true;
}

bool User_ListElement::is_pki_user_id_Set() const{
    return m_pki_user_id_isSet;
}

bool User_ListElement::is_pki_user_id_Valid() const{
    return m_pki_user_id_isValid;
}

QString User_ListElement::getSUserFirstname() const {
    return m_s_user_firstname;
}
void User_ListElement::setSUserFirstname(const QString &s_user_firstname) {
    m_s_user_firstname = s_user_firstname;
    m_s_user_firstname_isSet = true;
}

bool User_ListElement::is_s_user_firstname_Set() const{
    return m_s_user_firstname_isSet;
}

bool User_ListElement::is_s_user_firstname_Valid() const{
    return m_s_user_firstname_isValid;
}

QString User_ListElement::getSUserLastname() const {
    return m_s_user_lastname;
}
void User_ListElement::setSUserLastname(const QString &s_user_lastname) {
    m_s_user_lastname = s_user_lastname;
    m_s_user_lastname_isSet = true;
}

bool User_ListElement::is_s_user_lastname_Set() const{
    return m_s_user_lastname_isSet;
}

bool User_ListElement::is_s_user_lastname_Valid() const{
    return m_s_user_lastname_isValid;
}

QString User_ListElement::getSUserLoginname() const {
    return m_s_user_loginname;
}
void User_ListElement::setSUserLoginname(const QString &s_user_loginname) {
    m_s_user_loginname = s_user_loginname;
    m_s_user_loginname_isSet = true;
}

bool User_ListElement::is_s_user_loginname_Set() const{
    return m_s_user_loginname_isSet;
}

bool User_ListElement::is_s_user_loginname_Valid() const{
    return m_s_user_loginname_isValid;
}

bool User_ListElement::isBUserIsactive() const {
    return m_b_user_isactive;
}
void User_ListElement::setBUserIsactive(const bool &b_user_isactive) {
    m_b_user_isactive = b_user_isactive;
    m_b_user_isactive_isSet = true;
}

bool User_ListElement::is_b_user_isactive_Set() const{
    return m_b_user_isactive_isSet;
}

bool User_ListElement::is_b_user_isactive_Valid() const{
    return m_b_user_isactive_isValid;
}

Field_eUserType User_ListElement::getEUserType() const {
    return m_e_user_type;
}
void User_ListElement::setEUserType(const Field_eUserType &e_user_type) {
    m_e_user_type = e_user_type;
    m_e_user_type_isSet = true;
}

bool User_ListElement::is_e_user_type_Set() const{
    return m_e_user_type_isSet;
}

bool User_ListElement::is_e_user_type_Valid() const{
    return m_e_user_type_isValid;
}

Field_eUserOrigin User_ListElement::getEUserOrigin() const {
    return m_e_user_origin;
}
void User_ListElement::setEUserOrigin(const Field_eUserOrigin &e_user_origin) {
    m_e_user_origin = e_user_origin;
    m_e_user_origin_isSet = true;
}

bool User_ListElement::is_e_user_origin_Set() const{
    return m_e_user_origin_isSet;
}

bool User_ListElement::is_e_user_origin_Valid() const{
    return m_e_user_origin_isValid;
}

Field_eUserEzsignaccess User_ListElement::getEUserEzsignaccess() const {
    return m_e_user_ezsignaccess;
}
void User_ListElement::setEUserEzsignaccess(const Field_eUserEzsignaccess &e_user_ezsignaccess) {
    m_e_user_ezsignaccess = e_user_ezsignaccess;
    m_e_user_ezsignaccess_isSet = true;
}

bool User_ListElement::is_e_user_ezsignaccess_Set() const{
    return m_e_user_ezsignaccess_isSet;
}

bool User_ListElement::is_e_user_ezsignaccess_Valid() const{
    return m_e_user_ezsignaccess_isValid;
}

QString User_ListElement::getDtUserEzsignprepaidexpiration() const {
    return m_dt_user_ezsignprepaidexpiration;
}
void User_ListElement::setDtUserEzsignprepaidexpiration(const QString &dt_user_ezsignprepaidexpiration) {
    m_dt_user_ezsignprepaidexpiration = dt_user_ezsignprepaidexpiration;
    m_dt_user_ezsignprepaidexpiration_isSet = true;
}

bool User_ListElement::is_dt_user_ezsignprepaidexpiration_Set() const{
    return m_dt_user_ezsignprepaidexpiration_isSet;
}

bool User_ListElement::is_dt_user_ezsignprepaidexpiration_Valid() const{
    return m_dt_user_ezsignprepaidexpiration_isValid;
}

QString User_ListElement::getSEmailAddress() const {
    return m_s_email_address;
}
void User_ListElement::setSEmailAddress(const QString &s_email_address) {
    m_s_email_address = s_email_address;
    m_s_email_address_isSet = true;
}

bool User_ListElement::is_s_email_address_Set() const{
    return m_s_email_address_isSet;
}

bool User_ListElement::is_s_email_address_Valid() const{
    return m_s_email_address_isValid;
}

bool User_ListElement::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_pki_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s_user_firstname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s_user_lastname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s_user_loginname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_b_user_isactive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_e_user_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_e_user_origin.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_e_user_ezsignaccess.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dt_user_ezsignprepaidexpiration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s_email_address_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool User_ListElement::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_pki_user_id_isValid && m_s_user_firstname_isValid && m_s_user_lastname_isValid && m_s_user_loginname_isValid && m_b_user_isactive_isValid && m_e_user_type_isValid && m_e_user_origin_isValid && m_e_user_ezsignaccess_isValid && m_s_email_address_isValid && true;
}

} // namespace Ezmaxapi
