/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "Field_eEzsignelementdependencyOperator.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "Helpers.h"

namespace Ezmaxapi {

Field_eEzsignelementdependencyOperator::Field_eEzsignelementdependencyOperator(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

Field_eEzsignelementdependencyOperator::Field_eEzsignelementdependencyOperator() {
    this->initializeModel();
}

Field_eEzsignelementdependencyOperator::~Field_eEzsignelementdependencyOperator() {}

void Field_eEzsignelementdependencyOperator::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eField_eEzsignelementdependencyOperator::INVALID_VALUE_OPENAPI_GENERATED;
}

void Field_eEzsignelementdependencyOperator::fromJson(QString jsonString) {
    
    if ( jsonString.compare("eq", Qt::CaseInsensitive) == 0) {
        m_value = eField_eEzsignelementdependencyOperator::EQ;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("neq", Qt::CaseInsensitive) == 0) {
        m_value = eField_eEzsignelementdependencyOperator::NEQ;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("gt", Qt::CaseInsensitive) == 0) {
        m_value = eField_eEzsignelementdependencyOperator::GT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("gte", Qt::CaseInsensitive) == 0) {
        m_value = eField_eEzsignelementdependencyOperator::GTE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("lt", Qt::CaseInsensitive) == 0) {
        m_value = eField_eEzsignelementdependencyOperator::LT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("lte", Qt::CaseInsensitive) == 0) {
        m_value = eField_eEzsignelementdependencyOperator::LTE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("in", Qt::CaseInsensitive) == 0) {
        m_value = eField_eEzsignelementdependencyOperator::IN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("nin", Qt::CaseInsensitive) == 0) {
        m_value = eField_eEzsignelementdependencyOperator::NIN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("rg", Qt::CaseInsensitive) == 0) {
        m_value = eField_eEzsignelementdependencyOperator::RG;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("like", Qt::CaseInsensitive) == 0) {
        m_value = eField_eEzsignelementdependencyOperator::LIKE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("between", Qt::CaseInsensitive) == 0) {
        m_value = eField_eEzsignelementdependencyOperator::BETWEEN;
        m_value_isSet = m_value_isValid = true;
    }
}

void Field_eEzsignelementdependencyOperator::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString Field_eEzsignelementdependencyOperator::asJson() const {
    
    QString val;
    switch (m_value){
        case eField_eEzsignelementdependencyOperator::EQ:
            val = "eq";
            break;
        case eField_eEzsignelementdependencyOperator::NEQ:
            val = "neq";
            break;
        case eField_eEzsignelementdependencyOperator::GT:
            val = "gt";
            break;
        case eField_eEzsignelementdependencyOperator::GTE:
            val = "gte";
            break;
        case eField_eEzsignelementdependencyOperator::LT:
            val = "lt";
            break;
        case eField_eEzsignelementdependencyOperator::LTE:
            val = "lte";
            break;
        case eField_eEzsignelementdependencyOperator::IN:
            val = "in";
            break;
        case eField_eEzsignelementdependencyOperator::NIN:
            val = "nin";
            break;
        case eField_eEzsignelementdependencyOperator::RG:
            val = "rg";
            break;
        case eField_eEzsignelementdependencyOperator::LIKE:
            val = "like";
            break;
        case eField_eEzsignelementdependencyOperator::BETWEEN:
            val = "between";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue Field_eEzsignelementdependencyOperator::asJsonValue() const {
    
    return QJsonValue(asJson());
}


Field_eEzsignelementdependencyOperator::eField_eEzsignelementdependencyOperator Field_eEzsignelementdependencyOperator::getValue() const {
    return m_value;
}

void Field_eEzsignelementdependencyOperator::setValue(const Field_eEzsignelementdependencyOperator::eField_eEzsignelementdependencyOperator& value){
    m_value = value;
    m_value_isSet = true;
}
bool Field_eEzsignelementdependencyOperator::isSet() const {
    
    return m_value_isSet;
}

bool Field_eEzsignelementdependencyOperator::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace Ezmaxapi
