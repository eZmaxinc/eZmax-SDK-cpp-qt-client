/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Custom_CommunicationListElement_Response.h
 *
 * A Communication List Element
 */

#ifndef Custom_CommunicationListElement_Response_H
#define Custom_CommunicationListElement_Response_H

#include <QJsonObject>

#include "Computed_eCommunicationDirection.h"
#include "Field_eCommunicationImportance.h"
#include "Field_eCommunicationType.h"
#include <QString>

#include "Enum.h"
#include "Object.h"

namespace Ezmaxapi {

class Custom_CommunicationListElement_Response : public Object {
public:
    Custom_CommunicationListElement_Response();
    Custom_CommunicationListElement_Response(QString json);
    ~Custom_CommunicationListElement_Response() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getPkiCommunicationId() const;
    void setPkiCommunicationId(const qint32 &pki_communication_id);
    bool is_pki_communication_id_Set() const;
    bool is_pki_communication_id_Valid() const;

    QString getDtCreatedDate() const;
    void setDtCreatedDate(const QString &dt_created_date);
    bool is_dt_created_date_Set() const;
    bool is_dt_created_date_Valid() const;

    Computed_eCommunicationDirection getECommunicationDirection() const;
    void setECommunicationDirection(const Computed_eCommunicationDirection &e_communication_direction);
    bool is_e_communication_direction_Set() const;
    bool is_e_communication_direction_Valid() const;

    Field_eCommunicationImportance getECommunicationImportance() const;
    void setECommunicationImportance(const Field_eCommunicationImportance &e_communication_importance);
    bool is_e_communication_importance_Set() const;
    bool is_e_communication_importance_Valid() const;

    Field_eCommunicationType getECommunicationType() const;
    void setECommunicationType(const Field_eCommunicationType &e_communication_type);
    bool is_e_communication_type_Set() const;
    bool is_e_communication_type_Valid() const;

    qint32 getICommunicationrecipientCount() const;
    void setICommunicationrecipientCount(const qint32 &i_communicationrecipient_count);
    bool is_i_communicationrecipient_count_Set() const;
    bool is_i_communicationrecipient_count_Valid() const;

    QString getSCommunicationSubject() const;
    void setSCommunicationSubject(const QString &s_communication_subject);
    bool is_s_communication_subject_Set() const;
    bool is_s_communication_subject_Valid() const;

    QString getSCommunicationSender() const;
    void setSCommunicationSender(const QString &s_communication_sender);
    bool is_s_communication_sender_Set() const;
    bool is_s_communication_sender_Valid() const;

    QString getSCommunicationRecipient() const;
    void setSCommunicationRecipient(const QString &s_communication_recipient);
    bool is_s_communication_recipient_Set() const;
    bool is_s_communication_recipient_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_pki_communication_id;
    bool m_pki_communication_id_isSet;
    bool m_pki_communication_id_isValid;

    QString m_dt_created_date;
    bool m_dt_created_date_isSet;
    bool m_dt_created_date_isValid;

    Computed_eCommunicationDirection m_e_communication_direction;
    bool m_e_communication_direction_isSet;
    bool m_e_communication_direction_isValid;

    Field_eCommunicationImportance m_e_communication_importance;
    bool m_e_communication_importance_isSet;
    bool m_e_communication_importance_isValid;

    Field_eCommunicationType m_e_communication_type;
    bool m_e_communication_type_isSet;
    bool m_e_communication_type_isValid;

    qint32 m_i_communicationrecipient_count;
    bool m_i_communicationrecipient_count_isSet;
    bool m_i_communicationrecipient_count_isValid;

    QString m_s_communication_subject;
    bool m_s_communication_subject_isSet;
    bool m_s_communication_subject_isValid;

    QString m_s_communication_sender;
    bool m_s_communication_sender_isSet;
    bool m_s_communication_sender_isValid;

    QString m_s_communication_recipient;
    bool m_s_communication_recipient_isSet;
    bool m_s_communication_recipient_isValid;
};

} // namespace Ezmaxapi

Q_DECLARE_METATYPE(Ezmaxapi::Custom_CommunicationListElement_Response)

#endif // Custom_CommunicationListElement_Response_H
