/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "Communicationreference_Request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "Helpers.h"

namespace Ezmaxapi {

Communicationreference_Request::Communicationreference_Request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

Communicationreference_Request::Communicationreference_Request() {
    this->initializeModel();
}

Communicationreference_Request::~Communicationreference_Request() {}

void Communicationreference_Request::initializeModel() {

    m_pki_communicationreference_id_isSet = false;
    m_pki_communicationreference_id_isValid = false;

    m_fki_buyercontract_id_isSet = false;
    m_fki_buyercontract_id_isValid = false;

    m_fki_ezsignfolder_id_isSet = false;
    m_fki_ezsignfolder_id_isValid = false;

    m_fki_inscription_id_isSet = false;
    m_fki_inscription_id_isValid = false;

    m_fki_inscriptiontemp_id_isSet = false;
    m_fki_inscriptiontemp_id_isValid = false;

    m_fki_invoice_id_isSet = false;
    m_fki_invoice_id_isValid = false;

    m_fki_otherincome_id_isSet = false;
    m_fki_otherincome_id_isValid = false;

    m_fki_electronicfundstransfer_id_isSet = false;
    m_fki_electronicfundstransfer_id_isValid = false;

    m_fki_rejectedoffertopurchase_id_isSet = false;
    m_fki_rejectedoffertopurchase_id_isValid = false;
}

void Communicationreference_Request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void Communicationreference_Request::fromJsonObject(QJsonObject json) {

    m_pki_communicationreference_id_isValid = ::Ezmaxapi::fromJsonValue(m_pki_communicationreference_id, json[QString("pkiCommunicationreferenceID")]);
    m_pki_communicationreference_id_isSet = !json[QString("pkiCommunicationreferenceID")].isNull() && m_pki_communicationreference_id_isValid;

    m_fki_buyercontract_id_isValid = ::Ezmaxapi::fromJsonValue(m_fki_buyercontract_id, json[QString("fkiBuyercontractID")]);
    m_fki_buyercontract_id_isSet = !json[QString("fkiBuyercontractID")].isNull() && m_fki_buyercontract_id_isValid;

    m_fki_ezsignfolder_id_isValid = ::Ezmaxapi::fromJsonValue(m_fki_ezsignfolder_id, json[QString("fkiEzsignfolderID")]);
    m_fki_ezsignfolder_id_isSet = !json[QString("fkiEzsignfolderID")].isNull() && m_fki_ezsignfolder_id_isValid;

    m_fki_inscription_id_isValid = ::Ezmaxapi::fromJsonValue(m_fki_inscription_id, json[QString("fkiInscriptionID")]);
    m_fki_inscription_id_isSet = !json[QString("fkiInscriptionID")].isNull() && m_fki_inscription_id_isValid;

    m_fki_inscriptiontemp_id_isValid = ::Ezmaxapi::fromJsonValue(m_fki_inscriptiontemp_id, json[QString("fkiInscriptiontempID")]);
    m_fki_inscriptiontemp_id_isSet = !json[QString("fkiInscriptiontempID")].isNull() && m_fki_inscriptiontemp_id_isValid;

    m_fki_invoice_id_isValid = ::Ezmaxapi::fromJsonValue(m_fki_invoice_id, json[QString("fkiInvoiceID")]);
    m_fki_invoice_id_isSet = !json[QString("fkiInvoiceID")].isNull() && m_fki_invoice_id_isValid;

    m_fki_otherincome_id_isValid = ::Ezmaxapi::fromJsonValue(m_fki_otherincome_id, json[QString("fkiOtherincomeID")]);
    m_fki_otherincome_id_isSet = !json[QString("fkiOtherincomeID")].isNull() && m_fki_otherincome_id_isValid;

    m_fki_electronicfundstransfer_id_isValid = ::Ezmaxapi::fromJsonValue(m_fki_electronicfundstransfer_id, json[QString("fkiElectronicfundstransferID")]);
    m_fki_electronicfundstransfer_id_isSet = !json[QString("fkiElectronicfundstransferID")].isNull() && m_fki_electronicfundstransfer_id_isValid;

    m_fki_rejectedoffertopurchase_id_isValid = ::Ezmaxapi::fromJsonValue(m_fki_rejectedoffertopurchase_id, json[QString("fkiRejectedoffertopurchaseID")]);
    m_fki_rejectedoffertopurchase_id_isSet = !json[QString("fkiRejectedoffertopurchaseID")].isNull() && m_fki_rejectedoffertopurchase_id_isValid;
}

QString Communicationreference_Request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject Communicationreference_Request::asJsonObject() const {
    QJsonObject obj;
    if (m_pki_communicationreference_id_isSet) {
        obj.insert(QString("pkiCommunicationreferenceID"), ::Ezmaxapi::toJsonValue(m_pki_communicationreference_id));
    }
    if (m_fki_buyercontract_id_isSet) {
        obj.insert(QString("fkiBuyercontractID"), ::Ezmaxapi::toJsonValue(m_fki_buyercontract_id));
    }
    if (m_fki_ezsignfolder_id_isSet) {
        obj.insert(QString("fkiEzsignfolderID"), ::Ezmaxapi::toJsonValue(m_fki_ezsignfolder_id));
    }
    if (m_fki_inscription_id_isSet) {
        obj.insert(QString("fkiInscriptionID"), ::Ezmaxapi::toJsonValue(m_fki_inscription_id));
    }
    if (m_fki_inscriptiontemp_id_isSet) {
        obj.insert(QString("fkiInscriptiontempID"), ::Ezmaxapi::toJsonValue(m_fki_inscriptiontemp_id));
    }
    if (m_fki_invoice_id_isSet) {
        obj.insert(QString("fkiInvoiceID"), ::Ezmaxapi::toJsonValue(m_fki_invoice_id));
    }
    if (m_fki_otherincome_id_isSet) {
        obj.insert(QString("fkiOtherincomeID"), ::Ezmaxapi::toJsonValue(m_fki_otherincome_id));
    }
    if (m_fki_electronicfundstransfer_id_isSet) {
        obj.insert(QString("fkiElectronicfundstransferID"), ::Ezmaxapi::toJsonValue(m_fki_electronicfundstransfer_id));
    }
    if (m_fki_rejectedoffertopurchase_id_isSet) {
        obj.insert(QString("fkiRejectedoffertopurchaseID"), ::Ezmaxapi::toJsonValue(m_fki_rejectedoffertopurchase_id));
    }
    return obj;
}

qint32 Communicationreference_Request::getPkiCommunicationreferenceId() const {
    return m_pki_communicationreference_id;
}
void Communicationreference_Request::setPkiCommunicationreferenceId(const qint32 &pki_communicationreference_id) {
    m_pki_communicationreference_id = pki_communicationreference_id;
    m_pki_communicationreference_id_isSet = true;
}

bool Communicationreference_Request::is_pki_communicationreference_id_Set() const{
    return m_pki_communicationreference_id_isSet;
}

bool Communicationreference_Request::is_pki_communicationreference_id_Valid() const{
    return m_pki_communicationreference_id_isValid;
}

qint32 Communicationreference_Request::getFkiBuyercontractId() const {
    return m_fki_buyercontract_id;
}
void Communicationreference_Request::setFkiBuyercontractId(const qint32 &fki_buyercontract_id) {
    m_fki_buyercontract_id = fki_buyercontract_id;
    m_fki_buyercontract_id_isSet = true;
}

bool Communicationreference_Request::is_fki_buyercontract_id_Set() const{
    return m_fki_buyercontract_id_isSet;
}

bool Communicationreference_Request::is_fki_buyercontract_id_Valid() const{
    return m_fki_buyercontract_id_isValid;
}

qint32 Communicationreference_Request::getFkiEzsignfolderId() const {
    return m_fki_ezsignfolder_id;
}
void Communicationreference_Request::setFkiEzsignfolderId(const qint32 &fki_ezsignfolder_id) {
    m_fki_ezsignfolder_id = fki_ezsignfolder_id;
    m_fki_ezsignfolder_id_isSet = true;
}

bool Communicationreference_Request::is_fki_ezsignfolder_id_Set() const{
    return m_fki_ezsignfolder_id_isSet;
}

bool Communicationreference_Request::is_fki_ezsignfolder_id_Valid() const{
    return m_fki_ezsignfolder_id_isValid;
}

qint32 Communicationreference_Request::getFkiInscriptionId() const {
    return m_fki_inscription_id;
}
void Communicationreference_Request::setFkiInscriptionId(const qint32 &fki_inscription_id) {
    m_fki_inscription_id = fki_inscription_id;
    m_fki_inscription_id_isSet = true;
}

bool Communicationreference_Request::is_fki_inscription_id_Set() const{
    return m_fki_inscription_id_isSet;
}

bool Communicationreference_Request::is_fki_inscription_id_Valid() const{
    return m_fki_inscription_id_isValid;
}

qint32 Communicationreference_Request::getFkiInscriptiontempId() const {
    return m_fki_inscriptiontemp_id;
}
void Communicationreference_Request::setFkiInscriptiontempId(const qint32 &fki_inscriptiontemp_id) {
    m_fki_inscriptiontemp_id = fki_inscriptiontemp_id;
    m_fki_inscriptiontemp_id_isSet = true;
}

bool Communicationreference_Request::is_fki_inscriptiontemp_id_Set() const{
    return m_fki_inscriptiontemp_id_isSet;
}

bool Communicationreference_Request::is_fki_inscriptiontemp_id_Valid() const{
    return m_fki_inscriptiontemp_id_isValid;
}

qint32 Communicationreference_Request::getFkiInvoiceId() const {
    return m_fki_invoice_id;
}
void Communicationreference_Request::setFkiInvoiceId(const qint32 &fki_invoice_id) {
    m_fki_invoice_id = fki_invoice_id;
    m_fki_invoice_id_isSet = true;
}

bool Communicationreference_Request::is_fki_invoice_id_Set() const{
    return m_fki_invoice_id_isSet;
}

bool Communicationreference_Request::is_fki_invoice_id_Valid() const{
    return m_fki_invoice_id_isValid;
}

qint32 Communicationreference_Request::getFkiOtherincomeId() const {
    return m_fki_otherincome_id;
}
void Communicationreference_Request::setFkiOtherincomeId(const qint32 &fki_otherincome_id) {
    m_fki_otherincome_id = fki_otherincome_id;
    m_fki_otherincome_id_isSet = true;
}

bool Communicationreference_Request::is_fki_otherincome_id_Set() const{
    return m_fki_otherincome_id_isSet;
}

bool Communicationreference_Request::is_fki_otherincome_id_Valid() const{
    return m_fki_otherincome_id_isValid;
}

qint32 Communicationreference_Request::getFkiElectronicfundstransferId() const {
    return m_fki_electronicfundstransfer_id;
}
void Communicationreference_Request::setFkiElectronicfundstransferId(const qint32 &fki_electronicfundstransfer_id) {
    m_fki_electronicfundstransfer_id = fki_electronicfundstransfer_id;
    m_fki_electronicfundstransfer_id_isSet = true;
}

bool Communicationreference_Request::is_fki_electronicfundstransfer_id_Set() const{
    return m_fki_electronicfundstransfer_id_isSet;
}

bool Communicationreference_Request::is_fki_electronicfundstransfer_id_Valid() const{
    return m_fki_electronicfundstransfer_id_isValid;
}

qint32 Communicationreference_Request::getFkiRejectedoffertopurchaseId() const {
    return m_fki_rejectedoffertopurchase_id;
}
void Communicationreference_Request::setFkiRejectedoffertopurchaseId(const qint32 &fki_rejectedoffertopurchase_id) {
    m_fki_rejectedoffertopurchase_id = fki_rejectedoffertopurchase_id;
    m_fki_rejectedoffertopurchase_id_isSet = true;
}

bool Communicationreference_Request::is_fki_rejectedoffertopurchase_id_Set() const{
    return m_fki_rejectedoffertopurchase_id_isSet;
}

bool Communicationreference_Request::is_fki_rejectedoffertopurchase_id_Valid() const{
    return m_fki_rejectedoffertopurchase_id_isValid;
}

bool Communicationreference_Request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_pki_communicationreference_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fki_buyercontract_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fki_ezsignfolder_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fki_inscription_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fki_inscriptiontemp_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fki_invoice_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fki_otherincome_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fki_electronicfundstransfer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fki_rejectedoffertopurchase_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool Communicationreference_Request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace Ezmaxapi
