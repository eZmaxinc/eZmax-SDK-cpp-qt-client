/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "Ezmaxcase_RequestPatch.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "Helpers.h"

namespace Ezmaxapi {

Ezmaxcase_RequestPatch::Ezmaxcase_RequestPatch(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

Ezmaxcase_RequestPatch::Ezmaxcase_RequestPatch() {
    this->initializeModel();
}

Ezmaxcase_RequestPatch::~Ezmaxcase_RequestPatch() {}

void Ezmaxcase_RequestPatch::initializeModel() {

    m_fki_ezmaxcasequeue_id_isSet = false;
    m_fki_ezmaxcasequeue_id_isValid = false;

    m_fki_ezmaxcasepriority_id_isSet = false;
    m_fki_ezmaxcasepriority_id_isValid = false;

    m_fki_ezmaxcasestate_id_isSet = false;
    m_fki_ezmaxcasestate_id_isValid = false;

    m_fki_ezmaxfeaturerequest_id_isSet = false;
    m_fki_ezmaxfeaturerequest_id_isValid = false;

    m_fki_ezmaxknownissue_id_isSet = false;
    m_fki_ezmaxknownissue_id_isValid = false;

    m_fki_user_id_owner_isSet = false;
    m_fki_user_id_owner_isValid = false;
}

void Ezmaxcase_RequestPatch::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void Ezmaxcase_RequestPatch::fromJsonObject(QJsonObject json) {

    m_fki_ezmaxcasequeue_id_isValid = ::Ezmaxapi::fromJsonValue(m_fki_ezmaxcasequeue_id, json[QString("fkiEzmaxcasequeueID")]);
    m_fki_ezmaxcasequeue_id_isSet = !json[QString("fkiEzmaxcasequeueID")].isNull() && m_fki_ezmaxcasequeue_id_isValid;

    m_fki_ezmaxcasepriority_id_isValid = ::Ezmaxapi::fromJsonValue(m_fki_ezmaxcasepriority_id, json[QString("fkiEzmaxcasepriorityID")]);
    m_fki_ezmaxcasepriority_id_isSet = !json[QString("fkiEzmaxcasepriorityID")].isNull() && m_fki_ezmaxcasepriority_id_isValid;

    m_fki_ezmaxcasestate_id_isValid = ::Ezmaxapi::fromJsonValue(m_fki_ezmaxcasestate_id, json[QString("fkiEzmaxcasestateID")]);
    m_fki_ezmaxcasestate_id_isSet = !json[QString("fkiEzmaxcasestateID")].isNull() && m_fki_ezmaxcasestate_id_isValid;

    m_fki_ezmaxfeaturerequest_id_isValid = ::Ezmaxapi::fromJsonValue(m_fki_ezmaxfeaturerequest_id, json[QString("fkiEzmaxfeaturerequestID")]);
    m_fki_ezmaxfeaturerequest_id_isSet = !json[QString("fkiEzmaxfeaturerequestID")].isNull() && m_fki_ezmaxfeaturerequest_id_isValid;

    m_fki_ezmaxknownissue_id_isValid = ::Ezmaxapi::fromJsonValue(m_fki_ezmaxknownissue_id, json[QString("fkiEzmaxknownissueID")]);
    m_fki_ezmaxknownissue_id_isSet = !json[QString("fkiEzmaxknownissueID")].isNull() && m_fki_ezmaxknownissue_id_isValid;

    m_fki_user_id_owner_isValid = ::Ezmaxapi::fromJsonValue(m_fki_user_id_owner, json[QString("fkiUserIDOwner")]);
    m_fki_user_id_owner_isSet = !json[QString("fkiUserIDOwner")].isNull() && m_fki_user_id_owner_isValid;
}

QString Ezmaxcase_RequestPatch::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject Ezmaxcase_RequestPatch::asJsonObject() const {
    QJsonObject obj;
    if (m_fki_ezmaxcasequeue_id_isSet) {
        obj.insert(QString("fkiEzmaxcasequeueID"), ::Ezmaxapi::toJsonValue(m_fki_ezmaxcasequeue_id));
    }
    if (m_fki_ezmaxcasepriority_id_isSet) {
        obj.insert(QString("fkiEzmaxcasepriorityID"), ::Ezmaxapi::toJsonValue(m_fki_ezmaxcasepriority_id));
    }
    if (m_fki_ezmaxcasestate_id_isSet) {
        obj.insert(QString("fkiEzmaxcasestateID"), ::Ezmaxapi::toJsonValue(m_fki_ezmaxcasestate_id));
    }
    if (m_fki_ezmaxfeaturerequest_id_isSet) {
        obj.insert(QString("fkiEzmaxfeaturerequestID"), ::Ezmaxapi::toJsonValue(m_fki_ezmaxfeaturerequest_id));
    }
    if (m_fki_ezmaxknownissue_id_isSet) {
        obj.insert(QString("fkiEzmaxknownissueID"), ::Ezmaxapi::toJsonValue(m_fki_ezmaxknownissue_id));
    }
    if (m_fki_user_id_owner_isSet) {
        obj.insert(QString("fkiUserIDOwner"), ::Ezmaxapi::toJsonValue(m_fki_user_id_owner));
    }
    return obj;
}

qint32 Ezmaxcase_RequestPatch::getFkiEzmaxcasequeueId() const {
    return m_fki_ezmaxcasequeue_id;
}
void Ezmaxcase_RequestPatch::setFkiEzmaxcasequeueId(const qint32 &fki_ezmaxcasequeue_id) {
    m_fki_ezmaxcasequeue_id = fki_ezmaxcasequeue_id;
    m_fki_ezmaxcasequeue_id_isSet = true;
}

bool Ezmaxcase_RequestPatch::is_fki_ezmaxcasequeue_id_Set() const{
    return m_fki_ezmaxcasequeue_id_isSet;
}

bool Ezmaxcase_RequestPatch::is_fki_ezmaxcasequeue_id_Valid() const{
    return m_fki_ezmaxcasequeue_id_isValid;
}

qint32 Ezmaxcase_RequestPatch::getFkiEzmaxcasepriorityId() const {
    return m_fki_ezmaxcasepriority_id;
}
void Ezmaxcase_RequestPatch::setFkiEzmaxcasepriorityId(const qint32 &fki_ezmaxcasepriority_id) {
    m_fki_ezmaxcasepriority_id = fki_ezmaxcasepriority_id;
    m_fki_ezmaxcasepriority_id_isSet = true;
}

bool Ezmaxcase_RequestPatch::is_fki_ezmaxcasepriority_id_Set() const{
    return m_fki_ezmaxcasepriority_id_isSet;
}

bool Ezmaxcase_RequestPatch::is_fki_ezmaxcasepriority_id_Valid() const{
    return m_fki_ezmaxcasepriority_id_isValid;
}

qint32 Ezmaxcase_RequestPatch::getFkiEzmaxcasestateId() const {
    return m_fki_ezmaxcasestate_id;
}
void Ezmaxcase_RequestPatch::setFkiEzmaxcasestateId(const qint32 &fki_ezmaxcasestate_id) {
    m_fki_ezmaxcasestate_id = fki_ezmaxcasestate_id;
    m_fki_ezmaxcasestate_id_isSet = true;
}

bool Ezmaxcase_RequestPatch::is_fki_ezmaxcasestate_id_Set() const{
    return m_fki_ezmaxcasestate_id_isSet;
}

bool Ezmaxcase_RequestPatch::is_fki_ezmaxcasestate_id_Valid() const{
    return m_fki_ezmaxcasestate_id_isValid;
}

qint32 Ezmaxcase_RequestPatch::getFkiEzmaxfeaturerequestId() const {
    return m_fki_ezmaxfeaturerequest_id;
}
void Ezmaxcase_RequestPatch::setFkiEzmaxfeaturerequestId(const qint32 &fki_ezmaxfeaturerequest_id) {
    m_fki_ezmaxfeaturerequest_id = fki_ezmaxfeaturerequest_id;
    m_fki_ezmaxfeaturerequest_id_isSet = true;
}

bool Ezmaxcase_RequestPatch::is_fki_ezmaxfeaturerequest_id_Set() const{
    return m_fki_ezmaxfeaturerequest_id_isSet;
}

bool Ezmaxcase_RequestPatch::is_fki_ezmaxfeaturerequest_id_Valid() const{
    return m_fki_ezmaxfeaturerequest_id_isValid;
}

qint32 Ezmaxcase_RequestPatch::getFkiEzmaxknownissueId() const {
    return m_fki_ezmaxknownissue_id;
}
void Ezmaxcase_RequestPatch::setFkiEzmaxknownissueId(const qint32 &fki_ezmaxknownissue_id) {
    m_fki_ezmaxknownissue_id = fki_ezmaxknownissue_id;
    m_fki_ezmaxknownissue_id_isSet = true;
}

bool Ezmaxcase_RequestPatch::is_fki_ezmaxknownissue_id_Set() const{
    return m_fki_ezmaxknownissue_id_isSet;
}

bool Ezmaxcase_RequestPatch::is_fki_ezmaxknownissue_id_Valid() const{
    return m_fki_ezmaxknownissue_id_isValid;
}

qint32 Ezmaxcase_RequestPatch::getFkiUserIdOwner() const {
    return m_fki_user_id_owner;
}
void Ezmaxcase_RequestPatch::setFkiUserIdOwner(const qint32 &fki_user_id_owner) {
    m_fki_user_id_owner = fki_user_id_owner;
    m_fki_user_id_owner_isSet = true;
}

bool Ezmaxcase_RequestPatch::is_fki_user_id_owner_Set() const{
    return m_fki_user_id_owner_isSet;
}

bool Ezmaxcase_RequestPatch::is_fki_user_id_owner_Valid() const{
    return m_fki_user_id_owner_isValid;
}

bool Ezmaxcase_RequestPatch::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_fki_ezmaxcasequeue_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fki_ezmaxcasepriority_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fki_ezmaxcasestate_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fki_ezmaxfeaturerequest_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fki_ezmaxknownissue_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fki_user_id_owner_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool Ezmaxcase_RequestPatch::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace Ezmaxapi
