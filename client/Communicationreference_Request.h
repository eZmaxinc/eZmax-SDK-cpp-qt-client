/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Communicationreference_Request.h
 *
 * A Communicationreference Object
 */

#ifndef Communicationreference_Request_H
#define Communicationreference_Request_H

#include <QJsonObject>


#include "Enum.h"
#include "Object.h"

namespace Ezmaxapi {

class Communicationreference_Request : public Object {
public:
    Communicationreference_Request();
    Communicationreference_Request(QString json);
    ~Communicationreference_Request() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getPkiCommunicationreferenceId() const;
    void setPkiCommunicationreferenceId(const qint32 &pki_communicationreference_id);
    bool is_pki_communicationreference_id_Set() const;
    bool is_pki_communicationreference_id_Valid() const;

    qint32 getFkiBuyercontractId() const;
    void setFkiBuyercontractId(const qint32 &fki_buyercontract_id);
    bool is_fki_buyercontract_id_Set() const;
    bool is_fki_buyercontract_id_Valid() const;

    qint32 getFkiEzsignfolderId() const;
    void setFkiEzsignfolderId(const qint32 &fki_ezsignfolder_id);
    bool is_fki_ezsignfolder_id_Set() const;
    bool is_fki_ezsignfolder_id_Valid() const;

    qint32 getFkiInscriptionId() const;
    void setFkiInscriptionId(const qint32 &fki_inscription_id);
    bool is_fki_inscription_id_Set() const;
    bool is_fki_inscription_id_Valid() const;

    qint32 getFkiInscriptiontempId() const;
    void setFkiInscriptiontempId(const qint32 &fki_inscriptiontemp_id);
    bool is_fki_inscriptiontemp_id_Set() const;
    bool is_fki_inscriptiontemp_id_Valid() const;

    qint32 getFkiInvoiceId() const;
    void setFkiInvoiceId(const qint32 &fki_invoice_id);
    bool is_fki_invoice_id_Set() const;
    bool is_fki_invoice_id_Valid() const;

    qint32 getFkiOtherincomeId() const;
    void setFkiOtherincomeId(const qint32 &fki_otherincome_id);
    bool is_fki_otherincome_id_Set() const;
    bool is_fki_otherincome_id_Valid() const;

    qint32 getFkiElectronicfundstransferId() const;
    void setFkiElectronicfundstransferId(const qint32 &fki_electronicfundstransfer_id);
    bool is_fki_electronicfundstransfer_id_Set() const;
    bool is_fki_electronicfundstransfer_id_Valid() const;

    qint32 getFkiRejectedoffertopurchaseId() const;
    void setFkiRejectedoffertopurchaseId(const qint32 &fki_rejectedoffertopurchase_id);
    bool is_fki_rejectedoffertopurchase_id_Set() const;
    bool is_fki_rejectedoffertopurchase_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_pki_communicationreference_id;
    bool m_pki_communicationreference_id_isSet;
    bool m_pki_communicationreference_id_isValid;

    qint32 m_fki_buyercontract_id;
    bool m_fki_buyercontract_id_isSet;
    bool m_fki_buyercontract_id_isValid;

    qint32 m_fki_ezsignfolder_id;
    bool m_fki_ezsignfolder_id_isSet;
    bool m_fki_ezsignfolder_id_isValid;

    qint32 m_fki_inscription_id;
    bool m_fki_inscription_id_isSet;
    bool m_fki_inscription_id_isValid;

    qint32 m_fki_inscriptiontemp_id;
    bool m_fki_inscriptiontemp_id_isSet;
    bool m_fki_inscriptiontemp_id_isValid;

    qint32 m_fki_invoice_id;
    bool m_fki_invoice_id_isSet;
    bool m_fki_invoice_id_isValid;

    qint32 m_fki_otherincome_id;
    bool m_fki_otherincome_id_isSet;
    bool m_fki_otherincome_id_isValid;

    qint32 m_fki_electronicfundstransfer_id;
    bool m_fki_electronicfundstransfer_id_isSet;
    bool m_fki_electronicfundstransfer_id_isValid;

    qint32 m_fki_rejectedoffertopurchase_id;
    bool m_fki_rejectedoffertopurchase_id_isSet;
    bool m_fki_rejectedoffertopurchase_id_isValid;
};

} // namespace Ezmaxapi

Q_DECLARE_METATYPE(Ezmaxapi::Communicationreference_Request)

#endif // Communicationreference_Request_H
