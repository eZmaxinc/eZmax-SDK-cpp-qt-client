/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef _ObjectEzsignfolderApi_H
#define _ObjectEzsignfolderApi_H

#include "Helpers.h"
#include "HttpRequest.h"
#include "ServerConfiguration.h"
#include "Oauth.h"

#include "Common_Response.h"
#include "Common_Response_Error.h"
#include "Ezsignfolder_batchDownload_v1_Request.h"
#include "Ezsignfolder_createObject_v1_Request.h"
#include "Ezsignfolder_createObject_v1_Response.h"
#include "Ezsignfolder_createObject_v2_Request.h"
#include "Ezsignfolder_createObject_v2_Response.h"
#include "Ezsignfolder_createObject_v3_Request.h"
#include "Ezsignfolder_createObject_v3_Response.h"
#include "Ezsignfolder_disposeEzsignfolders_v1_Request.h"
#include "Ezsignfolder_editObject_v3_Request.h"
#include "Ezsignfolder_getActionableElements_v1_Response.h"
#include "Ezsignfolder_getAttachmentCount_v1_Response.h"
#include "Ezsignfolder_getAttachments_v1_Response.h"
#include "Ezsignfolder_getCommunicationCount_v1_Response.h"
#include "Ezsignfolder_getCommunicationList_v1_Response.h"
#include "Ezsignfolder_getCommunicationrecipients_v1_Response.h"
#include "Ezsignfolder_getCommunicationsenders_v1_Response.h"
#include "Ezsignfolder_getEzsigndocuments_v1_Response.h"
#include "Ezsignfolder_getEzsignfoldersignerassociations_v1_Response.h"
#include "Ezsignfolder_getEzsignsignaturesAutomatic_v1_Response.h"
#include "Ezsignfolder_getFormsData_v1_Response.h"
#include "Ezsignfolder_getList_v1_Response.h"
#include "Ezsignfolder_getObject_v1_Response.h"
#include "Ezsignfolder_getObject_v2_Response.h"
#include "Ezsignfolder_getObject_v3_Response.h"
#include "Ezsignfolder_importEzsignfoldersignerassociations_v1_Request.h"
#include "Ezsignfolder_importEzsignfoldersignerassociations_v1_Response.h"
#include "Ezsignfolder_importEzsigntemplatepackage_v1_Request.h"
#include "Ezsignfolder_importEzsigntemplatepackage_v1_Response.h"
#include "Ezsignfolder_reorder_v1_Request.h"
#include "Ezsignfolder_reorder_v2_Request.h"
#include "Ezsignfolder_send_v1_Request.h"
#include "Ezsignfolder_send_v3_Request.h"
#include "Header_Accept_Language.h"
#include "HttpFileElement.h"
#include "Object.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace Ezmaxapi {

class ObjectEzsignfolderApi : public QObject {
    Q_OBJECT

public:
    ObjectEzsignfolderApi(const int timeOut = 0);
    ~ObjectEzsignfolderApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, ServerVariable> &variables = QMap<QString, ServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, ServerVariable> &variables =  QMap<QString, ServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, ServerVariable> &variables =  QMap<QString, ServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  pki_ezsignfolder_id qint32 [required]
    * @param[in]  body Object [required]
    */
    virtual void ezsignfolderArchiveV1(const qint32 &pki_ezsignfolder_id, const Object &body);

    /**
    * @param[in]  pki_ezsignfolder_id qint32 [required]
    * @param[in]  ezsignfolder_batch_download_v1_request Ezsignfolder_batchDownload_v1_Request [required]
    */
    virtual void ezsignfolderBatchDownloadV1(const qint32 &pki_ezsignfolder_id, const Ezsignfolder_batchDownload_v1_Request &ezsignfolder_batch_download_v1_request);

    /**
    * @param[in]  ezsignfolder_create_object_v1_request QList<Ezsignfolder_createObject_v1_Request> [required]
    */
    Q_DECL_DEPRECATED virtual void ezsignfolderCreateObjectV1(const QList<Ezsignfolder_createObject_v1_Request> &ezsignfolder_create_object_v1_request);

    /**
    * @param[in]  ezsignfolder_create_object_v2_request Ezsignfolder_createObject_v2_Request [required]
    */
    Q_DECL_DEPRECATED virtual void ezsignfolderCreateObjectV2(const Ezsignfolder_createObject_v2_Request &ezsignfolder_create_object_v2_request);

    /**
    * @param[in]  ezsignfolder_create_object_v3_request Ezsignfolder_createObject_v3_Request [required]
    */
    virtual void ezsignfolderCreateObjectV3(const Ezsignfolder_createObject_v3_Request &ezsignfolder_create_object_v3_request);

    /**
    * @param[in]  pki_ezsignfolder_id qint32 [required]
    */
    virtual void ezsignfolderDeleteObjectV1(const qint32 &pki_ezsignfolder_id);

    /**
    * @param[in]  ezsignfolder_dispose_ezsignfolders_v1_request Ezsignfolder_disposeEzsignfolders_v1_Request [required]
    */
    virtual void ezsignfolderDisposeEzsignfoldersV1(const Ezsignfolder_disposeEzsignfolders_v1_Request &ezsignfolder_dispose_ezsignfolders_v1_request);

    /**
    * @param[in]  pki_ezsignfolder_id qint32 [required]
    * @param[in]  body Object [required]
    */
    virtual void ezsignfolderDisposeV1(const qint32 &pki_ezsignfolder_id, const Object &body);

    /**
    * @param[in]  pki_ezsignfolder_id qint32 [required]
    * @param[in]  ezsignfolder_edit_object_v3_request Ezsignfolder_editObject_v3_Request [required]
    */
    virtual void ezsignfolderEditObjectV3(const qint32 &pki_ezsignfolder_id, const Ezsignfolder_editObject_v3_Request &ezsignfolder_edit_object_v3_request);

    /**
    * @param[in]  pki_ezsignfolder_id qint32 [required]
    * @param[in]  body Object [required]
    */
    virtual void ezsignfolderEndPrematurelyV1(const qint32 &pki_ezsignfolder_id, const Object &body);

    /**
    * @param[in]  pki_ezsignfolder_id qint32 [required]
    */
    virtual void ezsignfolderGetActionableElementsV1(const qint32 &pki_ezsignfolder_id);

    /**
    * @param[in]  pki_ezsignfolder_id qint32 [required]
    */
    virtual void ezsignfolderGetAttachmentCountV1(const qint32 &pki_ezsignfolder_id);

    /**
    * @param[in]  pki_ezsignfolder_id qint32 [required]
    */
    virtual void ezsignfolderGetAttachmentsV1(const qint32 &pki_ezsignfolder_id);

    /**
    * @param[in]  pki_ezsignfolder_id qint32 [required]
    */
    virtual void ezsignfolderGetCommunicationCountV1(const qint32 &pki_ezsignfolder_id);

    /**
    * @param[in]  pki_ezsignfolder_id qint32 [required]
    */
    virtual void ezsignfolderGetCommunicationListV1(const qint32 &pki_ezsignfolder_id);

    /**
    * @param[in]  pki_ezsignfolder_id qint32 [required]
    */
    virtual void ezsignfolderGetCommunicationrecipientsV1(const qint32 &pki_ezsignfolder_id);

    /**
    * @param[in]  pki_ezsignfolder_id qint32 [required]
    */
    virtual void ezsignfolderGetCommunicationsendersV1(const qint32 &pki_ezsignfolder_id);

    /**
    * @param[in]  pki_ezsignfolder_id qint32 [required]
    */
    virtual void ezsignfolderGetEzsigndocumentsV1(const qint32 &pki_ezsignfolder_id);

    /**
    * @param[in]  pki_ezsignfolder_id qint32 [required]
    */
    virtual void ezsignfolderGetEzsignfoldersignerassociationsV1(const qint32 &pki_ezsignfolder_id);

    /**
    * @param[in]  pki_ezsignfolder_id qint32 [required]
    */
    virtual void ezsignfolderGetEzsignsignaturesAutomaticV1(const qint32 &pki_ezsignfolder_id);

    /**
    * @param[in]  pki_ezsignfolder_id qint32 [required]
    */
    virtual void ezsignfolderGetFormsDataV1(const qint32 &pki_ezsignfolder_id);

    /**
    * @param[in]  e_order_by QString [optional]
    * @param[in]  i_row_max qint32 [optional]
    * @param[in]  i_row_offset qint32 [optional]
    * @param[in]  accept_language Header_Accept_Language [optional]
    * @param[in]  s_filter QString [optional]
    */
    virtual void ezsignfolderGetListV1(const ::Ezmaxapi::OptionalParam<QString> &e_order_by = ::Ezmaxapi::OptionalParam<QString>(), const ::Ezmaxapi::OptionalParam<qint32> &i_row_max = ::Ezmaxapi::OptionalParam<qint32>(), const ::Ezmaxapi::OptionalParam<qint32> &i_row_offset = ::Ezmaxapi::OptionalParam<qint32>(), const ::Ezmaxapi::OptionalParam<Header_Accept_Language> &accept_language = ::Ezmaxapi::OptionalParam<Header_Accept_Language>(), const ::Ezmaxapi::OptionalParam<QString> &s_filter = ::Ezmaxapi::OptionalParam<QString>());

    /**
    * @param[in]  pki_ezsignfolder_id qint32 [required]
    */
    Q_DECL_DEPRECATED virtual void ezsignfolderGetObjectV1(const qint32 &pki_ezsignfolder_id);

    /**
    * @param[in]  pki_ezsignfolder_id qint32 [required]
    */
    Q_DECL_DEPRECATED virtual void ezsignfolderGetObjectV2(const qint32 &pki_ezsignfolder_id);

    /**
    * @param[in]  pki_ezsignfolder_id qint32 [required]
    */
    virtual void ezsignfolderGetObjectV3(const qint32 &pki_ezsignfolder_id);

    /**
    * @param[in]  pki_ezsignfolder_id qint32 [required]
    * @param[in]  ezsignfolder_import_ezsignfoldersignerassociations_v1_request Ezsignfolder_importEzsignfoldersignerassociations_v1_Request [required]
    */
    virtual void ezsignfolderImportEzsignfoldersignerassociationsV1(const qint32 &pki_ezsignfolder_id, const Ezsignfolder_importEzsignfoldersignerassociations_v1_Request &ezsignfolder_import_ezsignfoldersignerassociations_v1_request);

    /**
    * @param[in]  pki_ezsignfolder_id qint32 [required]
    * @param[in]  ezsignfolder_import_ezsigntemplatepackage_v1_request Ezsignfolder_importEzsigntemplatepackage_v1_Request [required]
    */
    virtual void ezsignfolderImportEzsigntemplatepackageV1(const qint32 &pki_ezsignfolder_id, const Ezsignfolder_importEzsigntemplatepackage_v1_Request &ezsignfolder_import_ezsigntemplatepackage_v1_request);

    /**
    * @param[in]  pki_ezsignfolder_id qint32 [required]
    * @param[in]  ezsignfolder_reorder_v1_request Ezsignfolder_reorder_v1_Request [required]
    */
    Q_DECL_DEPRECATED virtual void ezsignfolderReorderV1(const qint32 &pki_ezsignfolder_id, const Ezsignfolder_reorder_v1_Request &ezsignfolder_reorder_v1_request);

    /**
    * @param[in]  pki_ezsignfolder_id qint32 [required]
    * @param[in]  ezsignfolder_reorder_v2_request Ezsignfolder_reorder_v2_Request [required]
    */
    virtual void ezsignfolderReorderV2(const qint32 &pki_ezsignfolder_id, const Ezsignfolder_reorder_v2_Request &ezsignfolder_reorder_v2_request);

    /**
    * @param[in]  pki_ezsignfolder_id qint32 [required]
    * @param[in]  ezsignfolder_send_v1_request Ezsignfolder_send_v1_Request [required]
    */
    Q_DECL_DEPRECATED virtual void ezsignfolderSendV1(const qint32 &pki_ezsignfolder_id, const Ezsignfolder_send_v1_Request &ezsignfolder_send_v1_request);

    /**
    * @param[in]  pki_ezsignfolder_id qint32 [required]
    * @param[in]  ezsignfolder_send_v3_request Ezsignfolder_send_v3_Request [required]
    */
    virtual void ezsignfolderSendV3(const qint32 &pki_ezsignfolder_id, const Ezsignfolder_send_v3_Request &ezsignfolder_send_v3_request);

    /**
    * @param[in]  pki_ezsignfolder_id qint32 [required]
    * @param[in]  body Object [required]
    */
    virtual void ezsignfolderUnsendV1(const qint32 &pki_ezsignfolder_id, const Object &body);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<ServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    HttpRequestInput _latestInput;
    HttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void ezsignfolderArchiveV1Callback(HttpRequestWorker *worker);
    void ezsignfolderBatchDownloadV1Callback(HttpRequestWorker *worker);
    void ezsignfolderCreateObjectV1Callback(HttpRequestWorker *worker);
    void ezsignfolderCreateObjectV2Callback(HttpRequestWorker *worker);
    void ezsignfolderCreateObjectV3Callback(HttpRequestWorker *worker);
    void ezsignfolderDeleteObjectV1Callback(HttpRequestWorker *worker);
    void ezsignfolderDisposeEzsignfoldersV1Callback(HttpRequestWorker *worker);
    void ezsignfolderDisposeV1Callback(HttpRequestWorker *worker);
    void ezsignfolderEditObjectV3Callback(HttpRequestWorker *worker);
    void ezsignfolderEndPrematurelyV1Callback(HttpRequestWorker *worker);
    void ezsignfolderGetActionableElementsV1Callback(HttpRequestWorker *worker);
    void ezsignfolderGetAttachmentCountV1Callback(HttpRequestWorker *worker);
    void ezsignfolderGetAttachmentsV1Callback(HttpRequestWorker *worker);
    void ezsignfolderGetCommunicationCountV1Callback(HttpRequestWorker *worker);
    void ezsignfolderGetCommunicationListV1Callback(HttpRequestWorker *worker);
    void ezsignfolderGetCommunicationrecipientsV1Callback(HttpRequestWorker *worker);
    void ezsignfolderGetCommunicationsendersV1Callback(HttpRequestWorker *worker);
    void ezsignfolderGetEzsigndocumentsV1Callback(HttpRequestWorker *worker);
    void ezsignfolderGetEzsignfoldersignerassociationsV1Callback(HttpRequestWorker *worker);
    void ezsignfolderGetEzsignsignaturesAutomaticV1Callback(HttpRequestWorker *worker);
    void ezsignfolderGetFormsDataV1Callback(HttpRequestWorker *worker);
    void ezsignfolderGetListV1Callback(HttpRequestWorker *worker);
    void ezsignfolderGetObjectV1Callback(HttpRequestWorker *worker);
    void ezsignfolderGetObjectV2Callback(HttpRequestWorker *worker);
    void ezsignfolderGetObjectV3Callback(HttpRequestWorker *worker);
    void ezsignfolderImportEzsignfoldersignerassociationsV1Callback(HttpRequestWorker *worker);
    void ezsignfolderImportEzsigntemplatepackageV1Callback(HttpRequestWorker *worker);
    void ezsignfolderReorderV1Callback(HttpRequestWorker *worker);
    void ezsignfolderReorderV2Callback(HttpRequestWorker *worker);
    void ezsignfolderSendV1Callback(HttpRequestWorker *worker);
    void ezsignfolderSendV3Callback(HttpRequestWorker *worker);
    void ezsignfolderUnsendV1Callback(HttpRequestWorker *worker);

Q_SIGNALS:

    void ezsignfolderArchiveV1Signal(Common_Response summary);
    void ezsignfolderBatchDownloadV1Signal(HttpFileElement summary);
    void ezsignfolderCreateObjectV1Signal(Ezsignfolder_createObject_v1_Response summary);
    void ezsignfolderCreateObjectV2Signal(Ezsignfolder_createObject_v2_Response summary);
    void ezsignfolderCreateObjectV3Signal(Ezsignfolder_createObject_v3_Response summary);
    void ezsignfolderDeleteObjectV1Signal(Common_Response summary);
    void ezsignfolderDisposeEzsignfoldersV1Signal(Common_Response summary);
    void ezsignfolderDisposeV1Signal(Common_Response summary);
    void ezsignfolderEditObjectV3Signal(Common_Response summary);
    void ezsignfolderEndPrematurelyV1Signal(Common_Response summary);
    void ezsignfolderGetActionableElementsV1Signal(Ezsignfolder_getActionableElements_v1_Response summary);
    void ezsignfolderGetAttachmentCountV1Signal(Ezsignfolder_getAttachmentCount_v1_Response summary);
    void ezsignfolderGetAttachmentsV1Signal(Ezsignfolder_getAttachments_v1_Response summary);
    void ezsignfolderGetCommunicationCountV1Signal(Ezsignfolder_getCommunicationCount_v1_Response summary);
    void ezsignfolderGetCommunicationListV1Signal(Ezsignfolder_getCommunicationList_v1_Response summary);
    void ezsignfolderGetCommunicationrecipientsV1Signal(Ezsignfolder_getCommunicationrecipients_v1_Response summary);
    void ezsignfolderGetCommunicationsendersV1Signal(Ezsignfolder_getCommunicationsenders_v1_Response summary);
    void ezsignfolderGetEzsigndocumentsV1Signal(Ezsignfolder_getEzsigndocuments_v1_Response summary);
    void ezsignfolderGetEzsignfoldersignerassociationsV1Signal(Ezsignfolder_getEzsignfoldersignerassociations_v1_Response summary);
    void ezsignfolderGetEzsignsignaturesAutomaticV1Signal(Ezsignfolder_getEzsignsignaturesAutomatic_v1_Response summary);
    void ezsignfolderGetFormsDataV1Signal(Ezsignfolder_getFormsData_v1_Response summary);
    void ezsignfolderGetListV1Signal(Ezsignfolder_getList_v1_Response summary);
    void ezsignfolderGetObjectV1Signal(Ezsignfolder_getObject_v1_Response summary);
    void ezsignfolderGetObjectV2Signal(Ezsignfolder_getObject_v2_Response summary);
    void ezsignfolderGetObjectV3Signal(Ezsignfolder_getObject_v3_Response summary);
    void ezsignfolderImportEzsignfoldersignerassociationsV1Signal(Ezsignfolder_importEzsignfoldersignerassociations_v1_Response summary);
    void ezsignfolderImportEzsigntemplatepackageV1Signal(Ezsignfolder_importEzsigntemplatepackage_v1_Response summary);
    void ezsignfolderReorderV1Signal(Common_Response summary);
    void ezsignfolderReorderV2Signal(Common_Response summary);
    void ezsignfolderSendV1Signal(Common_Response summary);
    void ezsignfolderSendV3Signal(Common_Response summary);
    void ezsignfolderUnsendV1Signal(Common_Response summary);


    void ezsignfolderArchiveV1SignalFull(HttpRequestWorker *worker, Common_Response summary);
    void ezsignfolderBatchDownloadV1SignalFull(HttpRequestWorker *worker, HttpFileElement summary);
    void ezsignfolderCreateObjectV1SignalFull(HttpRequestWorker *worker, Ezsignfolder_createObject_v1_Response summary);
    void ezsignfolderCreateObjectV2SignalFull(HttpRequestWorker *worker, Ezsignfolder_createObject_v2_Response summary);
    void ezsignfolderCreateObjectV3SignalFull(HttpRequestWorker *worker, Ezsignfolder_createObject_v3_Response summary);
    void ezsignfolderDeleteObjectV1SignalFull(HttpRequestWorker *worker, Common_Response summary);
    void ezsignfolderDisposeEzsignfoldersV1SignalFull(HttpRequestWorker *worker, Common_Response summary);
    void ezsignfolderDisposeV1SignalFull(HttpRequestWorker *worker, Common_Response summary);
    void ezsignfolderEditObjectV3SignalFull(HttpRequestWorker *worker, Common_Response summary);
    void ezsignfolderEndPrematurelyV1SignalFull(HttpRequestWorker *worker, Common_Response summary);
    void ezsignfolderGetActionableElementsV1SignalFull(HttpRequestWorker *worker, Ezsignfolder_getActionableElements_v1_Response summary);
    void ezsignfolderGetAttachmentCountV1SignalFull(HttpRequestWorker *worker, Ezsignfolder_getAttachmentCount_v1_Response summary);
    void ezsignfolderGetAttachmentsV1SignalFull(HttpRequestWorker *worker, Ezsignfolder_getAttachments_v1_Response summary);
    void ezsignfolderGetCommunicationCountV1SignalFull(HttpRequestWorker *worker, Ezsignfolder_getCommunicationCount_v1_Response summary);
    void ezsignfolderGetCommunicationListV1SignalFull(HttpRequestWorker *worker, Ezsignfolder_getCommunicationList_v1_Response summary);
    void ezsignfolderGetCommunicationrecipientsV1SignalFull(HttpRequestWorker *worker, Ezsignfolder_getCommunicationrecipients_v1_Response summary);
    void ezsignfolderGetCommunicationsendersV1SignalFull(HttpRequestWorker *worker, Ezsignfolder_getCommunicationsenders_v1_Response summary);
    void ezsignfolderGetEzsigndocumentsV1SignalFull(HttpRequestWorker *worker, Ezsignfolder_getEzsigndocuments_v1_Response summary);
    void ezsignfolderGetEzsignfoldersignerassociationsV1SignalFull(HttpRequestWorker *worker, Ezsignfolder_getEzsignfoldersignerassociations_v1_Response summary);
    void ezsignfolderGetEzsignsignaturesAutomaticV1SignalFull(HttpRequestWorker *worker, Ezsignfolder_getEzsignsignaturesAutomatic_v1_Response summary);
    void ezsignfolderGetFormsDataV1SignalFull(HttpRequestWorker *worker, Ezsignfolder_getFormsData_v1_Response summary);
    void ezsignfolderGetListV1SignalFull(HttpRequestWorker *worker, Ezsignfolder_getList_v1_Response summary);
    void ezsignfolderGetObjectV1SignalFull(HttpRequestWorker *worker, Ezsignfolder_getObject_v1_Response summary);
    void ezsignfolderGetObjectV2SignalFull(HttpRequestWorker *worker, Ezsignfolder_getObject_v2_Response summary);
    void ezsignfolderGetObjectV3SignalFull(HttpRequestWorker *worker, Ezsignfolder_getObject_v3_Response summary);
    void ezsignfolderImportEzsignfoldersignerassociationsV1SignalFull(HttpRequestWorker *worker, Ezsignfolder_importEzsignfoldersignerassociations_v1_Response summary);
    void ezsignfolderImportEzsigntemplatepackageV1SignalFull(HttpRequestWorker *worker, Ezsignfolder_importEzsigntemplatepackage_v1_Response summary);
    void ezsignfolderReorderV1SignalFull(HttpRequestWorker *worker, Common_Response summary);
    void ezsignfolderReorderV2SignalFull(HttpRequestWorker *worker, Common_Response summary);
    void ezsignfolderSendV1SignalFull(HttpRequestWorker *worker, Common_Response summary);
    void ezsignfolderSendV3SignalFull(HttpRequestWorker *worker, Common_Response summary);
    void ezsignfolderUnsendV1SignalFull(HttpRequestWorker *worker, Common_Response summary);

    Q_DECL_DEPRECATED_X("Use ezsignfolderArchiveV1SignalError() instead")
    void ezsignfolderArchiveV1SignalE(Common_Response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ezsignfolderArchiveV1SignalError(Common_Response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ezsignfolderBatchDownloadV1SignalError() instead")
    void ezsignfolderBatchDownloadV1SignalE(HttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ezsignfolderBatchDownloadV1SignalError(HttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ezsignfolderCreateObjectV1SignalError() instead")
    void ezsignfolderCreateObjectV1SignalE(Ezsignfolder_createObject_v1_Response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ezsignfolderCreateObjectV1SignalError(Ezsignfolder_createObject_v1_Response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ezsignfolderCreateObjectV2SignalError() instead")
    void ezsignfolderCreateObjectV2SignalE(Ezsignfolder_createObject_v2_Response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ezsignfolderCreateObjectV2SignalError(Ezsignfolder_createObject_v2_Response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ezsignfolderCreateObjectV3SignalError() instead")
    void ezsignfolderCreateObjectV3SignalE(Ezsignfolder_createObject_v3_Response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ezsignfolderCreateObjectV3SignalError(Ezsignfolder_createObject_v3_Response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ezsignfolderDeleteObjectV1SignalError() instead")
    void ezsignfolderDeleteObjectV1SignalE(Common_Response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ezsignfolderDeleteObjectV1SignalError(Common_Response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ezsignfolderDisposeEzsignfoldersV1SignalError() instead")
    void ezsignfolderDisposeEzsignfoldersV1SignalE(Common_Response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ezsignfolderDisposeEzsignfoldersV1SignalError(Common_Response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ezsignfolderDisposeV1SignalError() instead")
    void ezsignfolderDisposeV1SignalE(Common_Response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ezsignfolderDisposeV1SignalError(Common_Response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ezsignfolderEditObjectV3SignalError() instead")
    void ezsignfolderEditObjectV3SignalE(Common_Response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ezsignfolderEditObjectV3SignalError(Common_Response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ezsignfolderEndPrematurelyV1SignalError() instead")
    void ezsignfolderEndPrematurelyV1SignalE(Common_Response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ezsignfolderEndPrematurelyV1SignalError(Common_Response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ezsignfolderGetActionableElementsV1SignalError() instead")
    void ezsignfolderGetActionableElementsV1SignalE(Ezsignfolder_getActionableElements_v1_Response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ezsignfolderGetActionableElementsV1SignalError(Ezsignfolder_getActionableElements_v1_Response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ezsignfolderGetAttachmentCountV1SignalError() instead")
    void ezsignfolderGetAttachmentCountV1SignalE(Ezsignfolder_getAttachmentCount_v1_Response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ezsignfolderGetAttachmentCountV1SignalError(Ezsignfolder_getAttachmentCount_v1_Response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ezsignfolderGetAttachmentsV1SignalError() instead")
    void ezsignfolderGetAttachmentsV1SignalE(Ezsignfolder_getAttachments_v1_Response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ezsignfolderGetAttachmentsV1SignalError(Ezsignfolder_getAttachments_v1_Response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ezsignfolderGetCommunicationCountV1SignalError() instead")
    void ezsignfolderGetCommunicationCountV1SignalE(Ezsignfolder_getCommunicationCount_v1_Response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ezsignfolderGetCommunicationCountV1SignalError(Ezsignfolder_getCommunicationCount_v1_Response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ezsignfolderGetCommunicationListV1SignalError() instead")
    void ezsignfolderGetCommunicationListV1SignalE(Ezsignfolder_getCommunicationList_v1_Response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ezsignfolderGetCommunicationListV1SignalError(Ezsignfolder_getCommunicationList_v1_Response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ezsignfolderGetCommunicationrecipientsV1SignalError() instead")
    void ezsignfolderGetCommunicationrecipientsV1SignalE(Ezsignfolder_getCommunicationrecipients_v1_Response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ezsignfolderGetCommunicationrecipientsV1SignalError(Ezsignfolder_getCommunicationrecipients_v1_Response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ezsignfolderGetCommunicationsendersV1SignalError() instead")
    void ezsignfolderGetCommunicationsendersV1SignalE(Ezsignfolder_getCommunicationsenders_v1_Response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ezsignfolderGetCommunicationsendersV1SignalError(Ezsignfolder_getCommunicationsenders_v1_Response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ezsignfolderGetEzsigndocumentsV1SignalError() instead")
    void ezsignfolderGetEzsigndocumentsV1SignalE(Ezsignfolder_getEzsigndocuments_v1_Response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ezsignfolderGetEzsigndocumentsV1SignalError(Ezsignfolder_getEzsigndocuments_v1_Response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ezsignfolderGetEzsignfoldersignerassociationsV1SignalError() instead")
    void ezsignfolderGetEzsignfoldersignerassociationsV1SignalE(Ezsignfolder_getEzsignfoldersignerassociations_v1_Response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ezsignfolderGetEzsignfoldersignerassociationsV1SignalError(Ezsignfolder_getEzsignfoldersignerassociations_v1_Response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ezsignfolderGetEzsignsignaturesAutomaticV1SignalError() instead")
    void ezsignfolderGetEzsignsignaturesAutomaticV1SignalE(Ezsignfolder_getEzsignsignaturesAutomatic_v1_Response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ezsignfolderGetEzsignsignaturesAutomaticV1SignalError(Ezsignfolder_getEzsignsignaturesAutomatic_v1_Response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ezsignfolderGetFormsDataV1SignalError() instead")
    void ezsignfolderGetFormsDataV1SignalE(Ezsignfolder_getFormsData_v1_Response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ezsignfolderGetFormsDataV1SignalError(Ezsignfolder_getFormsData_v1_Response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ezsignfolderGetListV1SignalError() instead")
    void ezsignfolderGetListV1SignalE(Ezsignfolder_getList_v1_Response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ezsignfolderGetListV1SignalError(Ezsignfolder_getList_v1_Response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ezsignfolderGetObjectV1SignalError() instead")
    void ezsignfolderGetObjectV1SignalE(Ezsignfolder_getObject_v1_Response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ezsignfolderGetObjectV1SignalError(Ezsignfolder_getObject_v1_Response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ezsignfolderGetObjectV2SignalError() instead")
    void ezsignfolderGetObjectV2SignalE(Ezsignfolder_getObject_v2_Response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ezsignfolderGetObjectV2SignalError(Ezsignfolder_getObject_v2_Response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ezsignfolderGetObjectV3SignalError() instead")
    void ezsignfolderGetObjectV3SignalE(Ezsignfolder_getObject_v3_Response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ezsignfolderGetObjectV3SignalError(Ezsignfolder_getObject_v3_Response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ezsignfolderImportEzsignfoldersignerassociationsV1SignalError() instead")
    void ezsignfolderImportEzsignfoldersignerassociationsV1SignalE(Ezsignfolder_importEzsignfoldersignerassociations_v1_Response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ezsignfolderImportEzsignfoldersignerassociationsV1SignalError(Ezsignfolder_importEzsignfoldersignerassociations_v1_Response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ezsignfolderImportEzsigntemplatepackageV1SignalError() instead")
    void ezsignfolderImportEzsigntemplatepackageV1SignalE(Ezsignfolder_importEzsigntemplatepackage_v1_Response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ezsignfolderImportEzsigntemplatepackageV1SignalError(Ezsignfolder_importEzsigntemplatepackage_v1_Response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ezsignfolderReorderV1SignalError() instead")
    void ezsignfolderReorderV1SignalE(Common_Response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ezsignfolderReorderV1SignalError(Common_Response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ezsignfolderReorderV2SignalError() instead")
    void ezsignfolderReorderV2SignalE(Common_Response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ezsignfolderReorderV2SignalError(Common_Response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ezsignfolderSendV1SignalError() instead")
    void ezsignfolderSendV1SignalE(Common_Response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ezsignfolderSendV1SignalError(Common_Response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ezsignfolderSendV3SignalError() instead")
    void ezsignfolderSendV3SignalE(Common_Response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ezsignfolderSendV3SignalError(Common_Response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ezsignfolderUnsendV1SignalError() instead")
    void ezsignfolderUnsendV1SignalE(Common_Response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ezsignfolderUnsendV1SignalError(Common_Response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use ezsignfolderArchiveV1SignalErrorFull() instead")
    void ezsignfolderArchiveV1SignalEFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ezsignfolderArchiveV1SignalErrorFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ezsignfolderBatchDownloadV1SignalErrorFull() instead")
    void ezsignfolderBatchDownloadV1SignalEFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ezsignfolderBatchDownloadV1SignalErrorFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ezsignfolderCreateObjectV1SignalErrorFull() instead")
    void ezsignfolderCreateObjectV1SignalEFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ezsignfolderCreateObjectV1SignalErrorFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ezsignfolderCreateObjectV2SignalErrorFull() instead")
    void ezsignfolderCreateObjectV2SignalEFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ezsignfolderCreateObjectV2SignalErrorFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ezsignfolderCreateObjectV3SignalErrorFull() instead")
    void ezsignfolderCreateObjectV3SignalEFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ezsignfolderCreateObjectV3SignalErrorFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ezsignfolderDeleteObjectV1SignalErrorFull() instead")
    void ezsignfolderDeleteObjectV1SignalEFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ezsignfolderDeleteObjectV1SignalErrorFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ezsignfolderDisposeEzsignfoldersV1SignalErrorFull() instead")
    void ezsignfolderDisposeEzsignfoldersV1SignalEFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ezsignfolderDisposeEzsignfoldersV1SignalErrorFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ezsignfolderDisposeV1SignalErrorFull() instead")
    void ezsignfolderDisposeV1SignalEFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ezsignfolderDisposeV1SignalErrorFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ezsignfolderEditObjectV3SignalErrorFull() instead")
    void ezsignfolderEditObjectV3SignalEFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ezsignfolderEditObjectV3SignalErrorFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ezsignfolderEndPrematurelyV1SignalErrorFull() instead")
    void ezsignfolderEndPrematurelyV1SignalEFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ezsignfolderEndPrematurelyV1SignalErrorFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ezsignfolderGetActionableElementsV1SignalErrorFull() instead")
    void ezsignfolderGetActionableElementsV1SignalEFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ezsignfolderGetActionableElementsV1SignalErrorFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ezsignfolderGetAttachmentCountV1SignalErrorFull() instead")
    void ezsignfolderGetAttachmentCountV1SignalEFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ezsignfolderGetAttachmentCountV1SignalErrorFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ezsignfolderGetAttachmentsV1SignalErrorFull() instead")
    void ezsignfolderGetAttachmentsV1SignalEFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ezsignfolderGetAttachmentsV1SignalErrorFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ezsignfolderGetCommunicationCountV1SignalErrorFull() instead")
    void ezsignfolderGetCommunicationCountV1SignalEFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ezsignfolderGetCommunicationCountV1SignalErrorFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ezsignfolderGetCommunicationListV1SignalErrorFull() instead")
    void ezsignfolderGetCommunicationListV1SignalEFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ezsignfolderGetCommunicationListV1SignalErrorFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ezsignfolderGetCommunicationrecipientsV1SignalErrorFull() instead")
    void ezsignfolderGetCommunicationrecipientsV1SignalEFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ezsignfolderGetCommunicationrecipientsV1SignalErrorFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ezsignfolderGetCommunicationsendersV1SignalErrorFull() instead")
    void ezsignfolderGetCommunicationsendersV1SignalEFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ezsignfolderGetCommunicationsendersV1SignalErrorFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ezsignfolderGetEzsigndocumentsV1SignalErrorFull() instead")
    void ezsignfolderGetEzsigndocumentsV1SignalEFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ezsignfolderGetEzsigndocumentsV1SignalErrorFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ezsignfolderGetEzsignfoldersignerassociationsV1SignalErrorFull() instead")
    void ezsignfolderGetEzsignfoldersignerassociationsV1SignalEFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ezsignfolderGetEzsignfoldersignerassociationsV1SignalErrorFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ezsignfolderGetEzsignsignaturesAutomaticV1SignalErrorFull() instead")
    void ezsignfolderGetEzsignsignaturesAutomaticV1SignalEFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ezsignfolderGetEzsignsignaturesAutomaticV1SignalErrorFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ezsignfolderGetFormsDataV1SignalErrorFull() instead")
    void ezsignfolderGetFormsDataV1SignalEFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ezsignfolderGetFormsDataV1SignalErrorFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ezsignfolderGetListV1SignalErrorFull() instead")
    void ezsignfolderGetListV1SignalEFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ezsignfolderGetListV1SignalErrorFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ezsignfolderGetObjectV1SignalErrorFull() instead")
    void ezsignfolderGetObjectV1SignalEFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ezsignfolderGetObjectV1SignalErrorFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ezsignfolderGetObjectV2SignalErrorFull() instead")
    void ezsignfolderGetObjectV2SignalEFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ezsignfolderGetObjectV2SignalErrorFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ezsignfolderGetObjectV3SignalErrorFull() instead")
    void ezsignfolderGetObjectV3SignalEFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ezsignfolderGetObjectV3SignalErrorFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ezsignfolderImportEzsignfoldersignerassociationsV1SignalErrorFull() instead")
    void ezsignfolderImportEzsignfoldersignerassociationsV1SignalEFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ezsignfolderImportEzsignfoldersignerassociationsV1SignalErrorFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ezsignfolderImportEzsigntemplatepackageV1SignalErrorFull() instead")
    void ezsignfolderImportEzsigntemplatepackageV1SignalEFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ezsignfolderImportEzsigntemplatepackageV1SignalErrorFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ezsignfolderReorderV1SignalErrorFull() instead")
    void ezsignfolderReorderV1SignalEFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ezsignfolderReorderV1SignalErrorFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ezsignfolderReorderV2SignalErrorFull() instead")
    void ezsignfolderReorderV2SignalEFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ezsignfolderReorderV2SignalErrorFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ezsignfolderSendV1SignalErrorFull() instead")
    void ezsignfolderSendV1SignalEFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ezsignfolderSendV1SignalErrorFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ezsignfolderSendV3SignalErrorFull() instead")
    void ezsignfolderSendV3SignalEFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ezsignfolderSendV3SignalErrorFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ezsignfolderUnsendV1SignalErrorFull() instead")
    void ezsignfolderUnsendV1SignalEFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ezsignfolderUnsendV1SignalErrorFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace Ezmaxapi
#endif
